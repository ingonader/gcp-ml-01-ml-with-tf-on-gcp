変数はテンソルで
値は初期化され プログラムの実行時に
変更されます この例を詳しく見てみましょう forward_passという関数があります パラメータw、xを受け入れて それらを掛け合わせます これらはテンソルのため 行列乗算になります train_loop関数では テンソルwを作成します このwは これまでのような
定数ではなく 変数です weightsという名前が付き 形状は1, 2です これは1行2列 つまり 1x2行列です ここではwを初期化しません TensorFlowは 遅延評価フレームワークなので
グラフを作成するだけです まだ実行しません wの初期化には 「truncated_normal_initializer」
を使用します 一般的なイニシャライザで TensorFlowニューラルネットワーク
プログラムで使われます 変数を初期化して
乱数にします 均一に分散せず
ガウス正規分布で ゼロ平均と単位分散を
使用します ガウス正規分布は
ロングテールになり 極端な異常値を
取る可能性があります 可能性は低いですが
あり得ます truncated_normalは
シグマの和乗算の 切り捨てのようなものを実行します 変数wは
トレーニングできます つまり トレーニング中に
変更できる変数です 変数は
変わるものですので 大半はトレーニング可能です これについては モデルサイズの削減や
移転学習で紹介します これはときどき グラフを静止させて変数を
固定するのに役立ちます Booleanフラグで それを行えます tf.get_variableを呼び出して
wを作成している点に注目してください TensorFlowコードで
tf.variableコンストラクタを呼び出して 変数を作成できます こうした直接の呼び出しは
おすすめしません コース9で学ぶように
tf.get_variableを使用します この場合は状況に応じて 
変数を再利用したり 新しく作成したりできます tf.get_variableに
慣れておくとよいでしょう 次にforward_passを5回実行し 反復ごとに
行列乗算の結果を保存します 乗算を行った後
weightsを変更します ここでは 0.1を加えます 勾配更新のようなものです 実際には 変更するweightsと
その方法を選択します ここではデモが目的ですから 毎回 0.1を加えます セッションから xを渡すことで
train_loopを呼び出します xは[2, 3]行列です forward_passでは [1, 2]行列のwに
このxを掛けます [1, 2]に[2, 3]を掛けることで
[1, 3]行列が得られます これでグラフは完了ですが
変数を初期化する必要があります ただし 通常は global_variables_initializerを実行して グラフ内の変数を
一度にすべて初期化します さて ループの各ステップ後の
積の値に注目すると 予想どおり
[1, 3]行列は毎回異なります 学んだことを
まとめましょう まずget_variableを呼び出して
変数を作成します 今回はコードを1行飛ばしました 変数を作成するときは スコープを指定できます 毎回 新しい変数を作成するのではなく 再利用するようにします ここでは train_loopを一度だけ呼び出すので
重要ではないものの train_loopを再び呼び出すと weightsが前回の終わりから
再開します これが変数の作成と再利用です 学んだ2つの目の点は 
変数の作成時に 初期化の方法を
決めることです ニューラルネットワーク
トレーニングでは通常 正規乱数と切り捨てを選びます 3番目の点は グラフの作成時に
変数を使うことです 4番目の点は 変数を初期化することです 通常は global_variables_initializerを
呼び出して すべての変数を一緒に初期化します 初期化の後 これは5番目の点ですが 対象となるテンソルを評価します この例では xを使ってtrain_loopを呼び出します でも xは定数です これは現実的ですか プログラムに入力値を
ハードコーディングしますか プレースホルダで
グラフに値をフィードできます たとえば 読み取った値を
Pythonリストに入れ TensorFlowグラフにフィードできます aは スカラーを保持する
プレースホルダです bはaに4を掛けたものです aを出力すると
テンソルのデバッグ出力が得られます このテンソルは 浮動小数点数を受け入れる
プレースホルダです bを評価する場合 このsession.run(b)を調整できます bが依存するプレースホルダ値を
フィードする必要があります この場合 aに対してリストか
数値numpy配列を渡す必要があります ここではfeed_dictを使用します このディクショナリはKey-Valueペア キーはプレースホルダで ここではaです 値はnumpy配列のリストで ここでは1,2,3です これをフィードします bを評価すると aに4を掛けた値を得られるため 4、8、12が出力されます