1
00:00:00,800 --> 00:00:02,930
Ya hablamos sobre lo que es TensorFlow

2
00:00:03,390 --> 00:00:06,160
y sobre la jerarquía
de API de TensorFlow.

3
00:00:06,490 --> 00:00:10,700
En la lección anterior, hablamos
sobre el grafo acíclico dirigido o DAG

4
00:00:10,800 --> 00:00:12,990
y cómo se ejecuta en una sesión.

5
00:00:13,290 --> 00:00:17,970
Dijimos que un DAG está compuesto
de tensores y operaciones en ellos.

6
00:00:18,540 --> 00:00:22,020
Ahora, veamos qué son
los tensores en más detalle.

7
00:00:23,050 --> 00:00:26,730
Como ya dijimos, un tensor
es un arreglo de datos de n dimensiones.

8
00:00:27,080 --> 00:00:30,620
Cuando se crea un tensor,
por lo general se especifica su forma.

9
00:00:31,070 --> 00:00:34,230
A veces no se especifica
la forma por completo.

10
00:00:34,430 --> 00:00:37,290
Por ejemplo, el primer elemento
de la forma puede ser variable

11
00:00:37,430 --> 00:00:39,460
pero ignoremos
ese caso especial por ahora.

12
00:00:40,170 --> 00:00:45,075
Aquí, estoy creando tf.constant(3).

13
00:00:45,475 --> 00:00:47,470
Este es un tensor de rango 0.

14
00:00:47,670 --> 00:00:49,930
Es solo un número, un escalar.

15
00:00:50,370 --> 00:00:53,850
La forma, cuando vemos la salida
del depurador del tensor

16
00:00:54,090 --> 00:00:57,070
será ().

17
00:00:57,340 --> 00:00:58,610
Su rango es 0.

18
00:00:59,380 --> 00:01:00,650
Por otro lado

19
00:01:00,880 --> 00:01:06,200
¿qué sucede si paso
la lista [3, 5, 7] a tf.constant?

20
00:01:06,720 --> 00:01:10,650
Ahora tenemos un tensor
de una dimensión, un vector.

21
00:01:11,030 --> 00:01:11,990
Y podemos seguir.

22
00:01:12,350 --> 00:01:14,210
Aquí, paso un arreglo 2D

23
00:01:14,470 --> 00:01:19,380
con [3, 5, 7] en la primera fila
y [4, 6, 8] en la segunda.

24
00:01:19,660 --> 00:01:22,669
La forma del tensor resultante es (2, 3)

25
00:01:22,999 --> 00:01:25,010
Tiene 2 filas y 3 columnas.

26
00:01:25,290 --> 00:01:27,112
El rango es 2.

27
00:01:27,482 --> 00:01:32,210
Una matriz puede pensarse
como una pila de tensores 1D.

28
00:01:32,670 --> 00:01:36,394
El primer tensor es el vector [3, 5, 7]

29
00:01:36,594 --> 00:01:42,053
y el segundo tensor 1D
que se apila es el vector [4, 6, 8].

30
00:01:43,233 --> 00:01:45,826
De manera similar,
podemos crear una matriz 3D

31
00:01:45,986 --> 00:01:49,970
si apilamos dos matrices 2D,
una encima de la otra.

32
00:01:50,340 --> 00:01:54,215
Aquí, apilo la matriz 3, 5, 7, etcétera

33
00:01:54,475 --> 00:01:57,470
sobre la matriz 1, 2, 3…

34
00:01:58,000 --> 00:02:01,522
Puesto que apilé dos matrices de 2 x 3

35
00:02:01,902 --> 00:02:06,210
la forma resultante del tensor es (2, 2, 3).

36
00:02:07,190 --> 00:02:10,790
Por supuesto,
puedo hacer el apilado en el código

37
00:02:10,990 --> 00:02:13,280
en lugar de contar todos esos paréntesis.

38
00:02:13,810 --> 00:02:16,716
Aquí, x1 es una constante

39
00:02:16,886 --> 00:02:20,578
y está construida
de una lista simple [2, 3, 4].

40
00:02:20,898 --> 00:02:24,361
Eso la hace un vector de longitud 3.

41
00:02:24,921 --> 00:02:30,216
x2 se construye al apilar x1 sobre x1

42
00:02:30,446 --> 00:02:33,290
lo que la convierte
en una matriz de 2 x 3.

43
00:02:33,790 --> 00:02:38,455
x3 se construye al apilar cuatro x2

44
00:02:38,975 --> 00:02:40,140
una sobre la otra.

45
00:02:40,450 --> 00:02:43,680
Ya que cada x2 era una matriz de 2 x 3

46
00:02:44,010 --> 00:02:47,291
eso hace de x3 un tensor 3D

47
00:02:47,581 --> 00:02:50,422
cuya forma es 4 x 2 x 3.

48
00:02:51,182 --> 00:02:56,021
x4 se construye al apilar x3 sobre x3

49
00:02:56,321 --> 00:02:59,991
lo que hace dos de esos tensores de 4 x 2 x 3

50
00:03:00,301 --> 00:03:06,006
o un tensor 4D que tiene la forma 2, 4, 2, 3.

51
00:03:07,346 --> 00:03:10,097
Puede apilar tensores unos sobre otros

52
00:03:10,217 --> 00:03:12,600
para crear tensores de más dimensiones.

53
00:03:13,260 --> 00:03:16,065
También puede usar slice en un tensor

54
00:03:16,225 --> 00:03:18,975
para extraer tensores
de menos dimensiones.

55
00:03:20,295 --> 00:03:22,710
Aquí, ¿cuál es la forma de x?

56
00:03:24,690 --> 00:03:25,720
Es 2 x 3.

57
00:03:26,040 --> 00:03:28,050
2 filas y 3 columnas.

58
00:03:29,410 --> 00:03:31,710
Ahora, veamos el código de y.

59
00:03:32,230 --> 00:03:34,150
Está dividiendo x.

60
00:03:34,920 --> 00:03:38,920
Los dos puntos indican
que estamos obteniendo todas las filas

61
00:03:39,440 --> 00:03:44,040
y el 1 indica que estamos
obteniendo solo la columna 1.

62
00:03:44,720 --> 00:03:49,830
Ya que Python indexa con base en 0,
es en realidad la segunda columna: 0, 1.

63
00:03:51,480 --> 00:03:56,160
Cuando evaluamos y,
obtenemos el valor de la segunda columna

64
00:03:56,430 --> 00:03:57,830
para todas las filas.

65
00:03:58,060 --> 00:04:02,080
Por eso se muestra [5, 6].

66
00:04:03,720 --> 00:04:04,972
Cuestionario rápido.

67
00:04:05,702 --> 00:04:11,893
¿Qué haría x[1, :]?

68
00:04:13,593 --> 00:04:19,308
¿Y x[1, 0:2]?

69
00:04:19,628 --> 00:04:20,473
¿Qué haría?

70
00:04:22,180 --> 00:04:23,290
¿Respuestas?

71
00:04:23,780 --> 00:04:27,440
Cuando se usa x[1, : ]

72
00:04:27,740 --> 00:04:29,150
se obtiene la segunda fila.

73
00:04:29,150 --> 00:04:31,630
Recuerde: indexación en 0,
así que 1 es la segunda fila.

74
00:04:31,820 --> 00:04:33,480
Y se obtienen todas las columnas.

75
00:04:34,010 --> 00:04:37,015
Entonces, obtendremos [4, 6, 8].

76
00:04:38,525 --> 00:04:42,050
¿Qué columnas obtendrá 0:2?

77
00:04:42,760 --> 00:04:47,020
Esto es muy similar
a la función xrange en Python.

78
00:04:47,410 --> 00:04:52,250
Quiere decir que empieza en 0
y sube 2, pero no incluye 2.

79
00:04:52,540 --> 00:04:54,180
Eso quiere decir, 0 y 1.

80
00:04:55,070 --> 00:04:59,255
Esto quiere decir que obtendrá
ambas filas, entonces es lo mismo.

81
00:04:59,255 --> 00:05:02,690
Igual obtendremos
[4, 6, 8] en estos datos.

82
00:05:04,866 --> 00:05:07,420
Una vez que tenga los datos en el tensor

83
00:05:07,630 --> 00:05:11,480
puede tomarlos
y cambiar la forma del tensor.

84
00:05:12,440 --> 00:05:14,450
Entonces, x es un tensor 2D.

85
00:05:15,150 --> 00:05:16,350
¿Qué forma tiene?

86
00:05:17,620 --> 00:05:19,210
Correcto. Es 2 x 3.

87
00:05:20,090 --> 00:05:24,640
¿Qué pasa si cambio la forma a [3, 2]?

88
00:05:26,350 --> 00:05:29,420
Quiero los seis valores de x

89
00:05:29,770 --> 00:05:33,700
pero quiero que estén
en 3 filas y 2 columnas.

90
00:05:34,170 --> 00:05:38,630
Básicamente, Python leerá
el tensor de entrada, fila por fila

91
00:05:39,040 --> 00:05:41,440
y colocará los números
en el tensor de salida.

92
00:05:41,860 --> 00:05:45,560
Tomará los primeros dos valores
y los colocará en la primera fila

93
00:05:45,860 --> 00:05:47,070
por lo que obtenemos 3 y 5.

94
00:05:47,410 --> 00:05:52,110
Los dos valores siguientes,
7 y 4, irán a la segunda fila

95
00:05:52,440 --> 00:05:56,020
y los dos últimos, 6 y 8, a la tercera.

96
00:05:56,250 --> 00:05:58,080
Eso es lo que hace reshape.

97
00:05:59,060 --> 00:06:01,710
Podemos usar reshape y slice.

98
00:06:02,150 --> 00:06:05,760
Aquí, cambio la forma en 3 x 2, como antes

99
00:06:06,010 --> 00:06:07,760
y luego lo divido

100
00:06:08,100 --> 00:06:12,000
por eso obtengo solo la segunda fila
y todas las columnas.

101
00:06:12,250 --> 00:06:15,212
Y por eso obtengo [7, 4].