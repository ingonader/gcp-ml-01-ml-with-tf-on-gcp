1
00:00:00,740 --> 00:00:03,330
Wir haben erörtert, was Tensor Flow ist,

2
00:00:03,330 --> 00:00:06,510
und über die Hierarchie
der Tensor Flow API gesprochen.

3
00:00:06,510 --> 00:00:10,820
In der vorangegangenen Lektion haben wir
den gerichteten azyklischen Graphen (DAG)

4
00:00:10,820 --> 00:00:13,400
und seine Ausführung in
einer Sitzung besprochen.

5
00:00:13,400 --> 00:00:18,610
Ein DAG besteht aus Tensoren
und Operationen auf diesen Tensoren.

6
00:00:18,610 --> 00:00:21,900
Sehen wir uns Tensoren jetzt genauer an.

7
00:00:23,120 --> 00:00:27,080
Ein Tensor ist ein
n-dimensionaler Datenarray.

8
00:00:27,080 --> 00:00:31,070
Wenn man einen Tensor erstellt,
legt man normalerweise dessen Form fest.

9
00:00:31,070 --> 00:00:34,530
Gelegentlich legt man die Form
allerdings nicht vollständig fest.

10
00:00:34,530 --> 00:00:37,580
Das erste Element der Form
könnte beispielsweise variabel sein,

11
00:00:37,580 --> 00:00:40,170
aber diesen Spezialfall
lassen wir jetzt außer Acht.

12
00:00:40,170 --> 00:00:45,435
Hier erstelle ich einen tf.constant(3).

13
00:00:45,435 --> 00:00:47,670
Das ist ein Tensor mit dem Rang 0.

14
00:00:47,670 --> 00:00:50,370
Es ist nur eine Zahl, ein Skalar.

15
00:00:50,370 --> 00:00:57,370
Wenn man sich den Tensor in der Debug-
Ausgabe ansieht, ist die Form einfach ().

16
00:00:57,370 --> 00:00:58,920
Sein Rang beträgt 0.

17
00:00:59,380 --> 00:01:06,720
Was aber, wenn ich die Liste
3, 5, 7 an tf.constant übergebe?

18
00:01:06,720 --> 00:01:09,700
Jetzt haben wir einen
eindimensionalen Tensor.

19
00:01:09,700 --> 00:01:12,350
Wir haben einen Vektor.

20
00:01:12,350 --> 00:01:14,660
Hier übergebe ich einen
zweidimensionalen Array,

21
00:01:14,660 --> 00:01:19,700
3, 5, 7 in der ersten Zeile
und 4, 6, 8 in der zweiten.

22
00:01:19,700 --> 00:01:23,009
Die Form des Ergebnistensors ist 2, 3:

23
00:01:23,009 --> 00:01:27,442
2 Zeilen, 3 Spalten, der Rang beträgt 2.

24
00:01:27,442 --> 00:01:32,610
Eine Matrix kann einfach als Stapel
von 1-D-Tensoren betrachtet werden.

25
00:01:32,610 --> 00:01:36,674
Der erste Tensor ist ein Vektor 3, 5, 7

26
00:01:36,674 --> 00:01:39,503
und der zweite gestapelte 1-D-Tensor

27
00:01:39,503 --> 00:01:43,143
ist ein Vektor 4, 6, 8.

28
00:01:43,143 --> 00:01:48,286
Ebenso können wir durch Stapeln von
2-D-Matrizen eine 3-D-Matrix erstellen,

29
00:01:48,286 --> 00:01:50,340
eine über der anderen.

30
00:01:50,340 --> 00:01:54,480
Hier stapele ich die Matrix 3, 5, 7 usw.

31
00:01:54,480 --> 00:01:58,010
über die Matrix 1, 2, 3.

32
00:01:58,010 --> 00:02:01,592
Da ich zwei 2-mal-3-
Matrizen gestapelt habe,

33
00:02:01,592 --> 00:02:06,720
hat der Ergebnistensor die Form 2, 2, 3.

34
00:02:07,210 --> 00:02:10,990
Natürlich kann ich das Stapeln
auch im Code durchführen lassen,

35
00:02:10,990 --> 00:02:13,740
statt all diese Klammern zu zählen.

36
00:02:13,740 --> 00:02:16,776
x1 ist hier eine Konstante,

37
00:02:16,776 --> 00:02:20,786
konstruiert aus
einer einfachen Liste 2, 3, 4.

38
00:02:20,786 --> 00:02:24,791
Sie ist also ein Vektor der Länge 3.

39
00:02:24,791 --> 00:02:30,336
x2 wird durch Stapeln
von x1 auf x1 konstruiert,

40
00:02:30,336 --> 00:02:33,790
dies ist also eine 2-mal-3-Matrix.

41
00:02:33,790 --> 00:02:40,420
x3 wird durch 4-maliges Stapeln
von x2 übereinander konstruiert.

42
00:02:40,420 --> 00:02:44,090
Und da jedes x2 eine 2-mal-3-Matrix war,

43
00:02:44,090 --> 00:02:51,182
wird x3 ein 3-D-Tensor
der Form 4 mal 2 mal 3.

44
00:02:51,182 --> 00:02:56,491
x4 wird durch Stapeln
von x3 auf x3 konstruiert,

45
00:02:56,491 --> 00:03:00,221
es besteht also aus zwei
dieser 4-mal-2-mal-3-Tensoren

46
00:03:00,221 --> 00:03:07,256
und ist damit ein
4-D-Tensor der Form 2, 4, 2, 3.

47
00:03:07,256 --> 00:03:11,397
Man kann also Tensoren übereinander
stapeln und enthält dadurch Tensoren

48
00:03:11,397 --> 00:03:13,320
höherer Dimensionen.

49
00:03:13,320 --> 00:03:16,235
Man kann Tensoren auch zerlegen

50
00:03:16,235 --> 00:03:20,295
und Tensoren kleinerer 
Dimensionen extrahieren.

51
00:03:20,295 --> 00:03:23,000
Welche Form hat x hier also?

52
00:03:24,690 --> 00:03:26,040
Die Form 2 mal 3.

53
00:03:26,040 --> 00:03:28,050
2 Zeilen, 3 Spalten.

54
00:03:29,410 --> 00:03:32,290
Jetzt sehen wir uns den Code für y an.

55
00:03:32,290 --> 00:03:34,910
x wird hier zerlegt.

56
00:03:34,910 --> 00:03:36,890
Am Doppelpunkt erkennt man,

57
00:03:36,890 --> 00:03:39,520
dass wir alle Zeilen abrufen,

58
00:03:39,520 --> 00:03:44,740
und die 1 zeigt an,
dass wir nur Spalte 1 abrufen.

59
00:03:44,740 --> 00:03:51,480
Python-Indexe beginnen bei 0,
Spalte 1 ist also die zweite Spalte.

60
00:03:51,480 --> 00:03:58,160
Für y bekommen wir für alle Zeilen
also den Wert der zweiten Spalte.

61
00:03:58,160 --> 00:04:02,480
Und deshalb wird hier 5, 6 ausgegeben.

62
00:04:03,590 --> 00:04:05,572
Ein kleines Quiz:

63
00:04:05,572 --> 00:04:13,593
Was würde der Ausdruck x[1, :] ergeben?

64
00:04:13,593 --> 00:04:20,683
Und was würde x[1, 0:2] ergeben?

65
00:04:22,180 --> 00:04:23,810
Die Antworten?

66
00:04:23,810 --> 00:04:29,020
Durch x[1, : ] erhält 
man die zweite Zeile.

67
00:04:29,020 --> 00:04:30,200
Wie gesagt, nullbasiert.

68
00:04:30,200 --> 00:04:31,820
1 bedeutet also die zweite Zeile.

69
00:04:31,820 --> 00:04:33,990
Und man bekommt alle Spalten.

70
00:04:33,990 --> 00:04:38,435
Wir bekommen also [4, 6, 8].

71
00:04:38,435 --> 00:04:42,240
Welche Spalten werden
durch 0:2 extrahiert?

72
00:04:42,760 --> 00:04:47,410
Das funktioniert ganz ähnlich
wie die x-Range-Funktion in Python.

73
00:04:47,410 --> 00:04:52,500
Es bedeutet, man beginnt bei 0 und
geht 2 hoch, aber nicht einschließlich 2.

74
00:04:52,500 --> 00:04:54,690
Es bedeutet also 0 und 1.

75
00:04:55,070 --> 00:04:57,865
Also bekommt man hier beide Zeilen,

76
00:04:57,865 --> 00:04:59,355
und damit eigentlich dasselbe.

77
00:04:59,355 --> 00:05:02,750
Wir bekommen bei
diesen Daten weiterhin 4, 6, 8.

78
00:05:04,826 --> 00:05:07,420
Sobald man die Daten in einem Tensor hat,

79
00:05:07,420 --> 00:05:09,800
kann man all diese Daten nehmen

80
00:05:09,800 --> 00:05:12,390
und den Tensor umformen.

81
00:05:12,390 --> 00:05:16,570
x ist ein 2-D-Tensor, welche Form hat er?

82
00:05:17,620 --> 00:05:19,330
Genau, 2 mal 3.

83
00:05:20,110 --> 00:05:25,250
Wenn ich ihn in 3, 2 
umforme, was passiert dann?

84
00:05:26,350 --> 00:05:29,840
Ich möchte Folgendes erreichen:
ich möchte die sechs Werte aus x haben,

85
00:05:29,840 --> 00:05:34,140
aber in 3 Zeilen und 2 Spalten.

86
00:05:34,140 --> 00:05:39,010
Python liest den
Eingangstensor also zeilenweise

87
00:05:39,010 --> 00:05:41,810
und schreibt die Zahlen
in den Ausgangstensor.

88
00:05:41,810 --> 00:05:45,910
Die ersten beiden Werte würden
also in die erste Zeile geschrieben.

89
00:05:45,910 --> 00:05:47,370
Damit bekommen wir 3 und 5.

90
00:05:47,370 --> 00:05:52,480
Die nächsten beiden Werte,
7 und 4, kommen in die zweite Zeile,

91
00:05:52,480 --> 00:05:56,220
und die letzten beiden Werte,
6 und 8, kommen in die dritte Zeile.

92
00:05:56,220 --> 00:05:58,510
Das geschieht bei der Umformung.

93
00:05:59,180 --> 00:06:02,150
Wir können umformen
und wir können zerlegen.

94
00:06:02,150 --> 00:06:05,790
Hier forme ich ihn wieder in 3 mal 2 um

95
00:06:05,790 --> 00:06:12,250
und dann zerlege ich ihn, sodass ich nur
die zweite Zeile und alle Spalten bekomme.

96
00:06:12,250 --> 00:06:15,392
Und deshalb bekomme ich 7, 4.