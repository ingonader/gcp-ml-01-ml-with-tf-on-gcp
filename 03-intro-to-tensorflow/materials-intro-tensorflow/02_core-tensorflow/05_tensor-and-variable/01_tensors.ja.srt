1
00:00:00,000 --> 00:00:03,470
TensorFlowについて
説明しました

2
00:00:03,470 --> 00:00:06,490
API階層も確認しました

3
00:00:06,490 --> 00:00:09,940
セッションでの
有向非巡回グラフ（DAG）の

4
00:00:09,940 --> 00:00:13,400
実行方法についても説明しました

5
00:00:13,400 --> 00:00:18,610
DAGは テンソルと
テンソルの演算で構成されます

6
00:00:18,610 --> 00:00:23,140
ここでテンソルについて
さらに詳しく見てみましょう

7
00:00:23,140 --> 00:00:26,980
テンソルはn次元のデータ配列です

8
00:00:26,980 --> 00:00:31,070
テンソルを作成する際
通常は形状を指定しますが

9
00:00:31,070 --> 00:00:34,320
完全には指定しないこともあります

10
00:00:34,320 --> 00:00:37,630
形状の最初の要素は
変数にできますが

11
00:00:37,630 --> 00:00:40,170
そうした特殊なケースは
今は無視します

12
00:00:40,170 --> 00:00:45,435
ここでは tf.constant(3)を
作成しています

13
00:00:45,435 --> 00:00:47,650
0ランクのテンソルです

14
00:00:47,650 --> 00:00:50,370
単一の数値
つまりスカラーです

15
00:00:50,370 --> 00:00:57,030
テンソルのデバッグ出力を見ると
形状は「( )」になります

16
00:00:57,030 --> 00:00:59,350
これが0ランクです

17
00:00:59,380 --> 00:01:06,830
一方で「3, 5, 7」というリストを
tf.constantに渡すと

18
00:01:06,830 --> 00:01:10,690
1次元テンソル
つまりベクトルになります

19
00:01:10,690 --> 00:01:12,350
最初の行に「3, 5, 7」

20
00:01:12,350 --> 00:01:16,350
2行目に「4, 6, 8」を指定して

21
00:01:16,350 --> 00:01:19,700
2次元の配列を渡します

22
00:01:19,700 --> 00:01:23,899
テンソルの形状は
「2, 3」になりますが

23
00:01:23,899 --> 00:01:27,392
これは2行3列を意味し
ランクは2です

24
00:01:27,392 --> 00:01:32,610
行列は 1次元テンソルの
積み重ねと見なすことができます

25
00:01:32,610 --> 00:01:36,774
最初のテンソルはベクトル「3, 5, 7」で

26
00:01:36,774 --> 00:01:43,143
スタックの2番目の1次元テンソルは
ベクトル「4, 6, 8」です

27
00:01:43,143 --> 00:01:47,816
同様に2次元行列を
積み重ねることで

28
00:01:47,816 --> 00:01:50,340
3次元の行列を作成できます

29
00:01:50,340 --> 00:01:58,010
「3, 5, 7」で始まる行列を
「1, 2, 3」に積み重ねます

30
00:01:58,010 --> 00:02:01,592
2行3列の行列を 2つ積み重ねたので

31
00:02:01,592 --> 00:02:07,190
テンソルの形状は
「2, 2, 3」になります

32
00:02:07,210 --> 00:02:10,750
これらのかっこを数えなくても

33
00:02:10,750 --> 00:02:13,740
コードで積み重ねることができます

34
00:02:13,740 --> 00:02:20,786
ここでは「x1」が定数で
単純な「2, 3, 4」で構成されます

35
00:02:20,786 --> 00:02:24,791
これは 長さ3のベクトルになります

36
00:02:24,791 --> 00:02:30,026
「x2」は「x1」に「x1」を
積み重ねて作成され

37
00:02:30,026 --> 00:02:33,790
2行3列の行列になります

38
00:02:33,790 --> 00:02:40,420
「x3」は4つの「x2」を
互いに積み重ねて作成されます

39
00:02:40,420 --> 00:02:44,910
各「x2」は2行3列の
行列なので

40
00:02:44,910 --> 00:02:51,182
「x3」は「4, 2, 3」の
3次元テンソルになります

41
00:02:51,182 --> 00:02:56,491
「x4」は「x3」に「x3」を
積み重ねて作成されます

42
00:02:56,491 --> 00:03:01,101
「4, 2, 3」のテンソル
2つで構成される

43
00:03:01,101 --> 00:03:07,256
つまり「2, 4, 2, 3」の
4次元テンソルになります

44
00:03:07,256 --> 00:03:09,957
積み重ねることで

45
00:03:09,957 --> 00:03:13,320
より高い次元のテンソルを
作成できます

46
00:03:13,320 --> 00:03:16,065
また テンソルをスライスして

47
00:03:16,065 --> 00:03:20,295
低い次元のテンソルを
抜き出すこともできます

48
00:03:20,295 --> 00:03:24,670
この場合「x」の形状は何でしょうか

49
00:03:24,690 --> 00:03:29,370
「2, 3」
2行3列です

50
00:03:29,410 --> 00:03:32,290
「y」のコードに注目してください

51
00:03:32,290 --> 00:03:34,910
「x」をスライスしています

52
00:03:34,910 --> 00:03:39,520
コロンは すべての行を取得することを示し

53
00:03:39,520 --> 00:03:45,340
「1」は1列だけ取得することを意味します

54
00:03:45,340 --> 00:03:51,480
Pythonではゼロから数えるため
実際には2番目の列です

55
00:03:51,480 --> 00:03:58,160
「y」を評価する際に
すべての行で2列目の値を取得します

56
00:03:58,160 --> 00:04:03,680
そのため「5, 6」が出力されます

57
00:04:03,720 --> 00:04:10,292
ここで質問です
x[1, :] の値はどうなりますか

58
00:04:10,292 --> 00:04:13,593
これを実行するとどうなりますか

59
00:04:13,593 --> 00:04:22,143
x[1, 0:2]についてはどうでしょうか
実行するとどうなりますか

60
00:04:22,180 --> 00:04:23,810
答えは

61
00:04:23,810 --> 00:04:28,680
x[1, : ]を実行すると
2行目を取得します

62
00:04:28,680 --> 00:04:30,380
ゼロから数えるので

63
00:04:30,380 --> 00:04:31,820
「1」は2行目です

64
00:04:31,820 --> 00:04:33,990
すべての列を取得し

65
00:04:33,990 --> 00:04:38,435
[4, 6, 8]が得られます

66
00:04:38,435 --> 00:04:42,750
では 0:2はどの列を抜き出しますか

67
00:04:42,760 --> 00:04:47,410
これは Pythonのx range関数に
似ています

68
00:04:47,410 --> 00:04:52,020
0から開始して2つ進みますが
2は含みません

69
00:04:52,020 --> 00:04:55,030
「0」と「1」という意味です

70
00:04:55,070 --> 00:04:59,265
これは 両方の行を取得することを意味するため

71
00:04:59,265 --> 00:05:04,790
実際には同じ「4, 6, 8」が得られます

72
00:05:04,826 --> 00:05:07,420
データがテンソルに挿入されたら

73
00:05:07,420 --> 00:05:12,410
すべてのデータを使って
形状を調整できます

74
00:05:12,440 --> 00:05:17,610
「x」は2次元テンソルですが
形状は何でしょう

75
00:05:17,620 --> 00:05:19,850
そう「2, 3」です

76
00:05:19,850 --> 00:05:26,310
形状を「3, 2」に変更すると
どうなるでしょう

77
00:05:26,350 --> 00:05:29,800
「x」に6個の値が必要ですが

78
00:05:29,800 --> 00:05:34,140
それらを3行2列に配置することになります

79
00:05:34,140 --> 00:05:39,270
基本的にPythonは行ごとに
入力テンソルを読み取り

80
00:05:39,270 --> 00:05:41,810
出力テンソルに数値を配置します

81
00:05:41,810 --> 00:05:45,750
最初の2つの値を
最初の行に配置します

82
00:05:45,750 --> 00:05:47,480
「3」と「5」となります

83
00:05:47,480 --> 00:05:52,290
次の2つの値「7」と「4」が
2行目に入り

84
00:05:52,290 --> 00:05:55,870
最後の「6」と「8」が
3行目に入ります

85
00:05:55,870 --> 00:05:59,030
形状の調整によって
こうなります

86
00:05:59,050 --> 00:06:02,150
形状は調整も
スライスも可能です

87
00:06:02,150 --> 00:06:06,220
「3, 2」に変更して
スライスすると

88
00:06:06,220 --> 00:06:12,250
2行目のすべての列のみが
取得されます

89
00:06:12,250 --> 00:06:15,462
結果、「7, 4」が得られます