1
00:00:00,000 --> 00:00:02,314
これまでのレッスンで

2
00:00:02,314 --> 00:00:05,230
TensorFlowについて
ご紹介しました

3
00:00:05,230 --> 00:00:10,165
次はTensorFlow API階層について
見ていきましょう

4
00:00:10,165 --> 00:00:12,820
多くのソフトウェアライブラリと同様に

5
00:00:12,820 --> 00:00:16,510
TensorFlowにも多数の
抽象化レイヤがあります

6
00:00:16,510 --> 00:00:18,905
最も低い抽象化レベルは

7
00:00:18,905 --> 00:00:23,505
さまざまなハードウェアプラットフォームに
的を絞ったレイヤです

8
00:00:23,505 --> 00:00:25,905
ハードウェアメーカーを除き

9
00:00:25,905 --> 00:00:29,485
皆様はこのレベルで
ほぼ何もすることがないでしょう

10
00:00:29,485 --> 00:00:33,860
次のレベルはTensorFlow C++ APIです

11
00:00:33,860 --> 00:00:37,185
ここではカスタム
TensorFlowアプリを作成できます

12
00:00:37,185 --> 00:00:40,340
必要な機能をC++で実装し

13
00:00:40,340 --> 00:00:43,595
TensorFlow 演算として
登録します

14
00:00:43,595 --> 00:00:47,945
アプリの拡張についてはTensorFlow
ドキュメントをご覧ください

15
00:00:47,945 --> 00:00:52,280
TensorFlowでは
既存の機能を扱うのと同じ方法で

16
00:00:52,280 --> 00:00:55,275
Pythonラッパーを使用できます

17
00:00:55,275 --> 00:00:57,235
ただし ここでは

18
00:00:57,235 --> 00:01:00,215
皆様をML研究者だと
想定していないため

19
00:01:00,215 --> 00:01:02,670
これを行う必要はないでしょう

20
00:01:02,670 --> 00:01:05,880
もし独自のアプリを
実装する必要があるなら

21
00:01:05,880 --> 00:01:07,390
C++を使用します

22
00:01:07,390 --> 00:01:09,135
それほど難しくありません

23
00:01:09,135 --> 00:01:11,610
こうしてTensorFlowを拡張できます

24
00:01:11,610 --> 00:01:14,455
次のレベルはコアPython API です

25
00:01:14,455 --> 00:01:18,540
ここには数値処理コードが多く含まれます

26
00:01:18,540 --> 00:01:24,030
加算、減算、除算、行列乗算などです

27
00:01:24,030 --> 00:01:26,805
変数の作成
テンソルの作成

28
00:01:26,805 --> 00:01:29,895
形状の設定
テンソルのすべてのディメンション

29
00:01:29,895 --> 00:01:33,900
このような基本的な数値処理を

30
00:01:33,900 --> 00:01:36,205
Python APIで行います

31
00:01:36,205 --> 00:01:39,990
次に Pythonモジュールで

32
00:01:39,990 --> 00:01:45,140
ニューラルネットワークの有用な
構成要素を高水準で表します

33
00:01:45,140 --> 00:01:47,780
たとえば 活性化関数を使って

34
00:01:47,780 --> 00:01:51,315
隠れたニューロンの
新しいレイヤを作ります

35
00:01:51,315 --> 00:01:53,265
これがtf.layersです

36
00:01:53,265 --> 00:01:59,140
入ってくるデータの二乗平均平方根誤差を
計算する方法がtf.metricsです

37
00:01:59,140 --> 00:02:02,785
ロジックを使って
交差エントロピーを計算するのは

38
00:02:02,785 --> 00:02:05,550
一般的に最後の計測分類問題になりますが

39
00:02:05,550 --> 00:02:09,580
ロジックによる交差エントロピーは
tf.lossesです

40
00:02:09,580 --> 00:02:12,455
これらのモデルの構成要素は

41
00:02:12,455 --> 00:02:16,410
カスタムNNモデルを作るときに役立ちます

42
00:02:16,410 --> 00:02:20,265
「カスタム」NNモデルを強調する理由は

43
00:02:20,265 --> 00:02:22,120
ほとんどの場合に

44
00:02:22,120 --> 00:02:25,455
カスタム ニューラルネットワーク
モデルが不要だからです

45
00:02:25,455 --> 00:02:28,500
多くの場合
ある程度 標準的な方法で

46
00:02:28,500 --> 00:02:32,640
適切にモデルをトレーニングし
評価して提供できます

47
00:02:32,640 --> 00:02:35,240
トレーニング方法のカスタマイズは不要です

48
00:02:35,240 --> 00:02:38,955
いずれかの最急降下オプティマイザを使い

49
00:02:38,955 --> 00:02:40,930
重みを逆伝搬して

50
00:02:40,930 --> 00:02:42,930
これを繰り返します

51
00:02:42,930 --> 00:02:46,320
低水準セッションループを
作るのではなく

52
00:02:46,320 --> 00:02:49,430
Estimatorを使用します

53
00:02:49,430 --> 00:02:54,425
tf.Estimatorは TensorFlowの高水準API です

54
00:02:54,425 --> 00:02:57,080
これは トレーニングを分散する方法や

55
00:02:57,080 --> 00:03:00,465
評価する方法
チェックポイントの作成方法

56
00:03:00,465 --> 00:03:02,025
モデルの保存方法

57
00:03:02,025 --> 00:03:04,830
提供用にセットアップする方法を扱います

58
00:03:04,830 --> 00:03:07,545
実用的な方法でこれらを行い

59
00:03:07,545 --> 00:03:10,655
ほとんどのMLモデルや
本番環境に適合します

60
00:03:10,655 --> 00:03:14,930
インターネットで
TensorFlowのコード例を見たときに

61
00:03:14,930 --> 00:03:17,625
Estimator APIが使われていないなら

62
00:03:17,625 --> 00:03:19,830
そのコードを無視してください

63
00:03:19,830 --> 00:03:22,370
検討する価値はありません

64
00:03:22,370 --> 00:03:25,190
デバイス配置、メモリ管理、分散を行うには

65
00:03:25,190 --> 00:03:27,955
膨大なコードを書く必要がありますが

66
00:03:27,955 --> 00:03:30,500
Estimatorなら すべて自動化されます

67
00:03:30,500 --> 00:03:34,340
これらが TensorFlowの抽象化レベルです

68
00:03:34,340 --> 00:03:38,475
Cloud ML Engineはこの階層を縦断しています

69
00:03:38,475 --> 00:03:43,075
どの抽象化レベルで
TensorFlowコードを書く場合も

70
00:03:43,075 --> 00:03:46,080
Cloud ML Engineの
マネージドサービスを利用できます

71
00:03:46,080 --> 00:03:48,665
ここにTensorFlowがホストされています

72
00:03:48,665 --> 00:03:53,530
クラウド上のマシンの集合で
TensorFlowを実行できます

73
00:03:53,530 --> 00:03:58,590
ソフトウェアのインストールや
サーバーの管理は不要です