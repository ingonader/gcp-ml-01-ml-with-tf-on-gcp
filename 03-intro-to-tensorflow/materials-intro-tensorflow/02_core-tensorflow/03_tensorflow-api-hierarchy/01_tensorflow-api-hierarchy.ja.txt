これまでのレッスンで TensorFlowについて
ご紹介しました 次はTensorFlow API階層について
見ていきましょう 多くのソフトウェアライブラリと同様に TensorFlowにも多数の
抽象化レイヤがあります 最も低い抽象化レベルは さまざまなハードウェアプラットフォームに
的を絞ったレイヤです ハードウェアメーカーを除き 皆様はこのレベルで
ほぼ何もすることがないでしょう 次のレベルはTensorFlow C++ APIです ここではカスタム
TensorFlowアプリを作成できます 必要な機能をC++で実装し TensorFlow 演算として
登録します アプリの拡張についてはTensorFlow
ドキュメントをご覧ください TensorFlowでは
既存の機能を扱うのと同じ方法で Pythonラッパーを使用できます ただし ここでは 皆様をML研究者だと
想定していないため これを行う必要はないでしょう もし独自のアプリを
実装する必要があるなら C++を使用します それほど難しくありません こうしてTensorFlowを拡張できます 次のレベルはコアPython API です ここには数値処理コードが多く含まれます 加算、減算、除算、行列乗算などです 変数の作成
テンソルの作成 形状の設定
テンソルのすべてのディメンション このような基本的な数値処理を Python APIで行います 次に Pythonモジュールで ニューラルネットワークの有用な
構成要素を高水準で表します たとえば 活性化関数を使って 隠れたニューロンの
新しいレイヤを作ります これがtf.layersです 入ってくるデータの二乗平均平方根誤差を
計算する方法がtf.metricsです ロジックを使って
交差エントロピーを計算するのは 一般的に最後の計測分類問題になりますが ロジックによる交差エントロピーは
tf.lossesです これらのモデルの構成要素は カスタムNNモデルを作るときに役立ちます 「カスタム」NNモデルを強調する理由は ほとんどの場合に カスタム ニューラルネットワーク
モデルが不要だからです 多くの場合
ある程度 標準的な方法で 適切にモデルをトレーニングし
評価して提供できます トレーニング方法のカスタマイズは不要です いずれかの最急降下オプティマイザを使い 重みを逆伝搬して これを繰り返します 低水準セッションループを
作るのではなく Estimatorを使用します tf.Estimatorは TensorFlowの高水準API です これは トレーニングを分散する方法や 評価する方法
チェックポイントの作成方法 モデルの保存方法 提供用にセットアップする方法を扱います 実用的な方法でこれらを行い ほとんどのMLモデルや
本番環境に適合します インターネットで
TensorFlowのコード例を見たときに Estimator APIが使われていないなら そのコードを無視してください 検討する価値はありません デバイス配置、メモリ管理、分散を行うには 膨大なコードを書く必要がありますが Estimatorなら すべて自動化されます これらが TensorFlowの抽象化レベルです Cloud ML Engineはこの階層を縦断しています どの抽象化レベルで
TensorFlowコードを書く場合も Cloud ML Engineの
マネージドサービスを利用できます ここにTensorFlowがホストされています クラウド上のマシンの集合で
TensorFlowを実行できます ソフトウェアのインストールや
サーバーの管理は不要です