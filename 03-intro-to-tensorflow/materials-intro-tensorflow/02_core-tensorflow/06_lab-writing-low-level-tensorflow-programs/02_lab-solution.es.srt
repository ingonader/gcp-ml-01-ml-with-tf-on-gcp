1
00:00:00,580 --> 00:00:04,270
En este lab, como en los anteriores

2
00:00:04,270 --> 00:00:07,719
entramos en GCP Console

3
00:00:07,719 --> 00:00:10,795
a Cloud Shell para iniciar Datalab.

4
00:00:10,795 --> 00:00:12,700
Cuando estamos en Datalab

5
00:00:12,700 --> 00:00:17,905
navegamos al notebook
para comenzar a usar TensorFlow.

6
00:00:18,125 --> 00:00:19,895
La primera celda de este notebook

7
00:00:19,895 --> 00:00:23,165
es para importar
los paquetes de Numpy y TensorFlow

8
00:00:23,165 --> 00:00:25,315
porque usaremos ambos.

9
00:00:25,315 --> 00:00:27,300
Ejecutamos esa celda

10
00:00:27,300 --> 00:00:31,915
y me dice que estoy ejecutando
TensorFlow 1.4 en esta instancia.

11
00:00:31,915 --> 00:00:35,870
Ahora, le mostraré
cómo sumar dos matrices de Numpy.

12
00:00:35,870 --> 00:00:37,930
Tengo una matriz de Numpy que es a

13
00:00:37,930 --> 00:00:39,795
y otra que es b.

14
00:00:39,795 --> 00:00:44,272
En este caso, hago la suma np.add (a, b)

15
00:00:44,272 --> 00:00:45,760
y luego uso y print c.

16
00:00:45,760 --> 00:00:49,515
Debido a que esto es Numpy,
todo el código se evalúa de inmediato.

17
00:00:49,560 --> 00:00:51,395
Cuando lo ejecuto

18
00:00:51,395 --> 00:00:53,130
obtengo [8, 2, 10].

19
00:00:53,130 --> 00:00:54,430
Esa es mi lista.

20
00:00:54,430 --> 00:00:57,355
El código equivalente
en TensorFlow tiene dos pasos.

21
00:00:57,355 --> 00:01:00,165
Ejecutemos solo el primero.

22
00:01:00,165 --> 00:01:04,040
En el primer paso, de nuevo,
como en Numpy, creamos a.

23
00:01:04,040 --> 00:01:07,905
Donde teníamos np.array,
ahora tenemos tf.constant.

24
00:01:07,905 --> 00:01:12,405
Creo una matriz de constante a y otra b.

25
00:01:12,450 --> 00:01:14,550
Llamo a tf.add (a, b)

26
00:01:14,550 --> 00:01:16,880
pero, esta vez, cuando ejecute print c

27
00:01:16,880 --> 00:01:19,665
no aparece la lista [8, 2, 10].

28
00:01:19,665 --> 00:01:24,625
¿Qué aparece? Aparece
la salida de depuración del tensor.

29
00:01:24,630 --> 00:01:28,960
En este caso, vemos que c
es el resultado de la operación Add.

30
00:01:28,990 --> 00:01:32,040
Incluirá tres números
y todos serán enteros.

31
00:01:32,040 --> 00:01:35,435
Ese es el primer paso, crear el gráfico.

32
00:01:35,435 --> 00:01:37,360
Intentemos otra operación.

33
00:01:37,360 --> 00:01:40,575
Cambiemos esto a 5.0, por ejemplo.

34
00:01:40,575 --> 00:01:45,225
Ahora, a ya no es una matriz de enteros

35
00:01:45,715 --> 00:01:49,380
sino una matriz
de valores de coma flotante.

36
00:01:49,380 --> 00:01:51,870
Ejecutemos print no solo de c

37
00:01:51,870 --> 00:01:54,595
sino de a también
para que vea lo que quiero decir.

38
00:01:54,595 --> 00:01:56,349
Cuando lo ejecuto

39
00:01:56,349 --> 00:02:00,590
puede ver que a es de tipo float

40
00:02:00,590 --> 00:02:06,950
y ya no podemos sumar a y b,
porque a es del tipo float y b es int

41
00:02:06,950 --> 00:02:08,729
y por eso aparece este error.

42
00:02:08,729 --> 00:02:11,870
Pero puedo cambiar esto
para que también sea flotante

43
00:02:11,870 --> 00:02:17,280
y cuando lo ejecute,
c será del tipo float.

44
00:02:18,380 --> 00:02:19,920
Debemos recordar esto.

45
00:02:19,920 --> 00:02:24,840
Lo cambiaré de nuevo a entero
para ir al siguiente paso.

46
00:02:24,840 --> 00:02:27,820
En este caso, tengo a y c

47
00:02:27,820 --> 00:02:29,950
y el próximo paso de mi gráfico

48
00:02:29,950 --> 00:02:33,560
es evaluar el valor de c.
Obtendré los números de este modo.

49
00:02:33,560 --> 00:02:36,425
Recuerde, primero se crea
el gráfico y después se lo ejecuta.

50
00:02:36,425 --> 00:02:40,790
En este caso, ejecutaré
sess.run(c) y luego print result.

51
00:02:40,800 --> 00:02:43,650
El resultado será un matriz regular.

52
00:02:43,650 --> 00:02:46,170
Cuando ejecuto print, obtengo [8, 2, 10].

53
00:02:46,170 --> 00:02:49,665
Lo que debemos recordar es
que TensorFlow usa evaluación perezosa.

54
00:02:49,665 --> 00:02:51,585
El paso uno es crear el gráfico.

55
00:02:51,585 --> 00:02:53,475
El paso dos es ejecutarlo.

56
00:02:53,475 --> 00:02:57,315
En este caso,
todo en mi gráfico estaba hard-coded.

57
00:02:57,315 --> 00:03:01,610
Normalmente,
tendríamos marcadores de posición

58
00:03:01,610 --> 00:03:04,965
para poder inyectar información
durante el tiempo de ejecución.

59
00:03:04,965 --> 00:03:09,670
En mi caso, creo a
como marcador de posición

60
00:03:09,670 --> 00:03:11,700
que incluirá una lista

61
00:03:11,700 --> 00:03:14,590
y b será otro marcador
que incluirá una lista.

62
00:03:14,590 --> 00:03:21,160
Ejecutaré add(a, b) y pasaré [3, 4, 5]
durante el tiempo de ejecución.

63
00:03:21,160 --> 00:03:28,100
Cuando ejecute la sesión, pasaré
[3, 4, 5] para a y [-1, 2, 3] para b.

64
00:03:28,260 --> 00:03:33,550
Entonces, con print result,
obtendré [2, 6, 8], porque 3 - 1 es 2.

65
00:03:33,615 --> 00:03:36,610
Pero en este caso,
recuerde que estas tres líneas

66
00:03:36,610 --> 00:03:40,800
son para crear el gráfico:
a b y c son para compilar el gráfico.

67
00:03:40,800 --> 00:03:43,580
El resto es para ejecutar el gráfico

68
00:03:43,580 --> 00:03:46,265
y cuando lo hago, inyecto los valores.

69
00:03:46,265 --> 00:03:52,390
Ahora, podemos combinar
ambos conceptos para hacer algo útil.

70
00:03:52,410 --> 00:03:57,400
Lo que haremos es,
partiendo de los lados de un triángulo

71
00:03:57,470 --> 00:04:00,480
calcularemos el área.

72
00:04:00,480 --> 00:04:04,625
Hay una fórmula
llamada de Herón, que es esta

73
00:04:04,625 --> 00:04:06,900
y es lo que implementaremos en TensorFlow.

74
00:04:06,900 --> 00:04:09,950
De nuevo, TensorFlow
no es solo para redes neuronales,

75
00:04:09,950 --> 00:04:12,015
sino para cualquier programación numérica.

76
00:04:12,015 --> 00:04:15,530
Por eso, podemos calcular
el área de un triángulo en TensorFlow.

77
00:04:15,530 --> 00:04:17,295
Tengo mi método

78
00:04:17,295 --> 00:04:21,180
mi función para calcular el área,
cuando los lados son conocidos.

79
00:04:21,180 --> 00:04:23,640
Algo que debemos
recordar es que no usaremos

80
00:04:23,640 --> 00:04:26,590
TensorFlow para calcular
el área de un solo triángulo.

81
00:04:26,590 --> 00:04:32,025
Lo usaremos para calcular
el área de muchos triángulos.

82
00:04:32,025 --> 00:04:37,080
No será un solo conjunto de tres números

83
00:04:37,080 --> 00:04:41,700
serán muchos conjuntos de tres números.

84
00:04:41,700 --> 00:04:45,060
Obtendremos una cantidad de triángulos

85
00:04:45,060 --> 00:04:48,780
y ahora queremos obtener
sus tres lados: a, b y c.

86
00:04:49,350 --> 00:04:55,050
a dividirá esos lados,
que será el tamaño de lote

87
00:04:55,050 --> 00:04:57,030
la cantidad de triángulos que tenemos

88
00:04:57,030 --> 00:04:59,890
multiplicado por 3,
porque tenemos tres de ellos.

89
00:04:59,890 --> 00:05:02,130
La primera columna será a

90
00:05:02,130 --> 00:05:04,080
la segunda, b

91
00:05:04,080 --> 00:05:06,180
y la tercera, c.

92
00:05:06,180 --> 00:05:09,510
En este caso, obtengo
la primera columna, que es a

93
00:05:09,510 --> 00:05:11,060
la segunda, que es b

94
00:05:11,060 --> 00:05:12,900
y la tercera, que es c.

95
00:05:12,900 --> 00:05:18,585
Si pasamos una matriz de 2 x 3…

96
00:05:18,707 --> 00:05:21,097
Es 2 x 3 porque son dos triángulos.

97
00:05:21,130 --> 00:05:23,175
Cada uno tiene tres lados.

98
00:05:23,175 --> 00:05:27,270
El primer conjunto
de lados es 5 y 2.3, es a

99
00:05:27,270 --> 00:05:30,165
3 y 4.1, es b

100
00:05:30,165 --> 00:05:33,795
7.1 y 4.8, es c.

101
00:05:33,795 --> 00:05:35,920
Ahora, tenemos a, b y c.

102
00:05:35,920 --> 00:05:37,830
Calculamos la mitad del perímetro

103
00:05:37,830 --> 00:05:40,080
entonces a + b + c,
dividido entre 2

104
00:05:40,080 --> 00:05:43,680
y luego usamos esa fórmula
para calcular el cuadrado del área

105
00:05:43,680 --> 00:05:46,455
la raíz cuadrada y la mostramos.

106
00:05:46,455 --> 00:05:49,982
Todo esto es parte
de la creación del gráfico.

107
00:05:49,982 --> 00:05:56,040
Para ejecutarlo, escribimos sess.run.

108
00:05:56,040 --> 00:06:02,050
Pero esta vez quiero calcular
la variable o tensor de TensorFlow area

109
00:06:02,130 --> 00:06:07,590
y la forma de hacerlo es llamar
a compute_area y pasar estos valores.

110
00:06:07,590 --> 00:06:09,330
Si ejecuto eso

111
00:06:09,330 --> 00:06:12,700
obtendré el área de dos triángulos.

112
00:06:12,700 --> 00:06:15,255
Por eso obtengo dos números.

113
00:06:15,255 --> 00:06:17,865
Pero los números están hard-coded.

114
00:06:17,865 --> 00:06:20,890
En otros casos,
sería preferible inyectarlos.

115
00:06:20,930 --> 00:06:23,310
Eso es lo que tenemos aquí al final.

116
00:06:23,310 --> 00:06:26,400
Muestra cómo usar el mismo compute_area

117
00:06:26,400 --> 00:06:30,150
pero, en este caso,
los lados se inyectan al gráfico.

118
00:06:30,150 --> 00:06:32,610
Como ve, sides es un marcador de posición

119
00:06:32,610 --> 00:06:34,425
ya no una constante tf.

120
00:06:34,425 --> 00:06:38,460
Y cuando lo ejecutemos
y queramos evaluar el área

121
00:06:38,460 --> 00:06:40,905
pasaremos un par clave-valor.

122
00:06:40,905 --> 00:06:44,460
La clave es
el nombre del tensor, sides

123
00:06:44,460 --> 00:06:47,420
y el valor es ahora la matriz 2D

124
00:06:47,420 --> 00:06:50,310
porque estamos pasando
una matriz de triángulos.

125
00:06:50,310 --> 00:06:54,825
Ahora ejecutamos esto
y se muestra el mismo resultado.

126
00:06:54,825 --> 00:06:59,060
La última parte del notebook
muestra cómo podemos evitar

127
00:06:59,060 --> 00:07:03,280
estos dos pasos: crear el gráfico
y después ejecutarlo, usando tf.eager.

128
00:07:03,280 --> 00:07:09,450
Para hacer eso, aquí llamamos
a enable_eager_execution().

129
00:07:09,450 --> 00:07:15,220
Cuando lo hacemos,
nos aseguramos de que no haya dos pasos.

130
00:07:15,220 --> 00:07:17,392
Ya no se crea el gráfico
y se ejecuta después.

131
00:07:17,392 --> 00:07:22,685
En el proceso de creación del gráfico,
todos los pasos se evalúan de inmediato.

132
00:07:22,715 --> 00:07:25,500
En este caso, creo el compute_area.

133
00:07:25,500 --> 00:07:27,225
Exactamente como antes.

134
00:07:27,225 --> 00:07:30,350
Y digo: area = compute_area print area

135
00:07:30,350 --> 00:07:33,020
Si no tuviera eager_execution…

136
00:07:33,020 --> 00:07:36,180
Convertiré esta línea
en comentario para que lo vea.

137
00:07:36,180 --> 00:07:40,110
Si no tengo eager_execution
y ejecuto print area

138
00:07:40,110 --> 00:07:43,845
solo obtengo la salida
de depuración del tensor.

139
00:07:43,845 --> 00:07:46,025
Esa es la salida de depuración.

140
00:07:46,025 --> 00:07:48,525
No obtengo los valores aquí

141
00:07:48,525 --> 00:07:53,790
solo veo que incluirá
la respuesta de dos triángulos.

142
00:07:53,790 --> 00:07:59,745
Pero si habilito
eager_execution y lo ejecuto.

143
00:07:59,745 --> 00:08:04,320
Cuando lo hago, notará
que la salida incluye los valores reales.

144
00:08:04,320 --> 00:08:06,195
Sigo llamando a print area.

145
00:08:06,195 --> 00:08:08,790
No llamé a session.run print area.

146
00:08:08,790 --> 00:08:11,790
Pero esta vez, obtengo la respuesta.