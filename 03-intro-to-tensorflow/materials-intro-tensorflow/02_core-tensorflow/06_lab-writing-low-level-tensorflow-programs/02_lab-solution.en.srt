1
00:00:00,000 --> 00:00:04,270
So in this lab, just as we did in previous labs,

2
00:00:04,270 --> 00:00:07,719
you go ahead and you go into the GCP Console,

3
00:00:07,719 --> 00:00:10,795
get into Cloud Shell, start Datalab.

4
00:00:10,795 --> 00:00:12,700
And once we are in Datalab,

5
00:00:12,700 --> 00:00:17,905
I'm going to navigate to the notebook to get started with TensorFlow.

6
00:00:17,905 --> 00:00:21,145
So the first cell in this notebook is to import

7
00:00:21,145 --> 00:00:25,315
tensorflow and numpy packages because we're going to be playing around with both of them.

8
00:00:25,315 --> 00:00:28,150
So, I can go ahead and run that cell and that's essentially telling

9
00:00:28,150 --> 00:00:31,915
me that I'm running TensorFlow 1.4 in this instance,

10
00:00:31,915 --> 00:00:35,870
and then, I'm going to show how to add two numpy arrays.

11
00:00:35,870 --> 00:00:37,930
So I have one numpy array which is A,

12
00:00:37,930 --> 00:00:39,795
and another numpy array which is B.

13
00:00:39,795 --> 00:00:43,890
And in this case I'm adding numpy np.add (a,

14
00:00:43,890 --> 00:00:47,015
b) and printing C. Because this is numpy,

15
00:00:47,015 --> 00:00:49,560
all of the score is getting evaluated immediately.

16
00:00:49,560 --> 00:00:51,395
So when I go ahead and run it,

17
00:00:51,395 --> 00:00:53,130
I get eight, two, 10.

18
00:00:53,130 --> 00:00:54,430
So that's my list.

19
00:00:54,430 --> 00:00:57,355
The equivalent code in TensorFlow is of two steps.

20
00:00:57,355 --> 00:00:59,995
So let's just run just the first step.

21
00:00:59,995 --> 00:01:04,040
The first step, again as in numpy we created A,

22
00:01:04,040 --> 00:01:07,905
we're going to create A where np.array, we do tf.constant.

23
00:01:07,905 --> 00:01:10,155
So I'm creating a constant array A,

24
00:01:10,155 --> 00:01:12,450
I'm creating another constant array B,

25
00:01:12,450 --> 00:01:14,550
I'm calling tf.add (a,

26
00:01:14,550 --> 00:01:16,880
b) but this time when I print C,

27
00:01:16,880 --> 00:01:19,665
you will not see the list eight, two, and 10.

28
00:01:19,665 --> 00:01:24,625
What do you see? What you see is a debug output of the tensor.

29
00:01:24,625 --> 00:01:26,020
So in this case,

30
00:01:26,020 --> 00:01:28,990
we say that the C is a result of add operation.

31
00:01:28,990 --> 00:01:32,040
It's going to contain three numbers and they're all going to be integers.

32
00:01:32,040 --> 00:01:35,075
So that is a step one, building the graph.

33
00:01:35,075 --> 00:01:37,360
So let's go and try something out.

34
00:01:37,360 --> 00:01:40,575
Let's go ahead and change this to be, for example 5.0.

35
00:01:40,575 --> 00:01:45,565
At this point A now becomes not an array of ints,

36
00:01:45,565 --> 00:01:49,380
but an array of floats.

37
00:01:49,380 --> 00:01:51,470
So let's go ahead and print not just C,

38
00:01:51,470 --> 00:01:54,595
but let me go ahead and print A the imprint A is so you know what I'm talking about.

39
00:01:54,595 --> 00:01:56,389
And now when I run it,

40
00:01:56,389 --> 00:02:01,580
you see that A is of type float and at this point now we

41
00:02:01,580 --> 00:02:06,950
cannot add A and B because A is type float but B is of type int,

42
00:02:06,950 --> 00:02:08,480
and that's why I get the error.

43
00:02:08,480 --> 00:02:13,250
But I can go ahead and change this also to be a float and when I run it,

44
00:02:13,250 --> 00:02:17,280
C is going to be of type float.

45
00:02:17,280 --> 00:02:19,920
So, that's one thing to remember.

46
00:02:19,920 --> 00:02:24,840
So let me go ahead and change it back to be integer so that we can do the next step.

47
00:02:24,840 --> 00:02:27,820
So in this case I have A and C,

48
00:02:27,820 --> 00:02:30,690
and the next step of my graph is to go ahead and

49
00:02:30,690 --> 00:02:33,560
evaluate the value of C. This is how I'm going to get the numbers.

50
00:02:33,560 --> 00:02:35,985
Remember, build the graph, run the graph.

51
00:02:35,985 --> 00:02:40,800
So in this case I'm going to do sess.run(c) and then print the result.

52
00:02:40,800 --> 00:02:43,650
Result is going to be a regular old array.

53
00:02:43,650 --> 00:02:46,170
And when I go ahead and print it I get eight, two, and 10.

54
00:02:46,170 --> 00:02:49,665
So the thing to remember is that in TensorFlow it's lazy evaluation.

55
00:02:49,665 --> 00:02:51,585
Step number one, build the graph.

56
00:02:51,585 --> 00:02:53,475
Step number two, run the graph.

57
00:02:53,475 --> 00:02:57,315
Now, in this case, everything in my graph was hard coded.

58
00:02:57,315 --> 00:03:00,570
Normally though, you will basically have things be

59
00:03:00,570 --> 00:03:04,965
a placeholder so you can get information in at runtime.

60
00:03:04,965 --> 00:03:08,240
So in my case, I'm basically creating A to be

61
00:03:08,240 --> 00:03:11,700
a placeholder that's going to basically contain a list,

62
00:03:11,700 --> 00:03:14,460
and B is going to be another placeholder that's contain a list.

63
00:03:14,460 --> 00:03:18,750
I'm going to add A and B and now I'm passing in the numbers three,

64
00:03:18,750 --> 00:03:21,000
four and five at runtime.

65
00:03:21,000 --> 00:03:22,635
When I'm running the session,

66
00:03:22,635 --> 00:03:24,120
I'm passing in three, four,

67
00:03:24,120 --> 00:03:25,695
and five for A,

68
00:03:25,695 --> 00:03:28,245
and minus one, two, three for B.

69
00:03:28,245 --> 00:03:31,230
And now when I print result I'm going to get two,

70
00:03:31,230 --> 00:03:33,615
six, and eight because three minus one is two.

71
00:03:33,615 --> 00:03:38,340
But in this case, remember that these three lines are about building the graph A,

72
00:03:38,340 --> 00:03:40,140
B, and C as well building the graph.

73
00:03:40,140 --> 00:03:42,930
The rest of them is about running

74
00:03:42,930 --> 00:03:46,265
the graph and when I run the graph I'm feeding in values.

75
00:03:46,265 --> 00:03:48,600
So we can now put both of these concepts

76
00:03:48,600 --> 00:03:52,405
together when it comes to basically doing something useful.

77
00:03:52,405 --> 00:03:54,150
So the thing that we're going to do is that we're going to

78
00:03:54,150 --> 00:03:56,100
basically say given a triangle,

79
00:03:56,100 --> 00:03:57,450
the sides of the triangle,

80
00:03:57,450 --> 00:04:00,480
let me go ahead and compute the area of the triangle.

81
00:04:00,480 --> 00:04:04,625
There is a formula called Heron's Formula that's basically this formula here.

82
00:04:04,625 --> 00:04:06,900
And that's what we're going to implement in TensorFlow.

83
00:04:06,900 --> 00:04:09,770
Again, TensorFlow is not just about neural networks,

84
00:04:09,770 --> 00:04:11,655
it's about any numeric programming.

85
00:04:11,655 --> 00:04:15,240
So sure we can also compute the area of a triangle in TensorFlow.

86
00:04:15,240 --> 00:04:17,295
So I have my method,

87
00:04:17,295 --> 00:04:21,180
my function to compute the area given the sides.

88
00:04:21,180 --> 00:04:23,640
But one thing to remember is that you're not going to use

89
00:04:23,640 --> 00:04:26,590
TensorFlow to compute the area of one triangle.

90
00:04:26,590 --> 00:04:32,025
You're going to use TensorFlow to create the area of lots and lots and lots of triangles.

91
00:04:32,025 --> 00:04:37,080
So we're going to decide it's not going to be one set of three numbers,

92
00:04:37,080 --> 00:04:41,700
it's going to be and lot of sets of three numbers, right?

93
00:04:41,700 --> 00:04:45,060
So we're going to basically get a number of triangles and

94
00:04:45,060 --> 00:04:48,780
now we want to get there A's and the B's and the C's, the three sides.

95
00:04:48,780 --> 00:04:55,050
A is going to be slicing that sides which is basically going to be the batch size,

96
00:04:55,050 --> 00:04:57,030
the number of triangles that we have,

97
00:04:57,030 --> 00:04:59,890
times three because we have three of them.

98
00:04:59,890 --> 00:05:01,820
So the first column is going to A,

99
00:05:01,820 --> 00:05:04,080
the second column is going to be B,

100
00:05:04,080 --> 00:05:06,180
and the third column is going to be C. So in

101
00:05:06,180 --> 00:05:09,510
this case I'm getting the first column which is A,

102
00:05:09,510 --> 00:05:11,060
the second column which is B,

103
00:05:11,060 --> 00:05:14,010
and the third column which is C. So if we are going to be

104
00:05:14,010 --> 00:05:18,575
passing in F two by three matrix here,

105
00:05:18,575 --> 00:05:21,230
we're passing the two by three matrix of two triangles.

106
00:05:21,230 --> 00:05:23,175
Each triangle has three sides.

107
00:05:23,175 --> 00:05:27,270
The first set of side is five and 2.3, that's the A,

108
00:05:27,270 --> 00:05:30,165
three and 4.1, that's the B,

109
00:05:30,165 --> 00:05:32,805
and 7.1 And 4.8,

110
00:05:32,805 --> 00:05:35,160
that's your C. So we now have your A, B,

111
00:05:35,160 --> 00:05:37,830
and C. We compute half the perimeter,

112
00:05:37,830 --> 00:05:40,080
so A plus B plus C divide by two,

113
00:05:40,080 --> 00:05:43,680
and then use that formula to compute the area square.

114
00:05:43,680 --> 00:05:46,455
Compute the square root of that and we return it.

115
00:05:46,455 --> 00:05:51,990
So all of this is part of building the graph and when we want to run the graph,

116
00:05:51,990 --> 00:05:56,940
we can basically go ahead and say sess.run but this time I want

117
00:05:56,940 --> 00:06:02,130
to compute the variable area or the TensorFlow tensor area,

118
00:06:02,130 --> 00:06:07,590
and the way we get the area is to call compute area passing in these values.

119
00:06:07,590 --> 00:06:09,330
So if I now run this,

120
00:06:09,330 --> 00:06:12,250
I'm going to basically get the area of two triangles.

121
00:06:12,250 --> 00:06:15,255
That's why I'm getting two numbers here, there're two triangles.

122
00:06:15,255 --> 00:06:17,865
But here are hard coded these numbers.

123
00:06:17,865 --> 00:06:19,470
You may not want a hard cord them,

124
00:06:19,470 --> 00:06:20,925
you may want to feed them in.

125
00:06:20,925 --> 00:06:23,310
So that's what this last thing is showing.

126
00:06:23,310 --> 00:06:26,400
It's showing using the same compute area but

127
00:06:26,400 --> 00:06:30,150
the sides now are basically fed into the graph.

128
00:06:30,150 --> 00:06:32,610
So sides is a placeholder,

129
00:06:32,610 --> 00:06:34,425
it's no longer a tf constant.

130
00:06:34,425 --> 00:06:38,460
And then when you run and you want to evaluate the area,

131
00:06:38,460 --> 00:06:40,905
we're going to pass in a key value pair.

132
00:06:40,905 --> 00:06:44,460
The key is the name of the tensor sides,

133
00:06:44,460 --> 00:06:50,310
and the value is now your 2D array because you're passing in and array of triangles.

134
00:06:50,310 --> 00:06:54,825
So we can now run this and that basically shows essentially the same result.

135
00:06:54,825 --> 00:07:00,060
The last part of the notebook is showing you how we can avoid this two step,

136
00:07:00,060 --> 00:07:03,270
build the graph, run the graph by using tf eager.

137
00:07:03,270 --> 00:07:09,450
So the way we're doing this now is that we are basically calling enable eager execution.

138
00:07:09,450 --> 00:07:15,450
By calling these, we basically ensure that now there's not two steps anymore.

139
00:07:15,450 --> 00:07:18,885
It's not build the graph, run the graph but the process of building the graph,

140
00:07:18,885 --> 00:07:20,175
all the things that we're doing,

141
00:07:20,175 --> 00:07:22,650
things are going to get evaluated immediately.

142
00:07:22,650 --> 00:07:25,500
So in this case I'm creating the compute area,

143
00:07:25,500 --> 00:07:27,225
I'm doing exactly the same thing,

144
00:07:27,225 --> 00:07:30,300
and I'm saying area is compute area print area.

145
00:07:30,300 --> 00:07:33,020
If I did not have eager execution,

146
00:07:33,020 --> 00:07:36,180
so let me go ahead and comment this out so you can see what I'm talking about.

147
00:07:36,180 --> 00:07:40,110
If I don't have eager execution and I do print area,

148
00:07:40,110 --> 00:07:43,290
I'm just going to get the debug output of the tensor.

149
00:07:43,290 --> 00:07:45,970
So that is a debug output of the tensor.

150
00:07:45,970 --> 00:07:48,525
I'm not actually getting the values here,

151
00:07:48,525 --> 00:07:53,790
I'm just getting that this is going to contain the answer for two triangles.

152
00:07:53,790 --> 00:07:59,745
But now I'll go on and enable eager execution and then go ahead and run it.

153
00:07:59,745 --> 00:08:04,320
And when we do this, you notice that the output contains the actual values.

154
00:08:04,320 --> 00:08:06,195
I'm still calling print area.

155
00:08:06,195 --> 00:08:08,790
I haven't called session.run print area.

156
00:08:08,790 --> 00:08:12,220
But this time, I'm actually getting the answer back.