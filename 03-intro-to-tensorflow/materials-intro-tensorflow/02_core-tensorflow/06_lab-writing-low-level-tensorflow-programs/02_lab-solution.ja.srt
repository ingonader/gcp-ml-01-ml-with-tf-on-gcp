1
00:00:00,000 --> 00:00:03,347
このラボでは前回と同様に

2
00:00:03,347 --> 00:00:06,519
GCP Consoleから

3
00:00:06,519 --> 00:00:09,815
Cloud Shellに入り

4
00:00:09,815 --> 00:00:12,700
Datalabを起動します
その後

5
00:00:12,700 --> 00:00:17,905
Notebookで
「TensorFlowスタートガイド」を開きます

6
00:00:17,905 --> 00:00:20,115
最初のセルでは

7
00:00:20,115 --> 00:00:25,315
tensorflowと
numpyをインポートします

8
00:00:25,315 --> 00:00:27,880
このセルを実行すると

9
00:00:27,880 --> 00:00:31,915
TensorFlow 1.4.1を
使用しているのがわかります

10
00:00:31,915 --> 00:00:35,790
次にnumpy配列aと

11
00:00:35,790 --> 00:00:37,660
numpy配列bを

12
00:00:37,660 --> 00:00:40,245
加算します

13
00:00:40,245 --> 00:00:44,540
np.add (a, b)で
numpyを加算し

14
00:00:44,540 --> 00:00:47,015
cを出力します

15
00:00:47,015 --> 00:00:51,075
スコアがすべて
即座に評価され

16
00:00:51,075 --> 00:00:54,430
実行すると
8、2、10が得られます

17
00:00:54,430 --> 00:00:57,425
TensorFlowのコードは

18
00:00:57,425 --> 00:00:59,555
2つのステップからなります

19
00:00:59,555 --> 00:01:01,655
最初のステップでは

20
00:01:01,655 --> 00:01:04,927
numpyと同様に
aを作成しますが

21
00:01:04,927 --> 00:01:08,095
np.arrayの代わりに
tf.constantを使用します

22
00:01:08,095 --> 00:01:10,155
つまり 定数配列の

23
00:01:10,155 --> 00:01:12,450
aとbを作成します

24
00:01:12,450 --> 00:01:15,350
tf.add (a, b)を呼び出しますが

25
00:01:15,350 --> 00:01:17,080
cを出力すると

26
00:01:17,080 --> 00:01:19,665
8、2、10ではなく

27
00:01:19,665 --> 00:01:24,455
テンソルのデバッグ出力が
表示されます

28
00:01:24,465 --> 00:01:25,940
この場合

29
00:01:25,940 --> 00:01:29,300
c は「加法演算の結果で
3つの数値を含み

30
00:01:29,300 --> 00:01:32,040
値はすべて整数」となります

31
00:01:32,040 --> 00:01:35,465
これがグラフの構築です

32
00:01:35,465 --> 00:01:37,360
それでは試しに

33
00:01:37,360 --> 00:01:40,575
この数値を5.0に変えてみます

34
00:01:40,575 --> 00:01:45,565
するとaは
もはやint型配列ではなく

35
00:01:45,565 --> 00:01:49,380
float型配列になります

36
00:01:49,380 --> 00:01:51,330
皆様に説明するために

37
00:01:51,330 --> 00:01:54,595
cだけでなくaも出力します

38
00:01:54,595 --> 00:01:56,619
実行すると

39
00:01:56,619 --> 00:01:59,650
aはfloat型

40
00:01:59,650 --> 00:02:05,410
bはint型であるため
加算できません

41
00:02:05,410 --> 00:02:08,479
この理由でエラーが出ます

42
00:02:08,479 --> 00:02:13,250
この数値も
float型に変えて実行すると

43
00:02:13,250 --> 00:02:16,930
cもfloat型になります

44
00:02:16,930 --> 00:02:19,920
これを覚えておいてください

45
00:02:19,920 --> 00:02:24,660
整数に戻して次のステップに進みます

46
00:02:24,660 --> 00:02:27,820
ここではaとcの値があり

47
00:02:27,820 --> 00:02:30,690
グラフの次のステップで

48
00:02:30,690 --> 00:02:33,575
cの値を評価して数値を求めます

49
00:02:33,575 --> 00:02:36,805
グラフを構築して実行します

50
00:02:36,805 --> 00:02:40,820
sess.run(c)を実行して
resultを出力します

51
00:02:40,820 --> 00:02:43,650
result（結果）は通常の配列となり

52
00:02:43,650 --> 00:02:46,170
出力すると8、2、10となります

53
00:02:46,170 --> 00:02:49,525
TensorFlowでは遅延評価を行います

54
00:02:49,525 --> 00:02:51,405
まずはグラフを構築して

55
00:02:51,405 --> 00:02:53,475
実行します

56
00:02:53,475 --> 00:02:57,815
ここではグラフ全体が
ハードコーディングされていますが

57
00:02:57,815 --> 00:03:01,720
通常は 実行時に情報を得られるように

58
00:03:01,720 --> 00:03:04,965
プレースホルダを使用します

59
00:03:04,965 --> 00:03:09,300
この例では リストを含む
プレースホルダとして

60
00:03:09,300 --> 00:03:11,360
aを作成します

61
00:03:11,360 --> 00:03:14,750
bも同様の
プレースホルダにします

62
00:03:14,750 --> 00:03:17,100
aとbを加算し

63
00:03:17,100 --> 00:03:21,000
実行時に値3、4、5を渡します

64
00:03:21,000 --> 00:03:22,795
セッション実行時に

65
00:03:22,795 --> 00:03:25,270
aには3、4、5を

66
00:03:25,270 --> 00:03:28,245
bには -1、2、3を渡します

67
00:03:28,245 --> 00:03:30,680
resultを出力すると

68
00:03:30,680 --> 00:03:32,135
2、6、8となります

69
00:03:32,135 --> 00:03:33,615
3-1=2だからです

70
00:03:33,615 --> 00:03:36,020
覚えておきたい点は

71
00:03:36,020 --> 00:03:39,680
a、b、cでグラフを構築し

72
00:03:39,680 --> 00:03:43,240
残りの行でグラフを実行していることです

73
00:03:43,240 --> 00:03:46,655
グラフの実行時に値を入力します

74
00:03:46,655 --> 00:03:49,980
これらの概念を合わせると

75
00:03:49,980 --> 00:03:52,405
便利な使い方ができます

76
00:03:52,405 --> 00:03:54,060
たとえば

77
00:03:54,060 --> 00:03:57,210
三角形の3辺の長さから

78
00:03:57,210 --> 00:04:00,480
その面積を求めます

79
00:04:00,480 --> 00:04:04,125
ヘロンの公式と呼ばれる この公式を

80
00:04:04,125 --> 00:04:06,700
TensorFlowで使用します

81
00:04:06,700 --> 00:04:09,960
これは
ニューラルネットワークなど

82
00:04:09,960 --> 00:04:12,610
あらゆる数値プログラミングに

83
00:04:12,610 --> 00:04:15,330
使用できます

84
00:04:15,330 --> 00:04:17,135
さて この関数では

85
00:04:17,135 --> 00:04:21,360
compute_area で
sides（辺）から area（面積）を求めます

86
00:04:21,360 --> 00:04:23,790
ここでは TensorFlowを使って

87
00:04:23,790 --> 00:04:26,330
1つの三角形の面積を
求めるのではなく

88
00:04:26,330 --> 00:04:30,285
非常にたくさんの三角形からなる領域を

89
00:04:30,285 --> 00:04:32,025
作ります

90
00:04:32,025 --> 00:04:37,080
sidesでは
3つの数値を1セットではなく

91
00:04:37,080 --> 00:04:41,700
多数使用することになります

92
00:04:41,700 --> 00:04:45,060
多数の三角形から

93
00:04:45,060 --> 00:04:49,340
3辺a、b、cを得る必要があります

94
00:04:49,340 --> 00:04:54,950
aは辺の集合である
sidesをスライスします

95
00:04:54,950 --> 00:04:57,030
辺は3つのため
三角形の数は

96
00:04:57,030 --> 00:04:59,890
3を掛けたものになります

97
00:04:59,890 --> 00:05:01,820
最初の列はa

98
00:05:01,820 --> 00:05:03,640
次の列はb

99
00:05:03,640 --> 00:05:06,180
3番目の列はcですから

100
00:05:06,180 --> 00:05:08,390
ここでは最初の列a

101
00:05:08,390 --> 00:05:10,620
次の列b

102
00:05:10,620 --> 00:05:13,470
3番目の列cとなります

103
00:05:13,470 --> 00:05:17,365
2行x3列の行列を渡す場合は

104
00:05:17,365 --> 00:05:19,800
それぞれ3つの辺を持つ

105
00:05:19,800 --> 00:05:23,175
2つの三角形を渡すことになります

106
00:05:23,175 --> 00:05:27,270
最初の列は5.0と 2.3で
これがaです

107
00:05:27,270 --> 00:05:29,915
次の3.0と4.1がbです

108
00:05:29,915 --> 00:05:32,805
そして7.1と4.8がcで す

109
00:05:32,805 --> 00:05:35,160
a、b、cがそろいました

110
00:05:35,160 --> 00:05:37,830
パラメータの半分を計算します

111
00:05:37,830 --> 00:05:40,080
a+b+cを2で割ります

112
00:05:40,080 --> 00:05:43,680
公式を使って面積の2乗を計算し

113
00:05:43,680 --> 00:05:46,455
その平方根を計算して返します

114
00:05:46,455 --> 00:05:51,220
これはすべて
グラフの構築に含まれます

115
00:05:51,220 --> 00:05:56,940
グラフの実行時には
sess.runなどを使いますが

116
00:05:56,940 --> 00:06:02,200
今回はTensorFlowの
テンソル領域「area」を計算します

117
00:06:02,200 --> 00:06:04,030
areaを得るには

118
00:06:04,030 --> 00:06:07,590
compute_areaを
呼び出して値を渡します

119
00:06:07,590 --> 00:06:09,330
これを実行すると

120
00:06:09,330 --> 00:06:12,250
2つの三角形の面積が得られます

121
00:06:12,250 --> 00:06:15,255
三角形が2つなので値も2つです

122
00:06:15,255 --> 00:06:18,365
数値を
ハードコーディングしていますが

123
00:06:18,365 --> 00:06:20,560
外からも入力できます

124
00:06:20,560 --> 00:06:23,310
最後の部分をご覧ください

125
00:06:23,310 --> 00:06:26,400
compute_areaを
使用していますが

126
00:06:26,400 --> 00:06:30,150
sidesはグラフの外から入力されます

127
00:06:30,150 --> 00:06:32,610
tf.constantではなく

128
00:06:32,610 --> 00:06:34,425
プレースホルダです

129
00:06:34,425 --> 00:06:37,620
面積を求めるときには

130
00:06:37,620 --> 00:06:40,905
Key-Valueペアを渡します

131
00:06:40,905 --> 00:06:44,460
キーはテンソル名「sides」です

132
00:06:44,460 --> 00:06:50,270
三角形の配列を渡すため
値は2次元配列です

133
00:06:50,270 --> 00:06:54,825
これを実行すると 先ほどと
同じ結果が表示されます

134
00:06:54,825 --> 00:06:57,120
Notebookの最後の部分では

135
00:06:57,120 --> 00:07:00,730
グラフの構築と実行を
回避する目的で

136
00:07:00,730 --> 00:07:03,270
tf.eagerを使用しています

137
00:07:03,270 --> 00:07:09,460
ここでは
enable_eager_executionを呼び出します

138
00:07:09,460 --> 00:07:14,320
これにより
グラグの構築とすべての操作を

139
00:07:14,320 --> 00:07:16,965
2ステップではなく

140
00:07:16,965 --> 00:07:20,175
1つのプロセスとして実行し

141
00:07:20,175 --> 00:07:22,650
即座に評価します

142
00:07:22,650 --> 00:07:26,410
compute_areaを作成し

143
00:07:26,410 --> 00:07:30,740
area=computer_areaとして
出力します

144
00:07:30,740 --> 00:07:33,815
この行をコメント化して

145
00:07:33,815 --> 00:07:37,545
eager executionを無効にした場合に

146
00:07:37,545 --> 00:07:40,870
print areaを行うと

147
00:07:40,870 --> 00:07:44,940
Tensorのデバッグ出力が
表示されます

148
00:07:44,940 --> 00:07:47,765
実際の値は表示されませんね

149
00:07:47,765 --> 00:07:53,327
「2つの三角形の答えが含まれる」
という情報だけです

150
00:07:53,327 --> 00:07:58,195
次に先行実行（eager execution）を
有効にして

151
00:07:58,195 --> 00:07:59,745
実行すると

152
00:07:59,745 --> 00:08:02,870
実際の値が出力に含まれます

153
00:08:02,870 --> 00:08:05,885
print areaを呼び出していますが

154
00:08:05,885 --> 00:08:08,790
sess.run print areaは呼び出しません

155
00:08:08,790 --> 00:08:12,220
それでも今回は値が返されます