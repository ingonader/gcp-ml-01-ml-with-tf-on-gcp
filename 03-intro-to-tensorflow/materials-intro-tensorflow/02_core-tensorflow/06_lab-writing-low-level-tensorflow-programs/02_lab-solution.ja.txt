このラボでは前回と同様に GCP Consoleから Cloud Shellに入り Datalabを起動します
その後 Notebookで
「TensorFlowスタートガイド」を開きます 最初のセルでは tensorflowと
numpyをインポートします このセルを実行すると TensorFlow 1.4.1を
使用しているのがわかります 次にnumpy配列aと numpy配列bを 加算します np.add (a, b)で
numpyを加算し cを出力します スコアがすべて
即座に評価され 実行すると
8、2、10が得られます TensorFlowのコードは 2つのステップからなります 最初のステップでは numpyと同様に
aを作成しますが np.arrayの代わりに
tf.constantを使用します つまり 定数配列の aとbを作成します tf.add (a, b)を呼び出しますが cを出力すると 8、2、10ではなく テンソルのデバッグ出力が
表示されます この場合 c は「加法演算の結果で
3つの数値を含み 値はすべて整数」となります これがグラフの構築です それでは試しに この数値を5.0に変えてみます するとaは
もはやint型配列ではなく float型配列になります 皆様に説明するために cだけでなくaも出力します 実行すると aはfloat型 bはint型であるため
加算できません この理由でエラーが出ます この数値も
float型に変えて実行すると cもfloat型になります これを覚えておいてください 整数に戻して次のステップに進みます ここではaとcの値があり グラフの次のステップで cの値を評価して数値を求めます グラフを構築して実行します sess.run(c)を実行して
resultを出力します result（結果）は通常の配列となり 出力すると8、2、10となります TensorFlowでは遅延評価を行います まずはグラフを構築して 実行します ここではグラフ全体が
ハードコーディングされていますが 通常は 実行時に情報を得られるように プレースホルダを使用します この例では リストを含む
プレースホルダとして aを作成します bも同様の
プレースホルダにします aとbを加算し 実行時に値3、4、5を渡します セッション実行時に aには3、4、5を bには -1、2、3を渡します resultを出力すると 2、6、8となります 3-1=2だからです 覚えておきたい点は a、b、cでグラフを構築し 残りの行でグラフを実行していることです グラフの実行時に値を入力します これらの概念を合わせると 便利な使い方ができます たとえば 三角形の3辺の長さから その面積を求めます ヘロンの公式と呼ばれる この公式を TensorFlowで使用します これは
ニューラルネットワークなど あらゆる数値プログラミングに 使用できます さて この関数では compute_area で
sides（辺）から area（面積）を求めます ここでは TensorFlowを使って 1つの三角形の面積を
求めるのではなく 非常にたくさんの三角形からなる領域を 作ります sidesでは
3つの数値を1セットではなく 多数使用することになります 多数の三角形から 3辺a、b、cを得る必要があります aは辺の集合である
sidesをスライスします 辺は3つのため
三角形の数は 3を掛けたものになります 最初の列はa 次の列はb 3番目の列はcですから ここでは最初の列a 次の列b 3番目の列cとなります 2行x3列の行列を渡す場合は それぞれ3つの辺を持つ 2つの三角形を渡すことになります 最初の列は5.0と 2.3で
これがaです 次の3.0と4.1がbです そして7.1と4.8がcで す a、b、cがそろいました パラメータの半分を計算します a+b+cを2で割ります 公式を使って面積の2乗を計算し その平方根を計算して返します これはすべて
グラフの構築に含まれます グラフの実行時には
sess.runなどを使いますが 今回はTensorFlowの
テンソル領域「area」を計算します areaを得るには compute_areaを
呼び出して値を渡します これを実行すると 2つの三角形の面積が得られます 三角形が2つなので値も2つです 数値を
ハードコーディングしていますが 外からも入力できます 最後の部分をご覧ください compute_areaを
使用していますが sidesはグラフの外から入力されます tf.constantではなく プレースホルダです 面積を求めるときには Key-Valueペアを渡します キーはテンソル名「sides」です 三角形の配列を渡すため
値は2次元配列です これを実行すると 先ほどと
同じ結果が表示されます Notebookの最後の部分では グラフの構築と実行を
回避する目的で tf.eagerを使用しています ここでは
enable_eager_executionを呼び出します これにより
グラグの構築とすべての操作を 2ステップではなく 1つのプロセスとして実行し 即座に評価します compute_areaを作成し area=computer_areaとして
出力します この行をコメント化して eager executionを無効にした場合に print areaを行うと Tensorのデバッグ出力が
表示されます 実際の値は表示されませんね 「2つの三角形の答えが含まれる」
という情報だけです 次に先行実行（eager execution）を
有効にして 実行すると 実際の値が出力に含まれます print areaを呼び出していますが sess.run print areaは呼び出しません それでも今回は値が返されます