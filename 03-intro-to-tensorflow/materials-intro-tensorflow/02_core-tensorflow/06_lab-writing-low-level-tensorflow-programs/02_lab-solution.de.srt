1
00:00:00,000 --> 00:00:04,270
In diesem Lab 
machen wir es wieder wie gehabt:

2
00:00:04,270 --> 00:00:07,719
Sie rufen die GCP Console auf,

3
00:00:07,719 --> 00:00:09,325
gehen in die Cloud Shell

4
00:00:09,325 --> 00:00:10,985
und starten Datalab.

5
00:00:10,985 --> 00:00:12,700
Sobald wir in Datalab sind,

6
00:00:12,700 --> 00:00:18,035
öffne ich das Notebook,
um mit TensorFlow zu beginnen.

7
00:00:18,035 --> 00:00:20,175
In der ersten Zelle des Notebooks

8
00:00:20,175 --> 00:00:23,065
importiere ich TensorFlow-
und NumPy-Pakete.

9
00:00:23,065 --> 00:00:25,315
Wir werden mit beiden
ein wenig herumspielen.

10
00:00:25,315 --> 00:00:26,960
Ich führe also diese Zelle aus

11
00:00:26,960 --> 00:00:28,350
und es wird angezeigt,

12
00:00:28,350 --> 00:00:31,915
dass ich TensorFlow 1.4
in dieser Instanz ausführe.

13
00:00:31,915 --> 00:00:35,870
Anschließend will ich
zwei NumPy-Arrays addieren.

14
00:00:35,870 --> 00:00:37,930
Ein NumPy-Array ist a,

15
00:00:37,930 --> 00:00:39,795
und ein zweites NumPy-Array ist b.

16
00:00:39,795 --> 00:00:45,595
In diesem Fall addiere ich NumPy
mit np.add (a,b) und drucke c.

17
00:00:45,595 --> 00:00:49,560
Da dies NumPy ist,
wird alles sofort bewertet.

18
00:00:49,560 --> 00:00:51,395
Wenn ich das Ganze ausführe,

19
00:00:51,395 --> 00:00:53,130
erhalte ich die Werte 8,2,10.

20
00:00:53,130 --> 00:00:54,430
Das ist meine Liste.

21
00:00:54,430 --> 00:00:57,355
Der entsprechende Code
in TensorFlow umfasst zwei Schritte.

22
00:00:57,355 --> 00:00:59,995
Führen wir jetzt den ersten Schritt aus.

23
00:00:59,995 --> 00:01:04,040
Genau wie in NumPy
erstellen wir zunächst a,

24
00:01:04,040 --> 00:01:06,385
wir verwenden aber nicht np.array,

25
00:01:06,385 --> 00:01:07,905
sondern tf.constant.

26
00:01:07,905 --> 00:01:10,155
Ich erstelle also
ein Konstanten-Array a,

27
00:01:10,155 --> 00:01:12,450
dann ein weiteres Konstanten-Array b,

28
00:01:12,450 --> 00:01:14,550
ich rufe tf.add (a,b) auf,

29
00:01:14,550 --> 00:01:16,880
aber wenn ich diesmal c drucke,

30
00:01:16,880 --> 00:01:19,665
sehen Sie nicht die Liste 8,2,10.

31
00:01:19,665 --> 00:01:24,795
Stattdessen sehen Sie
den Debug-Output des Tensors.

32
00:01:24,795 --> 00:01:26,710
In diesem Fall sagen wir:

33
00:01:26,710 --> 00:01:28,990
c ist das Ergebnis der add-Operation.

34
00:01:28,990 --> 00:01:32,040
Es enthält drei Zahlen,
die alle Ganzzahlen sind.

35
00:01:32,040 --> 00:01:35,075
Damit ist Schritt 1 beendet,
der Graph ist also erstellt.

36
00:01:35,075 --> 00:01:37,360
Jetzt versuchen wir Folgendes:

37
00:01:37,360 --> 00:01:40,575
Wir ändern diese Zahl in 5.0.

38
00:01:40,575 --> 00:01:45,565
a ist damit nicht mehr
ein Array aus Ganzzahlen,

39
00:01:45,565 --> 00:01:49,380
sondern ein Array
aus Gleitkommazahlen.

40
00:01:49,380 --> 00:01:54,580
Drucken wir jetzt nicht c, sondern a.
Dann verstehen Sie, was ich meine.

41
00:01:54,595 --> 00:01:56,389
Wenn ich dies jetzt ausführe,

42
00:01:56,389 --> 00:02:00,170
sehen Sie, dass a jetzt
den Datentyp Gleitkomma hat.

43
00:02:00,170 --> 00:02:03,140
Wir können a und b nicht addieren,

44
00:02:03,140 --> 00:02:06,960
da a Gleitkommazahlen
und b Ganzzahlen enthält.

45
00:02:06,960 --> 00:02:08,629
Darum wird ein Fehler angezeigt.

46
00:02:08,629 --> 00:02:12,000
Wenn ich dies jedoch auch
in eine Gleitkommazahl ändere

47
00:02:12,000 --> 00:02:13,410
und das Ganze ausführe,

48
00:02:13,410 --> 00:02:17,890
ändert sich der Typ für c in Gleitkomma.

49
00:02:17,890 --> 00:02:19,880
Das sollten Sie sich merken.

50
00:02:19,880 --> 00:02:23,265
Ich stelle jetzt
die Ganzzahlen wieder her,

51
00:02:23,265 --> 00:02:24,845
damit wir fortfahren können.

52
00:02:24,845 --> 00:02:27,820
In diesem Fall habe ich a und c,

53
00:02:27,820 --> 00:02:32,160
und möchte im nächsten Schritt
den Wert von c bewerten.

54
00:02:32,160 --> 00:02:33,560
So erhalte ich meine Zahlen.

55
00:02:33,560 --> 00:02:35,985
Wir erstellen den Graphen
und führen ihn dann aus.

56
00:02:35,985 --> 00:02:39,110
In diesem Fall führe ich sess.run(c) aus

57
00:02:39,110 --> 00:02:40,800
und drucke dann das Ergebnis.

58
00:02:40,800 --> 00:02:43,650
Das Ergebnis ist ein ganz normales Array.

59
00:02:43,650 --> 00:02:46,170
Wenn ich es drucke,
erhalte ich wie zuvor 8,2,10.

60
00:02:46,170 --> 00:02:49,645
Denken Sie daran, dass TensorFlow
die Lazy Evaluation zugrundeliegt.

61
00:02:49,665 --> 00:02:51,585
Schritt 1: Den Graphen erstellen.

62
00:02:51,585 --> 00:02:53,475
Schritt 2: Den Graphen ausführen.

63
00:02:53,475 --> 00:02:57,315
In diesem Fall war
der gesamte Graph hartcodiert.

64
00:02:57,315 --> 00:03:01,720
In der Regel verwenden Sie
allerdings einen Platzhalter,

65
00:03:01,720 --> 00:03:04,965
um Laufzeitdaten einzuspeisen.

66
00:03:04,965 --> 00:03:09,490
Hier erstelle ich a als Platzhalter,

67
00:03:09,490 --> 00:03:11,700
der eine Liste enthalten wird.

68
00:03:11,700 --> 00:03:14,460
b ist ein Platzhalter
für eine weitere Liste.

69
00:03:14,460 --> 00:03:16,020
Ich addiere a und b

70
00:03:16,020 --> 00:03:21,000
und füge die Zahlen
3, 4 und 5 zur Laufzeit ein.

71
00:03:21,000 --> 00:03:22,635
Wenn ich die Sitzung ausführe,

72
00:03:22,635 --> 00:03:25,690
füge ich 3, 4 und 5 für a ein

73
00:03:25,695 --> 00:03:28,245
und -1, 2 und 3 für b.

74
00:03:28,245 --> 00:03:29,970
Wenn ich jetzt das Ergebnis drucke,

75
00:03:29,970 --> 00:03:33,615
erhalte ich 2,6,8,
da 3 minus 1 gleich 2 ist.

76
00:03:33,615 --> 00:03:35,520
Wie gesagt,

77
00:03:35,520 --> 00:03:38,170
mit diesen drei Zeilen
wird der Graph erstellt.

78
00:03:38,170 --> 00:03:40,140
a, b und c erstellen den Graphen.

79
00:03:40,140 --> 00:03:43,370
Mit den übrigen Zeilen
wird der Graph ausgeführt.

80
00:03:43,370 --> 00:03:44,825
Wenn ich den Graphen ausführe,

81
00:03:44,825 --> 00:03:46,265
speise ich Werte ein.

82
00:03:46,265 --> 00:03:49,550
Wir können diese
beiden Konzepte jetzt verbinden,

83
00:03:49,550 --> 00:03:52,405
um etwas zu berechnen.

84
00:03:52,405 --> 00:03:54,070
Und zwar machen wir Folgendes:

85
00:03:54,070 --> 00:03:56,100
Wir berechnen für ein beliebiges Dreieck

86
00:03:56,100 --> 00:04:00,430
anhand der Seitenlänge
die Fläche des Dreiecks.

87
00:04:00,430 --> 00:04:02,655
Dafür nutzt man den Satz des Heron,

88
00:04:02,655 --> 00:04:04,625
das ist diese Formel hier.

89
00:04:04,625 --> 00:04:06,900
Das implementieren wir nun in TensorFlow.

90
00:04:06,900 --> 00:04:09,770
Bei TensorFlow geht es
nicht nur um neuronale Netze,

91
00:04:09,770 --> 00:04:11,655
sondern um numerisches Programmieren.

92
00:04:11,655 --> 00:04:14,080
Darum können wir auch Dreiecksflächen

93
00:04:14,080 --> 00:04:15,240
in TensorFlow berechnen.

94
00:04:15,240 --> 00:04:17,415
Ich habe also meine Methode,

95
00:04:17,415 --> 00:04:21,180
meine Funktion zum Berechnen
der Fläche anhand der Seitenlängen.

96
00:04:21,180 --> 00:04:24,270
Sie werden jedoch
TensorFlow nicht verwenden,

97
00:04:24,270 --> 00:04:26,790
um den Flächeninhalt für
nur ein Dreieck zu bestimmen.

98
00:04:26,790 --> 00:04:32,025
Sie werden mit TensorFlow
die Fläche von vielen Dreiecken bestimmen.

99
00:04:32,025 --> 00:04:37,080
Wir verwenden also
nicht nur einen Satz mit drei Zahlen,

100
00:04:37,080 --> 00:04:41,700
sondern viele Datensätze mit drei Zahlen.

101
00:04:41,700 --> 00:04:44,940
Wir haben also mehrere Dreiecke

102
00:04:44,940 --> 00:04:49,470
und benötigen jetzt die Werte
für a, b und c, also die drei Seiten.

103
00:04:49,470 --> 00:04:52,250
Dabei gibt a quasi die Stapelgröße an,

104
00:04:52,250 --> 00:04:57,030
also die Anzahl der vorhandenen Dreiecke,

105
00:04:57,030 --> 00:04:59,890
multipliziert mit 3,
da es drei davon gibt.

106
00:04:59,890 --> 00:05:01,820
Die erste Spalte ist also a,

107
00:05:01,820 --> 00:05:04,080
die zweite Spalte ist b,

108
00:05:04,080 --> 00:05:06,180
und die dritte Spalte ist c.

109
00:05:06,180 --> 00:05:09,510
Ich nehme die erste Spalte, also a,

110
00:05:09,510 --> 00:05:11,060
die zweite Spalte, also b,

111
00:05:11,060 --> 00:05:13,260
und die dritte Spalte, also c.

112
00:05:13,260 --> 00:05:18,575
Wir fügen also eine 2x3-Matrix ein,

113
00:05:18,575 --> 00:05:21,230
die 2x3-Matrix von zwei Dreiecken.

114
00:05:21,230 --> 00:05:23,175
Jedes Dreieck hat drei Seiten.

115
00:05:23,175 --> 00:05:27,270
Der erste Datensatz
umfasst 5 und 2.3. Das ist a.

116
00:05:27,270 --> 00:05:30,165
Dann kommt 3 und 4.1. Das ist b.

117
00:05:30,165 --> 00:05:33,625
Und dann 7.1 und 4.8. Das ist c.

118
00:05:33,625 --> 00:05:35,940
Damit haben wir a, b und c.

119
00:05:35,940 --> 00:05:37,800
Wir berechnen den halben Umfang,

120
00:05:37,800 --> 00:05:40,080
also a + b + c, geteilt durch 2.

121
00:05:40,080 --> 00:05:43,680
Wir berechnen 
mit dieser Formel das Flächenquadrat,

122
00:05:43,680 --> 00:05:46,605
ziehen die Quadratwurzel
und zeigen das Ergebnis an.

123
00:05:46,605 --> 00:05:50,050
Damit haben wir den Graphen erstellt.

124
00:05:50,050 --> 00:05:52,060
Wenn wir den Graphen ausführen möchten,

125
00:05:52,060 --> 00:05:56,100
geben wir einfach sess.run ein.

126
00:05:56,100 --> 00:05:58,720
Diesmal möchte ich aber
den Variablenbereich berechnen,

127
00:05:58,720 --> 00:06:02,140
also den TensorFlow-Tensorbereich.

128
00:06:02,140 --> 00:06:05,380
Dafür rufen wir compute_area auf

129
00:06:05,380 --> 00:06:07,590
und stellen diese Werte bereit.

130
00:06:07,590 --> 00:06:09,330
Wenn ich dies jetzt ausführe,

131
00:06:09,330 --> 00:06:12,250
erhalte ich damit
die Fläche von zwei Dreiecken.

132
00:06:12,250 --> 00:06:14,295
Darum stehen hier zwei Zahlen

133
00:06:14,295 --> 00:06:15,255
für zwei Dreiecke.

134
00:06:15,255 --> 00:06:17,865
Diese Zahlen habe ich jedoch hartcodiert.

135
00:06:17,865 --> 00:06:20,950
Sie möchten vielleicht
lieber Daten einspeisen.

136
00:06:20,950 --> 00:06:23,310
Das wird hier als Letztes gezeigt.

137
00:06:23,310 --> 00:06:26,400
Es wird wieder compute_area verwendet,

138
00:06:26,400 --> 00:06:28,130
aber diesmal werden die Seitenlängen

139
00:06:28,130 --> 00:06:30,150
in den Graphen eingespeist.

140
00:06:30,150 --> 00:06:32,610
sides ist also ein Platzhalter.

141
00:06:32,610 --> 00:06:34,425
Es ist keine tf-Konstante mehr.

142
00:06:34,425 --> 00:06:38,460
Wenn Sie die Funktion ausführen
und die Fläche bewerten möchten,

143
00:06:38,460 --> 00:06:40,905
fügen wir ein Schlüssel/Wert-Paar ein.

144
00:06:40,905 --> 00:06:44,460
Der Schlüssel ist
der Name der Tensorseiten.

145
00:06:44,460 --> 00:06:50,310
Der Wert ist jetzt Ihr 2D-Array,
da Sie ein Array von Dreiecken einfügen.

146
00:06:50,310 --> 00:06:54,825
Wenn Sie dies jetzt ausführen,
erhalten Sie quasi dasselbe Ergebnis.

147
00:06:54,825 --> 00:06:57,750
Im letzten Abschnitt
dieses Notebooks sehen Sie,

148
00:06:57,750 --> 00:07:01,480
wie Sie den zweiten Schritt umgehen,

149
00:07:01,480 --> 00:07:03,270
indem Sie tf eager verwenden.

150
00:07:03,270 --> 00:07:09,450
Dafür rufen wir jetzt
enable_eager_execution auf.

151
00:07:09,450 --> 00:07:15,420
Damit stellen wir sicher,
dass der zweite Schritt wegfällt.

152
00:07:15,420 --> 00:07:17,705
Anstatt den Graphen
zu erstellen und auszuführen,

153
00:07:17,705 --> 00:07:20,175
erstellen wir den Graphen wie zuvor,

154
00:07:20,175 --> 00:07:22,650
und alle Eingaben werden sofort bewertet.

155
00:07:22,650 --> 00:07:25,500
Ich definiere also hier compute_area

156
00:07:25,500 --> 00:07:27,225
und mache alles exakt wie zuvor.

157
00:07:27,225 --> 00:07:29,300
Ich gebe area = compute_area an

158
00:07:29,300 --> 00:07:30,300
und dann print area.

159
00:07:30,300 --> 00:07:33,020
Ohne die direkte
Ausführung mit Eager Execution...

160
00:07:33,020 --> 00:07:36,180
Ich kommentiere das kurz aus,
damit Sie sehen, was ich meine.

161
00:07:36,180 --> 00:07:40,100
Wenn ich print area
ohne Eager Execution aufrufe

162
00:07:40,110 --> 00:07:43,850
erhalte ich nur
den Debug-Output des Tensors.

163
00:07:43,850 --> 00:07:45,970
Das ist ein Debug-Output des Tensors.

164
00:07:45,970 --> 00:07:48,475
Ich erhalte hier keine Werte,

165
00:07:48,475 --> 00:07:49,785
sondern nur die Anzeige,

166
00:07:49,785 --> 00:07:53,790
dass dies die Antwort
für zwei Dreiecke enthalten wird.

167
00:07:53,790 --> 00:07:59,745
Wenn ich die direkte Ausführung
jetzt aktiviere und ausführe,

168
00:07:59,745 --> 00:08:04,320
sehen Sie, dass der Output
die tatsächlichen Werte enthält.

169
00:08:04,320 --> 00:08:06,305
Ich rufe zwar immer noch print area auf,

170
00:08:06,305 --> 00:08:08,790
aber nicht mehr session.runprint area.

171
00:08:08,790 --> 00:08:12,220
Dieses Mal erhalte ich
tatsächlich eine Antwort.