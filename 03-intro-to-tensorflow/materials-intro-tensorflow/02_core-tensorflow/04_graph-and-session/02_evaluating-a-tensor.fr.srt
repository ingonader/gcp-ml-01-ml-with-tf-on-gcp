1
00:00:00,000 --> 00:00:05,720
Vous pouvez appeler sess.run(z) ou z.eval

2
00:00:05,720 --> 00:00:09,245
pour évaluer z dans le contexte
de la session par défaut.

3
00:00:09,245 --> 00:00:12,020
z.eval est seulement un raccourci,

4
00:00:12,020 --> 00:00:13,875
et vous le verrez souvent dans le code.

5
00:00:13,875 --> 00:00:17,895
Cela revient au même que lorsque
vous appelez run pour la session par défaut.

6
00:00:17,895 --> 00:00:22,049
Vous pouvez appeler session.run
en transmettant un unique Tensor,

7
00:00:22,049 --> 00:00:26,450
mais vous pouvez également transmettre
une liste de Tensors à évaluer.

8
00:00:26,450 --> 00:00:32,110
TensorFlow identifiera les parties du graphe
à évaluer, et procédera à l'évaluation.

9
00:00:32,110 --> 00:00:34,120
Pour chaque Tensor d'entrée,

10
00:00:34,120 --> 00:00:37,150
il y a un tableau NumPy
correspondant dans la sortie.

11
00:00:37,150 --> 00:00:40,245
Étant donné que
nous avons transmis z1 et z3,

12
00:00:40,245 --> 00:00:45,710
nous obtenons deux tableaux NumPy
que j'appelle a1 et a3.

13
00:00:45,710 --> 00:00:48,310
Notez que ce code montre également

14
00:00:48,310 --> 00:00:52,620
que vous n'avez pas besoin
d'écrire tf.add( x, y).

15
00:00:52,620 --> 00:00:55,540
Il vous suffit d'indiquer "x + y",

16
00:00:55,540 --> 00:00:59,615
car les opérations arithmétiques
courantes sont surchargées.

17
00:00:59,615 --> 00:01:03,605
J'ai rapidement mentionné
tf.eager précédemment.

18
00:01:03,605 --> 00:01:07,225
Les programmes TensorFlow ont en général
recours à l'évaluation paresseuse,

19
00:01:07,225 --> 00:01:11,407
et c'est ce que je vous recommande d'utiliser
lorsque vous écrivez du code de production.

20
00:01:11,407 --> 00:01:14,480
Toutefois, lorsque vous procédez
au développement et au débogage,

21
00:01:14,480 --> 00:01:21,110
il peut parfois être pratique
d'exécuter le code immédiatement.

22
00:01:21,110 --> 00:01:25,060
C'est pourquoi je vous montre
comment utiliser tf.eager.

23
00:01:25,060 --> 00:01:29,620
Vous importez tf.eager, puis vous activez
l'exécution "eager" (dynamique).

24
00:01:29,620 --> 00:01:31,950
Veillez toutefois à ne le faire
qu'une seule fois.

25
00:01:31,950 --> 00:01:34,655
Vous le faites généralement
au début de votre main().

26
00:01:34,655 --> 00:01:38,295
Je crée donc ici les deux Tensors x et y,

27
00:01:38,295 --> 00:01:41,365
et j'affiche le résultat de x-y.

28
00:01:41,365 --> 00:01:43,685
Si nous n'étions pas en mode "eager",

29
00:01:43,685 --> 00:01:45,430
qu'est-ce qui serait affiché ?

30
00:01:46,810 --> 00:01:49,175
Uniquement la sortie
du débogage du Tensor.

31
00:01:49,965 --> 00:01:52,800
Elle comprendrait un nom unique
affecté par le système

32
00:01:52,800 --> 00:01:54,565
pour le nœud se trouvant dans le DAG,

33
00:01:54,565 --> 00:01:57,042
ainsi que la forme et
le type de données de la valeur

34
00:01:57,042 --> 00:01:59,500
qui s'afficherait lors de l'exécution du DAG.

35
00:01:59,500 --> 00:02:02,425
Mais vu que nous sommes en mode "eager",

36
00:02:02,425 --> 00:02:05,047
nous n'avons pas à attendre
que la session soit exécutée

37
00:02:05,047 --> 00:02:07,570
pour obtenir le véritable résultat
de la soustraction.

38
00:02:07,570 --> 00:02:09,020
C'est la raison pour laquelle

39
00:02:09,020 --> 00:02:14,350
l'exécution du code x-y se traduit
par l'affichage de la liste 2, 3, 4.