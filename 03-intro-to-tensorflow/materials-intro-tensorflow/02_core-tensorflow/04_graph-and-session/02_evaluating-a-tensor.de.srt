1
00:00:00,480 --> 00:00:05,700
Sie können entweder
 sess.runs z oder z.eval aufrufen,

2
00:00:05,700 --> 00:00:09,185
um z im Kontext der
Standardsitzung auszuwerten.

3
00:00:09,185 --> 00:00:11,960
z.eval ist nur eine Kurzform,

4
00:00:11,960 --> 00:00:13,795
der Sie im Code oft begegnen werden.

5
00:00:13,795 --> 00:00:17,785
Sie entspricht einem
run-Aufruf mit der Standardsitzung.

6
00:00:17,785 --> 00:00:22,049
Man kann session.run aufrufen
und einen einzelnen Tensor übergeben,

7
00:00:22,049 --> 00:00:26,260
aber man kann auch eine Liste
von Tensoren zur Auswertung übergeben.

8
00:00:26,260 --> 00:00:27,790
TensorFlow ermittelt selbst,

9
00:00:27,790 --> 00:00:30,185
welche Teile des Graphen
ausgewertet werden müssen,

10
00:00:30,185 --> 00:00:31,925
und führt die Auswertung durch.

11
00:00:31,925 --> 00:00:33,880
Für jeden Eingangstensor

12
00:00:33,880 --> 00:00:36,880
gibt es einen entsprechenden
Array numPy in der Ausgabe.

13
00:00:36,880 --> 00:00:39,975
Da wir z und z3 übergeben haben,

14
00:00:39,975 --> 00:00:45,600
erhält man numPy-Arrays zurück,
die ich a1 und a3 nennen möchte.

15
00:00:45,600 --> 00:00:48,320
An diesem Code sieht man auch,

16
00:00:48,320 --> 00:00:52,630
dass man tf.Add(x, y)
nicht ausschreiben muss.

17
00:00:52,630 --> 00:00:55,470
Man kann einfach x plus y verwenden,

18
00:00:55,470 --> 00:00:59,515
denn die gängigen
arithmetischen Operationen sind überladen.

19
00:00:59,515 --> 00:01:03,395
Ich habe schon über tf.eager gesprochen.

20
00:01:03,395 --> 00:01:06,995
TensorFlow-Programme arbeiten
normalerweise mit verzögerter Auswertung,

21
00:01:06,995 --> 00:01:08,870
und wenn Sie Produktionscode schreiben,

22
00:01:08,870 --> 00:01:10,240
empfehle ich das auch.

23
00:01:10,240 --> 00:01:14,460
Aber bei der Entwicklung oder Fehlersuche

24
00:01:14,460 --> 00:01:21,140
kann es manchmal praktisch sein,
wenn der Code sofort ausgeführt wird.

25
00:01:21,140 --> 00:01:24,930
Hierfür möchte ich Ihnen tf.eager zeigen.

26
00:01:24,930 --> 00:01:29,430
Importieren Sie  tf.eager und aktivieren
Sie die sofortige ("eager") Ausführung.

27
00:01:29,430 --> 00:01:31,750
Dies darf man aber nur einmal tun.

28
00:01:31,750 --> 00:01:34,705
Typischerweise
tut man es zu Beginn der mi.

29
00:01:34,705 --> 00:01:38,295
Hier erstelle ich zwei Tensoren x und y

30
00:01:38,295 --> 00:01:40,775
und lasse x minus y ausgeben.

31
00:01:40,775 --> 00:01:43,405
Wenn der eager-Modus nicht aktiviert wäre,

32
00:01:43,405 --> 00:01:46,700
was würde dann ausgegeben werden?

33
00:01:46,700 --> 00:01:49,905
Nur die Debug-Ausgabe des Tensors.

34
00:01:49,905 --> 00:01:52,715
Darin wären ein vom System
zugewiesener, eindeutiger Name

35
00:01:52,715 --> 00:01:56,635
für den Knoten und den DAG, die Form
und der Datentyp des Werts enthalten,

36
00:01:56,635 --> 00:01:59,360
der beim Ausführen des DAG erscheint.

37
00:01:59,360 --> 00:02:02,395
Weil aber der eager-Modus aktiviert ist,

38
00:02:02,395 --> 00:02:05,100
müssen wir nicht auf
das Subtraktionsergebnis warten,

39
00:02:05,100 --> 00:02:07,430
bis die Sitzung ausgeführt wurde.

40
00:02:07,430 --> 00:02:11,030
Und deshalb sehen wir für x minus y

41
00:02:11,030 --> 00:02:14,350
als Ergebnis die Liste 2, 3, 4.