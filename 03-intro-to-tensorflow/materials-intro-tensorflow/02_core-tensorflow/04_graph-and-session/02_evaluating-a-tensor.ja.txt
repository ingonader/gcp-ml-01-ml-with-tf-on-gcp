sess.runs zを呼び出すか
z.evalを呼び出して デフォルトセッションの
コンテキストでzを評価します z.evalは単なるショートカットです 何度もコーディングするでしょう デフォルトセッションで
実行を呼び出すのと同じです sessionか.runを呼び出して
1つのテンソルか 評価するテンソルのリストを渡すことができます TensorFlowは グラフで 評価の必要がある箇所を評価します 入力テンソルに対応する
NumPy配列は 出力の中にあります zとz3を渡したので a1とa3という
NumPy配列で返されます コードを見ると tf.add( x,y)と記述する
必要がないこともわかります 単に「x+y」と記述できます 算術演算が共通で
オーバーロードされるからです tf.eagerについては
すでに簡単に説明しました 通常 TensorFlowプログラムは
遅延評価を使用します 本番環境のコードを書く際は
これをおすすめします 開発やデバッグでは
コードを後で実行するよりも 即座に実行したほうが
都合が良いことがあります そこでtf.eagerの使用方法を説明します tf eagerをインポートして
先行（eager）実行を有効にします これは一度だけ 通常はmiの開始時に行います 2つのテンソルxとyを作成し x-yを出力します eagerモードでなければ 出力されるのは テンソルのデバッグ出力だけです システムで割り当てられた ノードの一意の名前、DAG、形状、
デバッガ実行で 表示される値の
データ型が含まれます 今は eagerモードであるため 減算の結果を得るのに
セッションの実行を待つ必要がありません ですから x-yを実行すると リスト「2, 3, 4」が表示されます