1
00:00:00,000 --> 00:00:04,440
You can call sess.runs z or you can call

2
00:00:04,440 --> 00:00:09,045
z.eval to evaluate z in the context of the default session.

3
00:00:09,045 --> 00:00:11,790
z.eval is just a shortcut,

4
00:00:11,790 --> 00:00:13,615
and you will often see it and code.

5
00:00:13,615 --> 00:00:17,215
It is the same as calling run on the default session.

6
00:00:17,215 --> 00:00:21,939
While you can call session.run and passing a single answer,

7
00:00:21,939 --> 00:00:26,110
you can also pass in a list of tensors to evaluate.

8
00:00:26,110 --> 00:00:28,690
TensorFlow will figure out which parts of

9
00:00:28,690 --> 00:00:31,795
the graph it needs to evaluate and carry out the evaluation.

10
00:00:31,795 --> 00:00:33,880
For each input tensor,

11
00:00:33,880 --> 00:00:36,880
there is a corresponding numPy array in the output.

12
00:00:36,880 --> 00:00:39,975
Since we passed in z and z3,

13
00:00:39,975 --> 00:00:45,200
you get back to numPy arrays that I'm calling a1 and a3.

14
00:00:45,200 --> 00:00:52,620
Notice that this code also shows that you don't need to write out tf.Add( x,y).

15
00:00:52,620 --> 00:00:55,120
You can simply say x plus y,

16
00:00:55,120 --> 00:00:59,325
because the common arithmetic operations, they're overloaded.

17
00:00:59,325 --> 00:01:03,195
I briefly mentioned tf.eager earlier.

18
00:01:03,195 --> 00:01:06,975
Commonly, TensorFlow programs use the lazy evaluation,

19
00:01:06,975 --> 00:01:10,240
and this is what I recommend when you're writing production code.

20
00:01:10,240 --> 00:01:14,340
However, when you're developing, when you're debugging,

21
00:01:14,340 --> 00:01:20,680
it can sometimes be convenient to have the code executed immediately instead of lazily.

22
00:01:20,680 --> 00:01:24,570
So here, I'm showing how to use tf.eager.

23
00:01:24,570 --> 00:01:29,090
You import tf eager and enable eager execution.

24
00:01:29,090 --> 00:01:31,440
But make sure to do this only once.

25
00:01:31,440 --> 00:01:34,165
Typically you do it at the start of your mi.

26
00:01:34,165 --> 00:01:38,295
So here, I'm creating two tensors x and y,

27
00:01:38,295 --> 00:01:40,775
and printing out x minus y.

28
00:01:40,775 --> 00:01:43,405
If we are not an eager mode,

29
00:01:43,405 --> 00:01:45,820
what would get printed out?

30
00:01:45,820 --> 00:01:49,345
Just the debug output of the tensor.

31
00:01:49,345 --> 00:01:51,850
This would have included a system assigned

32
00:01:51,850 --> 00:01:55,355
a unique name for the node and the Dagg and the shape,

33
00:01:55,355 --> 00:01:58,510
and the datatype of the value that will show up when the daggers run.

34
00:01:58,510 --> 00:02:02,035
But because we are in eager mode,

35
00:02:02,035 --> 00:02:07,040
we don't have to wait for session that run to get the actual result of the subtraction.

36
00:02:07,040 --> 00:02:11,030
That's why, when I do x minus y,

37
00:02:11,030 --> 00:02:14,350
you see the list 2, 3, 4.