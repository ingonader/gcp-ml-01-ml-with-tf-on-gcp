So far, we have seen how to write a graph and how to run it. But every once in a while, you want to visualize the graph, you want to see the operations, what data feeds into it, et cetera. You might also want to visualize the architecture of your neural networks. To write out the graph, use a tf.summary.FileWriter. So, use tf.summary.FileWriter to write out the session graph. Now, if you're going to visualize the graph, you probably don't want auto-generated tensor names, things like the Ad_7 that we saw before. So, if you're writing out and visualizing the graph, make sure to name your data tensors and your operations. Once you do that and you run this program, you will get a new directory called 'summaries'. Well, it's called summaries because it specified summaries as a first arg of tf.summary.FileWriter. You could name the directory whatever you want. And in that directory is a file that contains a graph. The graph is in a documented binary format, it's not really human-readable. So, how do you get a pretty visual from this output file? To visualize the graph, use a program called TensorBoard. It comes with the TensorFlow distribution, which means you can call it from DataLab. So, here's the Python code to invoke TensorBoard, pointing it to the top level directory called summaries. And then the UI that comes up, switch to the graphs section and you'll see a visual representation of your graph with x, y, z1, z2, and z3, and the operations that connect them. There is more that you can do with TensorBoard and you will get to play with it in the next lab and in other labs in the specialization. Since we tend to develop ML models in DataLab, being able to launch TensorBoard directly from DataLab is very convenient. But sometimes, you will launch off a training job and perhaps it takes a few hours and you want to monitor the training. You don't need to get into DataLab to start TensorBoard. Remember that I said TensorBoard comes with TensorFlow? Well, TensorFlow is also installed in CloudShell and while the CloudShell is too puny to do actual machine learning work, it's sufficient to run TensorBoard. So here, you have the directions on how to start and support from CloudShell pointing to a model output directory that's on Google Cloud Storage. You can find this documented on the website that's linked from this video.