前回のラボで行った 三角形の面積の計算では TensorFlowコードを ゼロから書いてみましたか その場合は コンパイラやランタイムの
エラーが出たかもしれません 今回は デバッグの方法を
説明しましょう TensorFlowは遅延評価パラダイムなので デバッグは 
難しいことがあります グラフにエラーがあっても 実行するまでわかりません プログラム開発では
tf.eagerが有用ですが 万能策ではありません 対話型で開発する場合も TensorFlowでのデバッグ方法を 知っておく必要があります では 詳しく見ていきましょう 他のプログラムと同様に
デバッグでは エラーメッセージと スタックトレースから
問題のメソッドを特定します こうすることで 問題のあるメソッドをのみを
呼び出します データセットで
プログラム全体を実行して デバッグするのは
好ましくないため 仮のデータをメソッドに入力して エラーを再現させて
修正を試みるとよいでしょう では 具体的に見ていきましょう すべてを紹介することはできませんが よくあるエラーメッセージと その対処法を説明します まずは エラーメッセージが大量に発生しても 慌てずによく確認してください 注目すべき情報は2つあります 1つはスタックトレース エラーがスローされた時点での
コールスタックです この例では メソッド内にs=(a+c)という行があり some_method(data)に問題があります プログラムで呼び出された
多数の ライブラリメソッドも含まれます そのため 自分のコードに
的を絞ります 次に 実際のエラーメッセージを確認します この例では
値エラーが発生しています 等しいはずの次元の数が 等しくありません なぜでしょう aとcを加算する場合 aが2次元テンソルなら
cも同じである必要があります aが4次元テンソルなら cも4次元でなければなりません しかし この場合はaかcのいずれかが [4, 2]という形状の2次元テンソルで もう一方は[4]という形状の 1次元テンソルです 明らかにプログラムの問題です 両方を[4, 2] または [4]に揃えれば コールスタックを見つけて
エラーメッセージを 理解できます コールスタックを調べて 該当する行とメソッド名を
特定したら 次にメソッドを詳しく調べます ここでは some_methodというメソッドが dataというテンソルを使用します このテンソルに
架空のデータを入れます プログラムの残りの部分や データの読み取り方法については
忘れてください メソッドを呼び出すには セッションを作成して ハードコーディングで
テンソル配列を作成します ここでは 4行×3列の fake_data（架空データ）を作成し some_methodに渡します print文で一部のデータの
コードを詳しく書き出します この方法はやや古いですが 最も簡単に形状エラーを診断できます aとcを加算する際に 問題が発生したので aとcの形状を出力します プログラムを実行すると 最初の行では[4,2]が 次の行では[4]が出力されます 値エラーメッセージのとおりです この先の手順は
目的次第です cで[4, 2]行列を
スライスするか aで1次元ベクトルを
スライスするか 目的に合わせてください プログラムを実行すると 最初の行では[4, 2] 次の行では[4]が出力されます 値エラーメッセージのとおりです この先は目的次第です cで[4, 2]行列を
スライスするか aで1次元ベクトルを
スライスするか どちらも可能です