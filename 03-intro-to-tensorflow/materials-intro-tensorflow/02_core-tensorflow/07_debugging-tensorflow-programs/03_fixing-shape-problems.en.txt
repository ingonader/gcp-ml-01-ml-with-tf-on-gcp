tf.expand_dims is a way of changing the shape by inserting a dimension of 1 into a tensor shape. So, we have x, which is a 3/2 matrix. When we call tf.expand_dims on x, we specify which dimension we want to insert a new thing at. We say one, which in Python means a second place, 0 will mean first place. So, the expanded shape changes from 3, 2 to 3, 1, 2. What does this actually mean? The original value of x, which is a neat 3/2 matrix now becomes a 3D matrix, a 3D tensor. Notice the number of opening square brackets. There is no change to the actual numbers that are stored. We have already looked at slicing. So, this is a way of extracting part of a tensor, but we looked at the shortcut syntax of simply specifying its square brackets, the rows and columns we wanted. tf.slice is a long form way of doing that. We are asking tf.slice here to pull data out of x. We're telling it to start at position 0, 1 and pull out two rows and one column. So, do you understand why you get the numbers 2 and 5? It's a quick quiz. How would you write the tf.slice call here in terms of the square brackets syntax? Answer, x square bracket, the rows that you want are 0-2, so 0 and 1 and the columns that you want are 1-2 so just 1. Squeeze is the inverse operation to expand dims. Expand dims lets you insert a dimension of size one anywhere within the tensor. Squeeze lets you remove dimensions of size one from the shape of a tensor. So, here I have a tensor that's a 3D tensor. Note the number of square brackets. T is a 3D tensor. I call squeeze passing in t and I get back a 2D tensor that's more compact. The original tensor had the shape 1/2/4 and the squeeze tensor has the shape just 2/4. To be sure, you don't really need expand dims and squeeze, you can simply use reshape, but your code will be a bit more self-explanatory if you explain that you're inserting or removing a dimension one to convert the scalars to tensors are basically dealing with 1, 2/4 matrix as either a 3D tensor of shape, 1/2/4 or as a 2D tensor of shape 2/4 depending on the context of the code.