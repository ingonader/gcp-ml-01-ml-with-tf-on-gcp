Nas próximas lições, vamos ver maneiras
de resolver problemas comuns. Começaremos com erros de forma e depois
examinaremos uma variante de erros de forma relacionados
à incompatibilidade escalar/vetor e, por fim, examinaremos
problemas de tipo de dados. Analisamos este código na aula anterior
e dissemos que a razão pela qual a soma falhou é que tanto a quanto c precisavam
ter a mesma forma. Qual das duas formas está correta depende
de qual é a intenção. Nesse caso, o método estava tentando
pegar a matriz 4x3 original e fazer janelas deslizantes
de tamanho constante. Essas janelas deslizantes
precisavam ser 4x2. Então, a estava correto,
mas c estava errado. Como você faria c também ficar 4, 2? Você pode fazer c deixar de cortar
todas as linhas e apenas a coluna 1 para cortar todas as linhas,
mas com as colunas 1 e 2. Lembre-se de que, em intervalos do Python, o primeiro número é incluído,
mas o último não. Então, a recebe a coluna 0 e 1
e c as colunas 1 e 3, cortando janelas
de duas colunas por vez. Agora, quando executamos o programa,
tudo funciona corretamente. Problemas de forma também podem acontecer
devido ao tamanho do lote. Lembre-se que, quando eu estava falando
sobre formas de tensores, disse que às vezes uma ou mais dimensões
poderiam ter comprimento variável. Uma razão comum para
tensores de comprimento variável é quando você está escrevendo
um programa que lida com lotes. Os lotes geralmente são do mesmo tamanho. Por exemplo, 64 exemplos de cada vez, exceto quando chega
ao final do arquivo de entrada. No entanto, nesse momento, você pode não ter 64 exemplos
para preencher o lote e, portanto, pode criar um tensor que contém
apenas 42 exemplos. Essa é a razão pela qual
o formato do marcador X no código é none
para a primeira dimensão. None significa
que há um comprimento variável. Se você imprimir o valor de X, terá a saída de depuração do tensor,
que informa que esse é um tensor 2D. É "?, 3". Isso significa que a matriz sempre tem
3 colunas, mas o número de linhas varia. Agora, quando você tenta
fornecer dados falsos, qual é a forma deles? É um tensor 1D. Ele tem três elementos, com certeza, mas é 1D. Porém, o marcador
quer uma matriz 2D. Você pode ter qualquer número de linhas,
e uma linha é aceitável, mas você precisa torná-la uma matriz 2D. Então, como você resolve esse problema? Não é tão simples
quanto corrigir o corte, não é? A resposta é que você precisa
mudar a forma. A coerção de forma pode ser feita
com estes métodos. Já vimos o tf.reshape(). Ele pega os números que você tem
e os coloca em uma forma diferente, e é isso que precisamos
para esse problema. Temos três números,
e isso é o suficiente, mas temos um tensor 1D
e precisamos dele em um tensor 2D. Podemos fazer uma reformulação
e enviar junto.