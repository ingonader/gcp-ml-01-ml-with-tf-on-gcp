1
00:00:00,000 --> 00:00:05,180
tf.expand_dims est une façon
de modifier la forme

2
00:00:05,180 --> 00:00:09,615
par l'insertion d'une dimension de 1
dans une forme de Tensor.

3
00:00:09,615 --> 00:00:13,100
Nous avons donc x,
qui est une matrice 3, 2.

4
00:00:13,100 --> 00:00:16,070
Lorsque nous appelons tf.expand_dims avec x,

5
00:00:16,070 --> 00:00:21,365
nous spécifions la dimension pour laquelle
nous voulons insérer un nouvel élément.

6
00:00:21,365 --> 00:00:24,770
Nous indiquons 1, ce qui en Python
correspond à la deuxième position

7
00:00:24,770 --> 00:00:26,770
(la valeur 0 correspondant à la première).

8
00:00:26,770 --> 00:00:32,990
Donc, la forme post-expansion
(expanded.shape) 3, 1, 2 remplace 3, 2.

9
00:00:32,990 --> 00:00:35,115
Qu'est-ce que cela signifie ?

10
00:00:35,115 --> 00:00:40,045
La valeur de x, qui était originellement
une pure matrice 3, 2, est maintenant

11
00:00:40,045 --> 00:00:43,535
une matrice 3D, un Tensor 3D.

12
00:00:43,535 --> 00:00:46,385
Remarquez le nombre de crochets ouvrants.

13
00:00:46,735 --> 00:00:50,060
Aucune modification n'est apportée
aux nombres stockés.

14
00:00:51,220 --> 00:00:53,520
Nous avons déjà vu la scission.

15
00:00:53,520 --> 00:00:56,500
Il s'agit d'une façon d'extraire
une partie d'un Tensor.

16
00:00:56,500 --> 00:00:58,855
Mais nous avons vu la syntaxe abrégée

17
00:00:58,855 --> 00:01:01,620
qui consiste simplement
à spécifier entre crochets

18
00:01:01,620 --> 00:01:04,050
les lignes et les colonnes
que nous voulons obtenir.

19
00:01:04,050 --> 00:01:08,235
tf.slice est la forme longue
de cette méthode.

20
00:01:08,235 --> 00:01:12,640
Nous utilisons ici tf.slice
pour extraire des données de x.

21
00:01:12,640 --> 00:01:15,840
Nous indiquons que le traitement
doit commencer en position 0, 1

22
00:01:15,840 --> 00:01:18,855
et se traduire par l'extraction
de deux lignes et d'une colonne.

23
00:01:19,355 --> 00:01:22,920
Alors, comprenez-vous pourquoi
nous obtenons les nombres 2 et 5 ?

24
00:01:22,920 --> 00:01:24,455
C'est un petit quiz.

25
00:01:24,455 --> 00:01:27,687
En termes d'usage des crochets,
quelle syntaxe utiliseriez-vous ici

26
00:01:27,687 --> 00:01:30,480
pour écrire l'appel tf.slice ?

27
00:01:33,050 --> 00:01:36,050
Réponse : d'abord x, puis crochet.

28
00:01:36,050 --> 00:01:40,440
Ensuite, étant donné que vous voulez
les lignes 0 à 2, vous indiqueriez 0 et 1.

29
00:01:40,440 --> 00:01:42,930
Et étant donné que vous voulez
les colonnes 1 à 2,

30
00:01:42,930 --> 00:01:44,740
vous indiqueriez ensuite simplement 1.

31
00:01:45,880 --> 00:01:47,022
Avec la méthode squeeze,

32
00:01:47,022 --> 00:01:50,295
vous pouvez faire l'inverse
de ce que vous faites avec expand_dims.

33
00:01:50,295 --> 00:01:54,750
Avec expand_dims,
vous insérez une dimension de taille 1

34
00:01:54,750 --> 00:01:57,120
n'importe où dans le Tensor.

35
00:01:57,120 --> 00:02:00,480
Et avec squeeze,
vous retirez des dimensions de taille 1

36
00:02:00,480 --> 00:02:02,210
de la forme d'un Tensor.

37
00:02:02,540 --> 00:02:05,490
Donc, j'ai ici un Tensor. C'est un Tensor 3D.

38
00:02:05,490 --> 00:02:08,135
Notez le nombre de crochets.

39
00:02:08,135 --> 00:02:10,795
t est un Tensor 3D.

40
00:02:10,795 --> 00:02:13,980
J'appelle squeeze en transmettant t,

41
00:02:13,980 --> 00:02:17,415
et j'obtiens un Tensor 2D
qui est plus compact.

42
00:02:17,415 --> 00:02:21,360
Le Tensor d'origine était de forme 1, 2, 4,

43
00:02:21,360 --> 00:02:25,315
tandis que le Tensor réduit
est seulement de forme 2, 4.

44
00:02:25,875 --> 00:02:29,815
Vous pouvez sans aucun doute
vous passer d'expand_dims et de squeeze,

45
00:02:29,815 --> 00:02:31,709
et utiliser simplement reshape.

46
00:02:31,989 --> 00:02:35,239
Mais votre code sera un peu plus explicite

47
00:02:35,239 --> 00:02:39,010
si vous montrez que vous insérez
ou retirez une dimension 1

48
00:02:39,010 --> 00:02:42,020
pour convertir des scalaires en Tensors,

49
00:02:42,020 --> 00:02:44,862
ou que l'opération concerne une matrice 2, 4,

50
00:02:44,862 --> 00:02:51,064
qui peut être un Tensor 3D de forme 1, 2, 4
ou un Tensor 2D de forme 2, 4

51
00:02:51,064 --> 00:02:53,480
selon le contexte du code.