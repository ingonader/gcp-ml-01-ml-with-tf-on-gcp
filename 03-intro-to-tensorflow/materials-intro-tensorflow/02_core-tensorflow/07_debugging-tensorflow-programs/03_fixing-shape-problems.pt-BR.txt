tf.expand_dims é uma maneira de alterar o formato inserindo uma dimensão de 1
em um formato de tensor. Então, temos x, que é uma matriz de 3x2. Quando chamamos tf.expand_dims em x, especificamos em qual dimensão
queremos inserir algo novo. Vamos dizer 1, que em Python
quer dizer a segunda posição, 0 significa a primeira. Assim, o formato expandido muda de 3, 2 para 3, 1, 2. O que isso significa? O valor original de x, que é uma matriz 3x2 pura, agora se torna
uma matriz 3D, um tensor 3D. Observe o número de colchetes. Não há alteração
nos números reais armazenados. Nós já analisamos o corte. Então, essa é uma maneira
de extrair parte de um tensor, mas olhamos a sintaxe do atalho
simplesmente especificando os colchetes, as linhas e as colunas que queríamos. tf.slice é uma forma longa de fazer isso. Estamos pedindo que o tf.slice aqui
extraia dados de x. Estamos dizendo
para começar na posição 0, 1 e extrair duas linhas e uma coluna. Então, você entende por que
recebe os números 2 e 5? É um teste rápido. Como você escreveria a chamada tf.slice
aqui em termos da sintaxe dos colchetes? Resposta: x colchete, as linhas que você quer são de 0 a 2,
então 0 e 1, e as colunas que você quer
são de 1 a 2, então apenas 1. Squeeze é a operação inversa
a expand_dims. Expand_dims permite inserir uma dimensão
de tamanho 1 em qualquer lugar no tensor. Squeeze permite remover as dimensões
de tamanho 1 do formato de um tensor. Então, aqui tenho um tensor 3D. Observe o número de colchetes. T é um tensor 3D. Chamo squeeze passando em t e recebo
de volta um tensor 2D que é mais compacto. O tensor original tinha o formato 1x2x4,
e o tensor squeeze é apenas 2x4. Para ter certeza, você não precisa de
expand_dims e squeeze, pode simplesmente usar reshape,
mas seu código será um pouco mais autoexplicativo
se você explicar que a inserção ou remoção de uma dimensão 1 para converter
os escalares em tensores estão lidando com uma matriz 2x4 como
um tensor 3D de formato 1x2x4 ou como um tensor 2D de formato 2x4,
dependendo do contexto do código.