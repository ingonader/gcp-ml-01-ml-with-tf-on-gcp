1
00:00:00,480 --> 00:00:05,180
tf.expand_dims es
una manera de cambiar la forma

2
00:00:05,180 --> 00:00:09,545
insertando una dimensión de 1
en la forma del tensor.

3
00:00:09,565 --> 00:00:12,790
Tenemos x, que es una matriz de 3 x 2.

4
00:00:12,790 --> 00:00:15,830
Cuando llamamos a tf.expand_dims en x

5
00:00:15,830 --> 00:00:20,985
especificamos en qué dimensión
queremos insertar un elemento.

6
00:00:20,985 --> 00:00:26,490
Decimos 1, que en Python significa
segundo lugar, ya que 0 es el primero.

7
00:00:26,520 --> 00:00:32,190
Entonces, la forma expandida
cambia de (3, 2) a (3, 1, 2).

8
00:00:32,415 --> 00:00:35,105
¿Qué significa esto?

9
00:00:35,105 --> 00:00:36,965
El valor original de x

10
00:00:36,965 --> 00:00:41,945
que es una matriz limpia de 3 x 2
ahora se convierte en una matriz 3D.

11
00:00:41,945 --> 00:00:43,275
Un tensor 3D.

12
00:00:43,275 --> 00:00:46,605
Observe la cantidad
de corchetes de apertura.

13
00:00:46,605 --> 00:00:50,400
No hay cambio en la cantidad real
de números que se almacenan.

14
00:00:51,160 --> 00:00:53,510
Ya vimos la división (slicing).

15
00:00:53,510 --> 00:00:56,460
Esta es una forma
de extraer parte de un tensor

16
00:00:56,460 --> 00:01:00,790
pero vimos la sintaxis de acceso directo
en las que simplemente se usan corchetes

17
00:01:00,790 --> 00:01:03,880
para especificar las filas
y las columnas que queremos.

18
00:01:03,880 --> 00:01:07,805
tf.slice es una forma larga de hacerlo.

19
00:01:07,805 --> 00:01:12,630
Pedimos a tf.slice
que obtenga datos de x.

20
00:01:12,630 --> 00:01:15,790
Le decimos
que comience en la posición [0, 1]

21
00:01:15,790 --> 00:01:18,645
y extraiga dos filas y una columna.

22
00:01:19,275 --> 00:01:22,530
¿Entiende
por qué se obtienen los números 2 y 5?

23
00:01:22,530 --> 00:01:24,455
Un cuestionario rápido.

24
00:01:24,455 --> 00:01:30,190
¿Cómo escribiría esta llamada a tf.slice
usando la sintaxis de los corchetes?

25
00:01:32,930 --> 00:01:35,760
La respuesta es x seguido de un corchete…

26
00:01:35,760 --> 00:01:40,080
Las filas que le interesan
son 0 a 2, así que escribe 0 y 1.

27
00:01:40,080 --> 00:01:44,540
Y las columnas que le interesan
son 1 a 2, así que escribe solo 1.

28
00:01:45,850 --> 00:01:50,335
Squeeze es
la operación opuesta de expand_dims.

29
00:01:50,370 --> 00:01:53,670
Expand_dims
permite insertar una dimensión

30
00:01:53,670 --> 00:01:57,360
de tamaño 1 en cualquier parte del tensor.

31
00:01:57,360 --> 00:02:02,690
Squeeze permite quitar dimensiones
de tamaño 1 de la forma de un tensor.

32
00:02:02,690 --> 00:02:05,370
Aquí, tengo un tensor 3D.

33
00:02:05,370 --> 00:02:07,905
Observe la cantidad de corchetes.

34
00:02:07,905 --> 00:02:10,805
t es un tensor 3D.

35
00:02:10,805 --> 00:02:16,945
Llamo a squeeze y paso t, y obtengo
un tensor 2D que es más compacto.

36
00:02:17,520 --> 00:02:21,390
El tensor original
tenía la forma 1 x 2 x 4

37
00:02:21,390 --> 00:02:25,450
y el tensor comprimido
tiene la forma 2 x 4.

38
00:02:25,795 --> 00:02:29,835
Claro que, en realidad,
no hace falta usar expand_dims y squeeze.

39
00:02:29,835 --> 00:02:31,679
Podemos simplemente usar reshape.

40
00:02:31,679 --> 00:02:37,220
Pero el código será más claro
si detalla que está insertando

41
00:02:37,220 --> 00:02:41,650
o quitando una dimensión 1
para convertir escalares en tensores

42
00:02:41,650 --> 00:02:44,720
y que se trata de una matriz de 2 x 4

43
00:02:44,720 --> 00:02:48,914
como un tensor 3D de forma 1 x 2 x 4

44
00:02:48,914 --> 00:02:53,270
o como un tensor 2D de forma 2 x 4,
según el contexto del código.