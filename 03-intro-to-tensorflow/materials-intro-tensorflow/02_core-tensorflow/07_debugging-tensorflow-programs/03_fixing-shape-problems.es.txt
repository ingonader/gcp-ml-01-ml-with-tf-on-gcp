tf.expand_dims es
una manera de cambiar la forma insertando una dimensión de 1
en la forma del tensor. Tenemos x, que es una matriz de 3 x 2. Cuando llamamos a tf.expand_dims en x especificamos en qué dimensión
queremos insertar un elemento. Decimos 1, que en Python significa
segundo lugar, ya que 0 es el primero. Entonces, la forma expandida
cambia de (3, 2) a (3, 1, 2). ¿Qué significa esto? El valor original de x que es una matriz limpia de 3 x 2
ahora se convierte en una matriz 3D. Un tensor 3D. Observe la cantidad
de corchetes de apertura. No hay cambio en la cantidad real
de números que se almacenan. Ya vimos la división (slicing). Esta es una forma
de extraer parte de un tensor pero vimos la sintaxis de acceso directo
en las que simplemente se usan corchetes para especificar las filas
y las columnas que queremos. tf.slice es una forma larga de hacerlo. Pedimos a tf.slice
que obtenga datos de x. Le decimos
que comience en la posición [0, 1] y extraiga dos filas y una columna. ¿Entiende
por qué se obtienen los números 2 y 5? Un cuestionario rápido. ¿Cómo escribiría esta llamada a tf.slice
usando la sintaxis de los corchetes? La respuesta es x seguido de un corchete… Las filas que le interesan
son 0 a 2, así que escribe 0 y 1. Y las columnas que le interesan
son 1 a 2, así que escribe solo 1. Squeeze es
la operación opuesta de expand_dims. Expand_dims
permite insertar una dimensión de tamaño 1 en cualquier parte del tensor. Squeeze permite quitar dimensiones
de tamaño 1 de la forma de un tensor. Aquí, tengo un tensor 3D. Observe la cantidad de corchetes. t es un tensor 3D. Llamo a squeeze y paso t, y obtengo
un tensor 2D que es más compacto. El tensor original
tenía la forma 1 x 2 x 4 y el tensor comprimido
tiene la forma 2 x 4. Claro que, en realidad,
no hace falta usar expand_dims y squeeze. Podemos simplemente usar reshape. Pero el código será más claro
si detalla que está insertando o quitando una dimensión 1
para convertir escalares en tensores y que se trata de una matriz de 2 x 4 como un tensor 3D de forma 1 x 2 x 4 o como un tensor 2D de forma 2 x 4,
según el contexto del código.