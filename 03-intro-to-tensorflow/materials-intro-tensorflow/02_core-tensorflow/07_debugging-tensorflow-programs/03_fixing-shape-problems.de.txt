tf.expand_dims ist eine 
Möglichkeit, die Form zu ändern, indem eine Dimension von 1
in eine Tensorform eingefügt wird. Wir haben hier x, eine 3:2-Matrix. Wenn wir tf.expand_dims
auf x anwenden, legen wir fest, in welcher Dimension
wir eine Neuerung einfügen. Sagen wir 1, was in Python
an zweiter Stelle bedeutet; 0 bedeutet an erster Stelle. Die erweiterte Form 
ändert sich also von 3, 2 auf 3, 1, 2. Was bedeutet das nun? Der Originalwert von x, der eine reine 3:2-Matrix ist,
wird nun eine 3D-Matrix, ein 3D-Tensor. Achten Sie auf die Anzahl
an geöffneten eckigen Klammern. Es gibt keine Änderung bei den
Zahlen, die gespeichert werden. Wir haben bereits über 
Segmentierung gesprochen. Das ist eine Möglichkeit,
einen Teil des Tensors zu extrahieren. Wir haben uns aber die Tastenkombinations-
Syntax angesehen, um mit eckigen Klammern die gewünschten Reihen
und Spalten zu bestimmen. tf.slice ist hierfür 
eine Langform-Möglichkeit, Wir fordern tf.slice hier auf, Daten aus x zu ziehen. Wir sagen, dass an Position 0, 1
begonnen werden soll und dass zwei Reihen und eine Spalte
herausgezogen werden sollen. Verstehen Sie, warum Sie 
die Zahlen 2 und 5 erhalten? Hier ein kleines Quiz: Wie würden Sie den Aufruf tf.slice bzgl.
der Syntax mit eckigen Klammern schreiben? Antwort: x, eckige Klammer, die für Sie relevanten Reihen sind 0–2, also 0 und 1, und die relevanten 
Spalten sind 1–2, also nur 1. squeeze ist der 
inverse Vorgang zu expand_dims. Mit expand_dims 
können Sie eine Dimension der Größe 1 an beliebiger Stelle im Tensor einfügen. Mit squeeze können Sie 
Dimensionen der Größe 1 von einer Tensorform entfernen. Bei diesem Tensor 
handelt es sich um einen 3D-Tensor. Achten Sie auf die 
Anzahl an eckigen Klammern. t ist ein 3D-Tensor. Ich führe squeeze auf t aus und
erhalte einen kompakteren 2D-Tensor. Der ursprüngliche Tensor hatte die Form
1:2:4 und der squeeze-Tensor nur 2:4. Sie benötigen expand_dims 
und squeeze nicht unbedingt, Sie können einfach reshape nutzen,
aber Ihr Code wird selbsterklärender, wenn Sie zeigen, dass Sie 
eine Dimension der Größe 1 einfügen oder entfernen,
um Skalare in Tensoren umzuwandeln, und es mit einer 2:4-Matrix
als 3D-Tensorform (1:2:4) oder als 2D-Tensorform (2:4), abhängig
vom Kontext des Codes zu tun haben.