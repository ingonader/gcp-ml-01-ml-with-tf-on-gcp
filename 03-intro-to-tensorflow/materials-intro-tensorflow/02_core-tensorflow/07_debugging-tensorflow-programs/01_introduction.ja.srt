1
00:00:00,000 --> 00:00:02,160
前回のラボで行った

2
00:00:02,160 --> 00:00:06,975
三角形の面積の計算では

3
00:00:06,975 --> 00:00:10,390
TensorFlowコードを

4
00:00:10,390 --> 00:00:14,455
ゼロから書いてみましたか

5
00:00:14,455 --> 00:00:15,735
その場合は

6
00:00:15,735 --> 00:00:20,185
コンパイラやランタイムの
エラーが出たかもしれません

7
00:00:20,185 --> 00:00:26,715
今回は デバッグの方法を
説明しましょう

8
00:00:26,715 --> 00:00:29,705
TensorFlowは遅延評価パラダイムなので

9
00:00:29,705 --> 00:00:33,405
デバッグは 
難しいことがあります

10
00:00:33,405 --> 00:00:35,530
グラフにエラーがあっても

11
00:00:35,530 --> 00:00:39,770
実行するまでわかりません

12
00:00:39,770 --> 00:00:44,460
プログラム開発では
tf.eagerが有用ですが

13
00:00:46,320 --> 00:00:48,740
万能策ではありません

14
00:00:48,740 --> 00:00:51,505
対話型で開発する場合も

15
00:00:51,505 --> 00:00:54,560
TensorFlowでのデバッグ方法を

16
00:00:54,560 --> 00:00:56,540
知っておく必要があります

17
00:00:56,540 --> 00:01:01,860
では 詳しく見ていきましょう

18
00:01:01,900 --> 00:01:06,600
他のプログラムと同様に
デバッグでは

19
00:01:06,600 --> 00:01:09,489
エラーメッセージと

20
00:01:09,489 --> 00:01:15,660
スタックトレースから
問題のメソッドを特定します

21
00:01:15,660 --> 00:01:17,690
こうすることで

22
00:01:17,690 --> 00:01:22,165
問題のあるメソッドをのみを
呼び出します

23
00:01:22,165 --> 00:01:26,290
データセットで
プログラム全体を実行して

24
00:01:26,290 --> 00:01:30,250
デバッグするのは
好ましくないため

25
00:01:30,250 --> 00:01:33,870
仮のデータをメソッドに入力して

26
00:01:33,870 --> 00:01:38,330
エラーを再現させて
修正を試みるとよいでしょう

27
00:01:38,330 --> 00:01:41,535
では 具体的に見ていきましょう

28
00:01:41,535 --> 00:01:45,930
すべてを紹介することはできませんが

29
00:01:45,930 --> 00:01:49,430
よくあるエラーメッセージと

30
00:01:49,430 --> 00:01:52,525
その対処法を説明します

31
00:01:52,525 --> 00:01:55,320
まずは

32
00:01:55,320 --> 00:01:59,390
エラーメッセージが大量に発生しても

33
00:01:59,390 --> 00:02:03,470
慌てずによく確認してください

34
00:02:03,470 --> 00:02:06,490
注目すべき情報は2つあります

35
00:02:06,490 --> 00:02:09,205
1つはスタックトレース

36
00:02:09,205 --> 00:02:14,180
エラーがスローされた時点での
コールスタックです

37
00:02:14,180 --> 00:02:15,699
この例では

38
00:02:15,699 --> 00:02:19,735
メソッド内にs=(a+c)という行があり

39
00:02:19,735 --> 00:02:23,390
some_method(data)に問題があります

40
00:02:23,390 --> 00:02:28,890
プログラムで呼び出された
多数の

41
00:02:28,890 --> 00:02:31,885
ライブラリメソッドも含まれます

42
00:02:31,885 --> 00:02:35,280
そのため 自分のコードに
的を絞ります

43
00:02:35,280 --> 00:02:36,940
次に

44
00:02:36,940 --> 00:02:41,615
実際のエラーメッセージを確認します

45
00:02:41,615 --> 00:02:45,720
この例では
値エラーが発生しています

46
00:02:45,720 --> 00:02:47,305
等しいはずの次元の数が

47
00:02:47,305 --> 00:02:51,040
等しくありません

48
00:02:51,040 --> 00:02:53,830
なぜでしょう

49
00:02:53,830 --> 00:02:57,375
aとcを加算する場合

50
00:02:57,375 --> 00:03:03,605
aが2次元テンソルなら
cも同じである必要があります

51
00:03:03,605 --> 00:03:06,045
aが4次元テンソルなら

52
00:03:06,045 --> 00:03:09,220
cも4次元でなければなりません

53
00:03:09,220 --> 00:03:14,370
しかし この場合はaかcのいずれかが

54
00:03:14,370 --> 00:03:18,900
[4, 2]という形状の2次元テンソルで

55
00:03:18,900 --> 00:03:21,695
もう一方は[4]という形状の

56
00:03:21,695 --> 00:03:24,370
1次元テンソルです

57
00:03:24,370 --> 00:03:28,535
明らかにプログラムの問題です

58
00:03:28,535 --> 00:03:31,020
両方を[4, 2] または

59
00:03:31,020 --> 00:03:33,855
[4]に揃えれば

60
00:03:33,855 --> 00:03:38,010
コールスタックを見つけて
エラーメッセージを

61
00:03:38,010 --> 00:03:40,270
理解できます

62
00:03:40,270 --> 00:03:42,370
コールスタックを調べて

63
00:03:42,370 --> 00:03:46,180
該当する行とメソッド名を
特定したら

64
00:03:46,180 --> 00:03:48,790
次にメソッドを詳しく調べます

65
00:03:48,790 --> 00:03:52,565
ここでは some_methodというメソッドが

66
00:03:52,565 --> 00:03:55,320
dataというテンソルを使用します

67
00:03:55,320 --> 00:04:01,075
このテンソルに
架空のデータを入れます

68
00:04:01,075 --> 00:04:03,805
プログラムの残りの部分や

69
00:04:03,805 --> 00:04:08,155
データの読み取り方法については
忘れてください

70
00:04:08,155 --> 00:04:11,735
メソッドを呼び出すには

71
00:04:11,735 --> 00:04:14,990
セッションを作成して

72
00:04:14,990 --> 00:04:19,190
ハードコーディングで
テンソル配列を作成します

73
00:04:19,190 --> 00:04:22,090
ここでは 4行×3列の

74
00:04:22,090 --> 00:04:27,150
fake_data（架空データ）を作成し

75
00:04:27,150 --> 00:04:31,105
some_methodに渡します

76
00:04:31,105 --> 00:04:37,475
print文で一部のデータの
コードを詳しく書き出します

77
00:04:37,475 --> 00:04:40,910
この方法はやや古いですが

78
00:04:40,910 --> 00:04:44,260
最も簡単に形状エラーを診断できます

79
00:04:44,260 --> 00:04:47,505
aとcを加算する際に

80
00:04:47,505 --> 00:04:49,780
問題が発生したので

81
00:04:49,780 --> 00:04:52,840
aとcの形状を出力します

82
00:04:52,840 --> 00:04:56,049
プログラムを実行すると

83
00:04:56,049 --> 00:04:58,770
最初の行では[4,2]が

84
00:04:58,770 --> 00:05:01,715
次の行では[4]が出力されます

85
00:05:01,715 --> 00:05:04,555
値エラーメッセージのとおりです

86
00:05:04,555 --> 00:05:07,365
この先の手順は
目的次第です

87
00:05:07,365 --> 00:05:11,620
cで[4, 2]行列を
スライスするか

88
00:05:11,630 --> 00:05:15,085
aで1次元ベクトルを
スライスするか

89
00:05:15,085 --> 00:05:18,355
目的に合わせてください

90
00:05:18,355 --> 00:05:20,349
プログラムを実行すると

91
00:05:20,349 --> 00:05:22,970
最初の行では[4, 2]

92
00:05:22,970 --> 00:05:26,430
次の行では[4]が出力されます

93
00:05:26,430 --> 00:05:28,995
値エラーメッセージのとおりです

94
00:05:28,995 --> 00:05:31,620
この先は目的次第です

95
00:05:31,620 --> 00:05:35,750
cで[4, 2]行列を
スライスするか

96
00:05:35,750 --> 00:05:39,115
aで1次元ベクトルを
スライスするか

97
00:05:39,115 --> 00:05:42,080
どちらも可能です