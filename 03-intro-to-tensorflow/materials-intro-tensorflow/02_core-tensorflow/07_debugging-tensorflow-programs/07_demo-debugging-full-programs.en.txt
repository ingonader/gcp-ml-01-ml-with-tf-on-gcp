So here I am in the GitHub repository of the course. And I'm in the 03_TensorFlow, this chapters that we're doing. And let me go ahead and open the debug_demo. And let's look at some of the things that we talked about in the chapter. So here, let me go ahead and import TensorFlow. And here's a first example that we looked at. We had data and we were basically slicing and getting all of the rows of data, and we were getting two of the columns and see we are getting all of the rows but we're getting only one column, and so now when we add a and c, we're going to run into a shape error, and that's exactly what we run into. And you notice that at the very bottom of the stack trace the error message, you get your value error. Dimensions must be equal, but they are two and four. The first one is a 2D tensor for coma two, the second one is a 1D tensor of four. And then when you walk up the stack trace, you'll see that this particular one; common_shapes.python, this is not ours, this is way back in TensorFlow. So we can't ignore it. This one's also in TensorFlow so we can ignore it. As is this, this one is also TensorFlow so is that. So this is all TensorFlow we can keep ignoring it and I'm keeping on scrolling until I find something that's in my code. So there is sum method and that's in my code and there is the method called s equals a plus c, it's pointing out that this is the problem. And this of course gets called from session that run but we're going ignore that because that's the problem here, s equals a plus c. So let's go ahead and look at this and say where could the value error have happened. And we go in and we say s equals a plus c all right, right. If you're adding two things and we know that according to linear algebra rules, when we added two tensors they have to have the exact same shape, that's the only way it works. So now we can go ahead and try to fix it. So in this case what I'm doing is I'm going to go ahead and create fake data, I'm passing in my fake data that is my, what is the shape here? It's a four by three matrix. I'm passing it in and I'm passing going ahead and getting s shape printing out c shape. And now let me go ahead and run this cell. And when I run the cell, I basically get that the shape of a is four coma two and the shape of c is four and that tells me okay I now know what was a problem and then question becomes how do I fix it? And the way that you would fix it, is to basically make sure that both of these are the same shape. So I might get 0-2 in the first instance, and 1-3, in other words the sliding window, we are removing the one each time. The stride, when we talk about images you will basically learn about this term ''the stride''. The stride is one and the size of my window is two. So that's exactly what I'm doing. And now when I run it, it should work perfectly and I basically get back the sum that is a result of the sliding window. So that is essentially the process that you go through to debug your code. Read the call trace, read the error message, find out where problem is and having found out the problem, fix it, make sure that it works on your fake data. And then you can try it back on your full large data set and hopefully everything works. Similarly, we talked about a type error and that's exactly the same process. In this case, I'm adding a and b, a is basically floating point numbers, b is basically integers, it's not going to work. And then I'm going to go ahead and look at these [inaudible] , look at the error message and learn that in order to fix it, one way would be to take b which is originally just integers and go ahead and do a cast. And we're going to do the cast, things will work, and that is the basic idea here.