1
00:00:00,000 --> 00:00:01,920
En las próximas lecciones

2
00:00:01,920 --> 00:00:05,185
veremos formas
de resolver problemas comunes.

3
00:00:05,185 --> 00:00:07,167
Comenzaremos con los errores de forma.

4
00:00:07,167 --> 00:00:10,386
Luego, veremos
una variante de estos errores

5
00:00:10,386 --> 00:00:13,716
relacionada con una discordancia
entre valores escalares y vectoriales.

6
00:00:13,716 --> 00:00:17,520
Por último, veremos
problemas de tipos de datos.

7
00:00:18,200 --> 00:00:20,750
Vimos este código en la lección anterior

8
00:00:20,750 --> 00:00:23,670
y dijimos que la razón
por la que esta suma falló

9
00:00:23,670 --> 00:00:28,115
es que tanto a como c
deben tener la misma forma.

10
00:00:28,685 --> 00:00:32,870
Cuál de las dos formas es correcta
dependerá de la intención del código.

11
00:00:32,870 --> 00:00:38,500
En este caso, el método intenta
tomar la matriz original de 4 x 3

12
00:00:38,500 --> 00:00:42,055
para obtener ventanas deslizantes
de tamaño constante.

13
00:00:42,055 --> 00:00:46,050
Estas ventanas deben ser de 4 x 2.

14
00:00:46,050 --> 00:00:49,040
Entonces, a era correcta,
pero c era incorrecto.

15
00:00:49,690 --> 00:00:54,995
¿Cómo convertimos c a la forma [4, 2]?

16
00:00:55,765 --> 00:00:59,890
Puede cambiar c para que,
en lugar de dividir todas las filas

17
00:00:59,890 --> 00:01:01,370
solo en la columna uno

18
00:01:01,370 --> 00:01:06,495
divida todas las filas,
pero en las columnas uno y dos.

19
00:01:06,495 --> 00:01:12,180
Recuerde que los rangos de Python incluyen
el primer número, pero no el segundo.

20
00:01:12,305 --> 00:01:18,030
Entonces, a obtiene la columna cero y uno,
y c obtiene las columnas uno y tres

21
00:01:18,030 --> 00:01:21,735
dividiendo ventanas
de dos columnas cada vez.

22
00:01:21,735 --> 00:01:25,685
Cuando ejecutamos el programa,
todo funciona correctamente.

23
00:01:26,385 --> 00:01:31,250
Los problemas de forma
también ocurren por el tamaño de lote.

24
00:01:31,670 --> 00:01:35,055
Recuerde que cuando hablé
sobre las formas de los tensores

25
00:01:35,055 --> 00:01:40,185
dije que a veces una o más dimensiones
pueden tener una longitud variable.

26
00:01:40,185 --> 00:01:43,490
Una razón común
para los tensores de longitud variable

27
00:01:43,490 --> 00:01:47,275
es cuando se escribe
un programa que usa lotes.

28
00:01:47,335 --> 00:01:49,970
Por lo general,
los lotes son del mismo tamaño.

29
00:01:49,970 --> 00:01:53,285
Digamos, 64 elementos cada vez

30
00:01:53,285 --> 00:01:57,065
excepto cuando llegamos
al final del archivo de entrada.

31
00:01:57,065 --> 00:01:58,459
En ese momento

32
00:01:58,459 --> 00:02:02,180
es posible que no queden
64 elementos para llenar el lote

33
00:02:02,180 --> 00:02:07,505
por lo que podría crear un tensor
con solo 42 elementos, por ejemplo.

34
00:02:07,925 --> 00:02:11,450
Por esa razón, la forma
del marcador de posición X

35
00:02:11,450 --> 00:02:14,980
en el código, es None
para la primera dimensión.

36
00:02:14,980 --> 00:02:17,575
None significa
que es de longitud variable.

37
00:02:17,575 --> 00:02:20,150
Si ejecuta print X

38
00:02:20,150 --> 00:02:22,995
obtendrá la salida
del depurador del tensor

39
00:02:22,995 --> 00:02:28,065
que indica que es
un tensor 2D de la forma (?, 3).

40
00:02:28,095 --> 00:02:32,210
Eso significa que la matriz
siempre tiene tres columnas

41
00:02:32,210 --> 00:02:35,670
pero la cantidad de filas puede variar.

42
00:02:35,670 --> 00:02:38,935
Ahora, cuando trate
de inyectar datos de fake_data

43
00:02:38,935 --> 00:02:41,640
¿cuál es la forma de su fake_data?

44
00:02:41,640 --> 00:02:43,355
Es un tensor 1D.

45
00:02:43,355 --> 00:02:46,975
Tiene tres elementos,
pero una sola dimensión.

46
00:02:46,975 --> 00:02:50,955
Y el marcador de posición
espera una matriz de dos dimensiones.

47
00:02:50,955 --> 00:02:53,110
Puede tener cualquier cantidad de filas

48
00:02:53,110 --> 00:02:57,450
incluso una sola, 
pero tiene que ser una matriz 2D.

49
00:02:57,880 --> 00:03:00,320
¿Cómo corregir ese problema?

50
00:03:00,320 --> 00:03:03,755
No es tan simple
como corregir la división, ¿correcto?

51
00:03:04,945 --> 00:03:08,640
La respuesta es
que necesita cambiar la forma.

52
00:03:08,640 --> 00:03:13,015
La coerción de la forma
se puede realizar con estos métodos.

53
00:03:13,015 --> 00:03:15,880
Ya vimos tf.reshape()

54
00:03:15,880 --> 00:03:19,300
que toma los números disponibles
y los organiza de una forma diferente

55
00:03:19,300 --> 00:03:21,540
y eso es lo que necesitamos
para este problema.

56
00:03:21,540 --> 00:03:24,190
Tenemos tres números, que son suficientes

57
00:03:24,190 --> 00:03:28,475
pero tenemos un tensor 1D
cuando necesitamos uno 2D.

58
00:03:28,475 --> 00:03:31,370
Podemos usar
reshape y enviarlo.