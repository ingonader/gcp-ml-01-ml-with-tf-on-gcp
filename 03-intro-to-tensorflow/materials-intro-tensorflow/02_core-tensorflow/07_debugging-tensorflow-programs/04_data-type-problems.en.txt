Besides the shape errors that we looked at in the previous lessons, another common error that you will run into when developing TensorFlow programs are data type errors. The error message here says that you have a Tensor whose values are all stored as integer arrays, but you're passing it to a method that expects a Tensor to have floating point values. Where might something like this happen? Perhaps you look at the call trace and the line of code that gets identified is the addition line here, s equals a plus b. So, maybe a is an array of floats while b is an array of ints. Now, you're thinking that you can add a floating point number to an integer, no problem, this should be automatic, the result is a floating point number. But neither Python nor C++ lets you out of floating point array to an integer array. There's a lot of storage optimizations involved, and if you have an integer array the data might be stored on a device or part of memory where it's simply not possible to do floating point arithmetic. So, you've got to fix it. Are you going to round off the floating point values to integers? So, did you make a mistake and the floating-point array was really supposed to be an integer array? Or do you want to cast the integers to floating point values and do the addition knowing that the result is now a floating point array? Because there are several possible choices here, TensorFlow is asking you to be more clear. So, one way to fix the problem is to take the integer array b and say that we now want it to be a Tensor of floating point values. So, this call to tf dot cast will get inserted into the computation graph and the optimizations etc will take that into account when deciding where to store b and how to move b around. So here, we are adding the tf dot cast operation into the method to fix it.