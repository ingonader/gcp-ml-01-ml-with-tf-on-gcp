1
00:00:00,000 --> 00:00:01,920
Während der nächsten Kurse

2
00:00:01,920 --> 00:00:05,145
sehen wir uns an, wie wir
häufige Probleme lösen können.

3
00:00:05,145 --> 00:00:07,550
Wir beginnen mit Formfehlern

4
00:00:07,550 --> 00:00:10,250
und sehen uns dann
eine Variante von Formfehlern

5
00:00:10,250 --> 00:00:13,525
mit einer fehlenden 
Übereinstimmung von Skalar-Vektoren an.

6
00:00:13,525 --> 00:00:17,320
Zuletzt schauen wir uns 
Probleme mit Datentypen an.

7
00:00:18,410 --> 00:00:21,040
Diesen Code haben wir
im vorherigen Kurs gesehen.

8
00:00:21,040 --> 00:00:28,705
Die Addition ist fehlgeschlagen, 
da a und c die gleiche Form haben müssen.

9
00:00:28,705 --> 00:00:33,200
Welche der beiden Formen richtig ist,
ist von der Rolle des Codes abhängig.

10
00:00:33,200 --> 00:00:35,160
Hier versuchte die Methode,

11
00:00:35,160 --> 00:00:38,450
die ursprüngliche 
4x3-Matrix zu nehmen

12
00:00:38,450 --> 00:00:42,195
und fließende Fenster einer 
konstanten Größe zu erstellen.

13
00:00:42,195 --> 00:00:44,580
Diese fließenden Fenster mussten

14
00:00:44,580 --> 00:00:46,070
4 mal 2 sein.

15
00:00:46,070 --> 00:00:49,760
Also war a richtig, aber c war falsch.

16
00:00:49,760 --> 00:00:54,555
Wie erhalten Sie c auch als 4,2?

17
00:00:55,925 --> 00:01:01,310
Sie könnten c von einer 
Segmentierung aller Zeilen und Spalte 1

18
00:01:01,310 --> 00:01:03,325
auf eine Segmentierung aller Zeilen ändern

19
00:01:03,325 --> 00:01:06,485
aber die Spalten 1 und 2 erhalten.

20
00:01:06,485 --> 00:01:07,480
Erinnern Sie sich:

21
00:01:07,480 --> 00:01:10,410
Im Python-Bereich
ist die erste Zahl eingeschlossen,

22
00:01:10,410 --> 00:01:12,125
aber die zweite Zahl nicht.

23
00:01:12,125 --> 00:01:15,500
Damit erhält a die Spalte 0 und 1,

24
00:01:15,500 --> 00:01:18,380
und c erhält die Spalten 1 und 3.

25
00:01:18,380 --> 00:01:21,965
Damit werden Fenster 
jedes Mal in zwei Spalten segmentiert.

26
00:01:21,965 --> 00:01:23,785
Wenn wir das Programm jetzt ausführen,

27
00:01:23,785 --> 00:01:26,435
funktioniert es richtig.

28
00:01:26,435 --> 00:01:31,590
Formfehler entstehen
auch aufgrund von Batchgröße.

29
00:01:31,590 --> 00:01:35,005
Als ich von Tensor-Formen sprach,

30
00:01:35,005 --> 00:01:38,225
erwähnte ich, dass manchmal
eine oder mehrere Dimensionen

31
00:01:38,225 --> 00:01:40,365
eine variable Länge haben.

32
00:01:40,365 --> 00:01:43,570
Häufig sehen Sie 
Tensoren mit variabler Länge,

33
00:01:43,570 --> 00:01:47,465
wenn Sie ein Programm
für Batches schreiben.

34
00:01:47,465 --> 00:01:50,170
Batches haben in der Regel dieselbe Größe,

35
00:01:50,170 --> 00:01:53,625
z. B. jedes Mal 64 Beispiele,

36
00:01:53,625 --> 00:01:57,045
außer wenn wir ans Ende
der Eingabedatei kommen.

37
00:01:57,045 --> 00:01:59,029
Hier haben Sie möglicherweise

38
00:01:59,029 --> 00:02:02,070
keine 64 Beispiele für den Batch

39
00:02:02,070 --> 00:02:07,385
und erstellen einen 
Tensor mit nur 42 Beispielen.

40
00:02:07,955 --> 00:02:12,280
Die Form des Platzhalters x im Code

41
00:02:12,280 --> 00:02:14,990
ist daher für die erste Dimension "None".

42
00:02:14,990 --> 00:02:17,565
"None" bedeutet,
dass es eine variable Länge gibt.

43
00:02:17,565 --> 00:02:20,150
Wenn Sie den Wert x ausgeben,

44
00:02:20,150 --> 00:02:25,855
erhalten Sie die Ausgabe zur
Fehlerbehebung für den 2D-Tensor.

45
00:02:25,855 --> 00:02:28,625
Das ist ?,3.

46
00:02:28,625 --> 00:02:35,190
Die Matrix hat also immer drei Spalten,
aber die Anzahl der Reihen kann variieren.

47
00:02:35,970 --> 00:02:39,155
Wenn Sie jetzt versuchen,
fiktive Daten einzuspeisen,

48
00:02:39,155 --> 00:02:41,740
haben Ihre fiktiven Daten

49
00:02:41,740 --> 00:02:43,435
die Form eines 1D-Tensor.

50
00:02:43,435 --> 00:02:47,145
Er hat drei Elemente, aber ist 1D.

51
00:02:47,145 --> 00:02:50,845
Der Platzhalter erwartet
hingegen eine 2D-Matrix.

52
00:02:50,845 --> 00:02:54,640
Sie können beliebig viele 
Zeilen oder eine Zeile haben,

53
00:02:54,640 --> 00:02:57,900
aber Sie müssen eine 2D-Matrix haben.

54
00:02:57,900 --> 00:03:00,560
Wie beheben Sie dieses Problem?

55
00:03:00,560 --> 00:03:04,115
Sie können nicht einfach
Ihre Segmentierung ändern.

56
00:03:04,845 --> 00:03:08,420
Stattdessen müssen Sie die Form ändern

57
00:03:08,420 --> 00:03:13,055
Mit diesen Methoden
können Sie die Form gestalten.

58
00:03:13,055 --> 00:03:15,920
Wir haben schon 
tf.reshape gesehen.

59
00:03:15,920 --> 00:03:19,150
Hiermit werden Ihre Zahlen
in eine andere Form geändert.

60
00:03:19,150 --> 00:03:21,390
Genau das brauchen wir für dieses Problem.

61
00:03:21,390 --> 00:03:22,660
Wir haben drei Zahlen,

62
00:03:22,660 --> 00:03:24,120
die ausreichend sind,

63
00:03:24,120 --> 00:03:28,705
aber wir haben einen 1D-Tensor
und brauchen einen 2D-Tensor.

64
00:03:28,705 --> 00:03:31,770
Wir können diesen 
mit "reshape" ändern und mitsenden.