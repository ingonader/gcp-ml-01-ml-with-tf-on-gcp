これはコースのGitHubリポジトリです 03_TensorFlowの中です これが実行中の章です debug_demoを開きます この章でお話ししたことを
いくつか見てみましょう TensorFlowをインポートします これが最初の例です すべてのデータ行を
スライスして取得します cではすべての行と 1列だけを取得します aとcを加算すると 形状エラーが 発生します 「 次元は同じでなければならないが
2と4がある」 という値エラーメッセージが見えます 最初は2次元テンソル 4, 2 2番目は1次元テンソル 4です 上に戻ると common_shapes.pycがあります これは 関係ないので 無視できます これも無視できます これもTensorFlowです すべてTensorFlowなので
無視します スクロールしていくと
やがてコード内にある some_methodが見つかります s=a+c いうメソッドがあります これが問題です 実行中のセッションから
呼び出されますが それは無視します さて これを調べて エラーの場所を特定します ここにs=a+cがあります 2つを加算するとき
テンソルはまったく同じ 形状である必要があります でないと機能しません では 問題を修正しましょう この場合 fake（架空）データを作成します この架空データを渡しますが その形状は4x3行列です これを渡して さらに aの形状を取得し
cの形状を出力します このセルを 実行すると aの形状は4, 2
cの形状は4です これで原因がわかりました 次は これを
どうやって修正するかです それは テンソルを同じ形状にすることです 最初のインスタンスは 0:2です 次は1:3で 毎回1つ削除します イメージについては 「ストライド」という用語を
覚えてください ストライドを1 ウインドウのサイズを2にして 実行してみると 機能します スライドウィンドウの結果が戻ります このように
コードをデバッグします 呼び出しトレースを調べ エラーメッセージを見て 問題の場所と
原因を特定します 修正して
架空データで確認します 次にデータ全体で
再試行します 型エラーでも
プロセスはまったく同じです aとbを足しますが aは浮動小数点数で bは整数ですので 動作しません スタックトレースを調べて エラーメッセージを見て判断します 1つの方法は
整数であるbを キャストすることです これが基本的な考え方です