Estoy en el repositorio
de GitHub del curso. Estoy en "03_tensorflow",
el capítulo que estamos viendo. Abriré "debug_demo". Veamos algunos de los temas
de los que hablamos en este capítulo. Voy a importar TensorFlow. Aquí tenemos
el primer ejemplo de lo que vimos. Tenemos datos que dividimos
para obtener todas las filas de datos. Obtenemos dos columnas. En c, obtenemos
todas las filas, pero solo una columna. Entonces, cuando sumemos a y c y se generará un error de forma. Y eso es justo lo que ocurre. Observe que al final
del seguimiento de pila el mensaje de error,
se indica que hay un error de valor. Las dimensiones deben
ser iguales, pero son 2 y 4. La primera es un tensor 2D de [4, 2] y la segunda es un tensor 1D de [4]. Cuando revisamos el seguimiento de pila vemos este elemento
common_shapes.python, que no es nuestro. Es de TensorFlow. Podemos ignorarlo. Este también es de TensorFlow, 
entonces lo ignoramos. Y este también es de TensorFlow, y ese. Todos estos son
de TensorFlow y podemos ignorarlos. Sigo desplazándome hasta encontrar
algo que le pertenezca a mi código. Allí está some_method,
que pertenece a mi código y está la llamada
al método: s = a + c. Me señala que este es el problema. Y esto se llama desde sess.run pero lo ignoraremos
porque este es el problema, s = a + c. Veamos esto para encontrar
el origen del error de valor. Subimos y vemos que s = a + c… Claro. Sumamos dos elementos, pero sabemos
que según las reglas del álgebra lineal para sumar dos tensores,
estos deben tener la misma forma. De otra forma, no funciona. Ahora, podemos intentar corregirlo. En este caso, lo que haré
es crear datos ficticios. Pasaré mis datos ficticios… ¿Cuál es la forma aquí? Es una matriz de 4 x 3. Pasaré… Busco la forma de a
y muestro la forma de c. Ahora, ejecutaré esta celda. Cuando lo hago, me indica que a forma de a es (4, 2) y la forma de c es (4). entonces, ya sé cuál es el problema y la pregunta ahora es, ¿cómo lo arreglo? La forma de hacerlo es asegurarse de
que ambos tengan la misma forma. Es posible que obtenga 0:2
en la primera instancia y 1:3, en otras palabras,
la ventana deslizante que estamos moviendo una cada vez. La zancada (stride), cuando hablamos de imágenes, aprenderán
sobre este término "la zancada". La zancada es 1
y el tamaño de mi venta es 2. Eso es lo que hago. Y cuando lo ejecuto debería funcionar perfectamente y, básicamente,
obtengo la suma que es el resultado de la ventana deslizante. Ese básicamente es el proceso
que se sigue para depurar el código. Leer el seguimiento de las llamadas leer el mensaje de error encontrar dónde está el problema
y después de encontrarlo corregirlo, asegurarse de que funciona
con los datos ficticios. Y, luego, pueden probar
de nuevo con el conjunto de datos y con suerte todo debería funcionar. De manera similar,
hablamos de un error de tipo y es exactamente el mismo proceso.
En este caso, estoy sumando a y b a son números de punto flotante b son enteros no va a funcionar. Revisaré el seguimiento de pila analizaré el mensaje de error
y descubriré que para corregirlo una forma sería tomar b,
que son originalmente enteros y aplicar cast. Y después de hacerlo, todo funcionará. Y esa es la idea en esencia.