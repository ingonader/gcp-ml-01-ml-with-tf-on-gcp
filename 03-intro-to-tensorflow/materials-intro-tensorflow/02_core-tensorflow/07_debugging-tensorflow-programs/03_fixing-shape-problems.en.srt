1
00:00:00,000 --> 00:00:04,440
tf.expand_dims is a way of changing

2
00:00:04,440 --> 00:00:09,335
the shape by inserting a dimension of 1 into a tensor shape.

3
00:00:09,335 --> 00:00:12,790
So, we have x, which is a 3/2 matrix.

4
00:00:12,790 --> 00:00:15,830
When we call tf.expand_dims on x,

5
00:00:15,830 --> 00:00:20,985
we specify which dimension we want to insert a new thing at.

6
00:00:20,985 --> 00:00:24,770
We say one, which in Python means a second place,

7
00:00:24,770 --> 00:00:26,520
0 will mean first place.

8
00:00:26,520 --> 00:00:29,500
So, the expanded shape changes from 3,

9
00:00:29,500 --> 00:00:32,415
2 to 3, 1, 2.

10
00:00:32,415 --> 00:00:34,745
What does this actually mean?

11
00:00:34,745 --> 00:00:36,965
The original value of x,

12
00:00:36,965 --> 00:00:43,275
which is a neat 3/2 matrix now becomes a 3D matrix, a 3D tensor.

13
00:00:43,275 --> 00:00:46,475
Notice the number of opening square brackets.

14
00:00:46,475 --> 00:00:50,400
There is no change to the actual numbers that are stored.

15
00:00:50,400 --> 00:00:53,130
We have already looked at slicing.

16
00:00:53,130 --> 00:00:56,460
So, this is a way of extracting part of a tensor,

17
00:00:56,460 --> 00:01:01,570
but we looked at the shortcut syntax of simply specifying its square brackets,

18
00:01:01,570 --> 00:01:03,680
the rows and columns we wanted.

19
00:01:03,680 --> 00:01:07,805
tf.slice is a long form way of doing that.

20
00:01:07,805 --> 00:01:12,450
We are asking tf.slice here to pull data out of x.

21
00:01:12,450 --> 00:01:14,940
We're telling it to start at position 0,

22
00:01:14,940 --> 00:01:18,645
1 and pull out two rows and one column.

23
00:01:18,645 --> 00:01:22,530
So, do you understand why you get the numbers 2 and 5?

24
00:01:22,530 --> 00:01:24,135
It's a quick quiz.

25
00:01:24,135 --> 00:01:31,240
How would you write the tf.slice call here in terms of the square brackets syntax?

26
00:01:32,030 --> 00:01:35,760
Answer, x square bracket,

27
00:01:35,760 --> 00:01:38,680
the rows that you want are 0-2,

28
00:01:38,680 --> 00:01:44,540
so 0 and 1 and the columns that you want are 1-2 so just 1.

29
00:01:44,830 --> 00:01:50,055
Squeeze is the inverse operation to expand dims.

30
00:01:50,055 --> 00:01:56,840
Expand dims lets you insert a dimension of size one anywhere within the tensor.

31
00:01:56,840 --> 00:02:02,010
Squeeze lets you remove dimensions of size one from the shape of a tensor.

32
00:02:02,010 --> 00:02:05,370
So, here I have a tensor that's a 3D tensor.

33
00:02:05,370 --> 00:02:07,905
Note the number of square brackets.

34
00:02:07,905 --> 00:02:10,435
T is a 3D tensor.

35
00:02:10,435 --> 00:02:17,205
I call squeeze passing in t and I get back a 2D tensor that's more compact.

36
00:02:17,205 --> 00:02:25,235
The original tensor had the shape 1/2/4 and the squeeze tensor has the shape just 2/4.

37
00:02:25,235 --> 00:02:29,815
To be sure, you don't really need expand dims and squeeze,

38
00:02:29,815 --> 00:02:31,679
you can simply use reshape,

39
00:02:31,679 --> 00:02:37,220
but your code will be a bit more self-explanatory if you explain that you're inserting or

40
00:02:37,220 --> 00:02:43,770
removing a dimension one to convert the scalars to tensors are basically dealing with 1,

41
00:02:43,770 --> 00:02:47,734
2/4 matrix as either a 3D tensor of shape,

42
00:02:47,734 --> 00:02:53,480
1/2/4 or as a 2D tensor of shape 2/4 depending on the context of the code.