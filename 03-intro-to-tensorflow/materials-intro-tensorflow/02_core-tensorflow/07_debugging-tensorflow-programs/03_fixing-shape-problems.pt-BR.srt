1
00:00:00,000 --> 00:00:04,440
tf.expand_dims é uma maneira de alterar

2
00:00:04,440 --> 00:00:09,335
o formato inserindo uma dimensão de 1
em um formato de tensor.

3
00:00:09,335 --> 00:00:12,790
Então, temos x, que é uma matriz de 3x2.

4
00:00:12,790 --> 00:00:15,830
Quando chamamos tf.expand_dims em x,

5
00:00:15,830 --> 00:00:20,985
especificamos em qual dimensão
queremos inserir algo novo.

6
00:00:20,985 --> 00:00:24,770
Vamos dizer 1, que em Python
quer dizer a segunda posição,

7
00:00:24,770 --> 00:00:26,520
0 significa a primeira.

8
00:00:26,520 --> 00:00:30,250
Assim, o formato expandido muda de 3, 2

9
00:00:30,250 --> 00:00:32,415
para 3, 1, 2.

10
00:00:32,415 --> 00:00:34,745
O que isso significa?

11
00:00:34,745 --> 00:00:36,965
O valor original de x,

12
00:00:36,965 --> 00:00:43,275
que é uma matriz 3x2 pura, agora se torna
uma matriz 3D, um tensor 3D.

13
00:00:43,275 --> 00:00:46,475
Observe o número de colchetes.

14
00:00:46,475 --> 00:00:50,400
Não há alteração
nos números reais armazenados.

15
00:00:50,400 --> 00:00:53,130
Nós já analisamos o corte.

16
00:00:53,130 --> 00:00:56,460
Então, essa é uma maneira
de extrair parte de um tensor,

17
00:00:56,460 --> 00:01:01,570
mas olhamos a sintaxe do atalho
simplesmente especificando os colchetes,

18
00:01:01,570 --> 00:01:03,680
as linhas e as colunas que queríamos.

19
00:01:03,680 --> 00:01:07,805
tf.slice é uma forma longa de fazer isso.

20
00:01:07,805 --> 00:01:12,450
Estamos pedindo que o tf.slice aqui
extraia dados de x.

21
00:01:12,450 --> 00:01:15,600
Estamos dizendo
para começar na posição 0, 1

22
00:01:15,600 --> 00:01:18,645
e extrair duas linhas e uma coluna.

23
00:01:18,645 --> 00:01:22,530
Então, você entende por que
recebe os números 2 e 5?

24
00:01:22,530 --> 00:01:24,135
É um teste rápido.

25
00:01:24,135 --> 00:01:30,910
Como você escreveria a chamada tf.slice
aqui em termos da sintaxe dos colchetes?

26
00:01:32,950 --> 00:01:35,760
Resposta: x colchete,

27
00:01:35,760 --> 00:01:40,530
as linhas que você quer são de 0 a 2,
então 0 e 1,

28
00:01:40,530 --> 00:01:44,070
e as colunas que você quer
são de 1 a 2, então apenas 1.

29
00:01:46,010 --> 00:01:50,055
Squeeze é a operação inversa
a expand_dims.

30
00:01:50,055 --> 00:01:56,840
Expand_dims permite inserir uma dimensão
de tamanho 1 em qualquer lugar no tensor.

31
00:01:56,840 --> 00:02:02,010
Squeeze permite remover as dimensões
de tamanho 1 do formato de um tensor.

32
00:02:02,010 --> 00:02:05,370
Então, aqui tenho um tensor 3D.

33
00:02:05,370 --> 00:02:07,905
Observe o número de colchetes.

34
00:02:07,905 --> 00:02:10,435
T é um tensor 3D.

35
00:02:10,435 --> 00:02:17,205
Chamo squeeze passando em t e recebo
de volta um tensor 2D que é mais compacto.

36
00:02:17,205 --> 00:02:25,235
O tensor original tinha o formato 1x2x4,
e o tensor squeeze é apenas 2x4.

37
00:02:25,235 --> 00:02:29,815
Para ter certeza, você não precisa de
expand_dims e squeeze,

38
00:02:29,815 --> 00:02:32,879
pode simplesmente usar reshape,
mas seu código será

39
00:02:32,879 --> 00:02:37,220
um pouco mais autoexplicativo
se você explicar que a inserção ou

40
00:02:37,220 --> 00:02:43,210
remoção de uma dimensão 1 para converter
os escalares em tensores estão lidando

41
00:02:43,210 --> 00:02:48,484
com uma matriz 2x4 como
um tensor 3D de formato 1x2x4

42
00:02:48,484 --> 00:02:53,270
ou como um tensor 2D de formato 2x4,
dependendo do contexto do código.