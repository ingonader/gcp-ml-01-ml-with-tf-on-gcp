In the next couple of lessons, let's look at ways to solve common problems. We will start with shape errors and then we look at a variant of shape errors having to do with scalar-vector mismatch, and finally, we will look at data type problems. We looked at this code in the previous lesson and said that the reason the addition failed is that both a and c needed to be the same shape. Which of the two shapes is correct depends on what the intent of the cord is? In this case, the method was trying to take the original four by three matrix and trying to do sliding windows of constant size. These sliding windows needed to be four by two. So, a was correct but c was wrong. So, how would you make c also b four comma two? You could change c from slicing all rows and only column one to slicing all rows but getting columns one and two. Recall that in Python ranges, the first number is included but the last number isn't. So, a gets column zero and one and c gets columns one and three, slicing windows of two columns each time. Now, when we run the program, things work correctly. Shape problems can also happen because of batch size. Remember that when I was talking about shapes of tensors, I said that sometimes one or more of the dimensions might be variable length. One common reason for variable length tensors is when you're writing a program that deals with batches. Batches are all usually the same size. For example 64 examples each time, except when it gets to the end of the input file. At that time though, you may not have 64 examples to fill the batch and so you might create a tensor that contains only say 42 examples. That's the reason the shape of the placeholder X in the code is none for the first dimension. None means there is a variable length. If you print the value of X, you will get the debug output of the tensor which tells you that this is the 2D tensor, It's question mark comma three. Meaning the matrix always has three columns but the number of rows might vary. Now when you're trying to feed into fake data, what is the shape of your fake data? It's a 1D tensor. It has three elements, sure, but it's 1D, but the placeholder wants a 2D matrix. You can have any number of rows and one row is acceptable but you have to make it a 2D matrix. So, how do you fix this problem? It's not as simple as correcting your slicing, is it? The answer is that you need to change the shape. Shape coercing can be done with these methods. We've already seen tf that reshape. It takes the numbers you have and puts them into a different shape and that's what we need for this problem. We have three numbers and three numbers are enough, but we have in a 1D tensor and we need it in a 2D tensor. We can do or reshape and send it along.