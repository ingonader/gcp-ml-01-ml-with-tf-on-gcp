1
00:00:00,600 --> 00:00:05,140
tf.expand_dims ist eine 
Möglichkeit, die Form zu ändern,

2
00:00:05,140 --> 00:00:09,615
indem eine Dimension von 1
in eine Tensorform eingefügt wird.

3
00:00:09,615 --> 00:00:12,860
Wir haben hier x, eine 3:2-Matrix.

4
00:00:12,860 --> 00:00:17,240
Wenn wir tf.expand_dims
auf x anwenden, legen wir fest,

5
00:00:17,240 --> 00:00:21,215
in welcher Dimension
wir eine Neuerung einfügen.

6
00:00:21,215 --> 00:00:24,770
Sagen wir 1, was in Python
an zweiter Stelle bedeutet;

7
00:00:24,770 --> 00:00:26,660
0 bedeutet an erster Stelle.

8
00:00:26,660 --> 00:00:32,810
Die erweiterte Form 
ändert sich also von 3, 2 auf 3, 1, 2.

9
00:00:32,810 --> 00:00:34,895
Was bedeutet das nun?

10
00:00:34,895 --> 00:00:36,965
Der Originalwert von x,

11
00:00:36,965 --> 00:00:43,515
der eine reine 3:2-Matrix ist,
wird nun eine 3D-Matrix, ein 3D-Tensor.

12
00:00:43,515 --> 00:00:46,575
Achten Sie auf die Anzahl
an geöffneten eckigen Klammern.

13
00:00:46,575 --> 00:00:50,990
Es gibt keine Änderung bei den
Zahlen, die gespeichert werden.

14
00:00:50,990 --> 00:00:53,470
Wir haben bereits über 
Segmentierung gesprochen.

15
00:00:53,470 --> 00:00:56,560
Das ist eine Möglichkeit,
einen Teil des Tensors zu extrahieren.

16
00:00:56,560 --> 00:01:01,570
Wir haben uns aber die Tastenkombinations-
Syntax angesehen, um mit eckigen Klammern

17
00:01:01,570 --> 00:01:03,890
die gewünschten Reihen
und Spalten zu bestimmen.

18
00:01:03,890 --> 00:01:08,105
tf.slice ist hierfür 
eine Langform-Möglichkeit,

19
00:01:08,105 --> 00:01:10,600
Wir fordern tf.slice hier auf,

20
00:01:10,600 --> 00:01:12,510
Daten aus x zu ziehen.

21
00:01:12,510 --> 00:01:15,410
Wir sagen, dass an Position 0, 1
begonnen werden soll und dass

22
00:01:15,410 --> 00:01:19,035
zwei Reihen und eine Spalte
herausgezogen werden sollen.

23
00:01:19,035 --> 00:01:22,720
Verstehen Sie, warum Sie 
die Zahlen 2 und 5 erhalten?

24
00:01:22,720 --> 00:01:24,375
Hier ein kleines Quiz:

25
00:01:24,375 --> 00:01:31,240
Wie würden Sie den Aufruf tf.slice bzgl.
der Syntax mit eckigen Klammern schreiben?

26
00:01:32,810 --> 00:01:35,760
Antwort: x, eckige Klammer,

27
00:01:35,760 --> 00:01:38,680
die für Sie relevanten Reihen sind 0–2,

28
00:01:38,680 --> 00:01:44,540
also 0 und 1, und die relevanten 
Spalten sind 1–2, also nur 1.

29
00:01:45,710 --> 00:01:50,065
squeeze ist der 
inverse Vorgang zu expand_dims.

30
00:01:50,065 --> 00:01:54,930
Mit expand_dims 
können Sie eine Dimension der Größe 1

31
00:01:54,930 --> 00:01:57,060
an beliebiger Stelle im Tensor einfügen.

32
00:01:57,060 --> 00:02:00,400
Mit squeeze können Sie 
Dimensionen der Größe 1

33
00:02:00,400 --> 00:02:02,310
von einer Tensorform entfernen.

34
00:02:02,310 --> 00:02:05,370
Bei diesem Tensor 
handelt es sich um einen 3D-Tensor.

35
00:02:05,370 --> 00:02:07,905
Achten Sie auf die 
Anzahl an eckigen Klammern.

36
00:02:07,905 --> 00:02:10,785
t ist ein 3D-Tensor.

37
00:02:10,785 --> 00:02:17,205
Ich führe squeeze auf t aus und
erhalte einen kompakteren 2D-Tensor.

38
00:02:17,205 --> 00:02:25,655
Der ursprüngliche Tensor hatte die Form
1:2:4 und der squeeze-Tensor nur 2:4.

39
00:02:25,655 --> 00:02:29,815
Sie benötigen expand_dims 
und squeeze nicht unbedingt,

40
00:02:29,815 --> 00:02:35,159
Sie können einfach reshape nutzen,
aber Ihr Code wird selbsterklärender,

41
00:02:35,159 --> 00:02:39,100
wenn Sie zeigen, dass Sie 
eine Dimension der Größe 1

42
00:02:39,100 --> 00:02:41,990
einfügen oder entfernen,
um Skalare in Tensoren umzuwandeln,

43
00:02:41,990 --> 00:02:48,500
und es mit einer 2:4-Matrix
als 3D-Tensorform (1:2:4)

44
00:02:48,500 --> 00:02:53,466
oder als 2D-Tensorform (2:4), abhängig
vom Kontext des Codes zu tun haben.