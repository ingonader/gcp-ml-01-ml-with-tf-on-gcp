tf.expand_dims est une façon
de modifier la forme par l'insertion d'une dimension de 1
dans une forme de Tensor. Nous avons donc x,
qui est une matrice 3, 2. Lorsque nous appelons tf.expand_dims avec x, nous spécifions la dimension pour laquelle
nous voulons insérer un nouvel élément. Nous indiquons 1, ce qui en Python
correspond à la deuxième position (la valeur 0 correspondant à la première). Donc, la forme post-expansion
(expanded.shape) 3, 1, 2 remplace 3, 2. Qu'est-ce que cela signifie ? La valeur de x, qui était originellement
une pure matrice 3, 2, est maintenant une matrice 3D, un Tensor 3D. Remarquez le nombre de crochets ouvrants. Aucune modification n'est apportée
aux nombres stockés. Nous avons déjà vu la scission. Il s'agit d'une façon d'extraire
une partie d'un Tensor. Mais nous avons vu la syntaxe abrégée qui consiste simplement
à spécifier entre crochets les lignes et les colonnes
que nous voulons obtenir. tf.slice est la forme longue
de cette méthode. Nous utilisons ici tf.slice
pour extraire des données de x. Nous indiquons que le traitement
doit commencer en position 0, 1 et se traduire par l'extraction
de deux lignes et d'une colonne. Alors, comprenez-vous pourquoi
nous obtenons les nombres 2 et 5 ? C'est un petit quiz. En termes d'usage des crochets,
quelle syntaxe utiliseriez-vous ici pour écrire l'appel tf.slice ? Réponse : d'abord x, puis crochet. Ensuite, étant donné que vous voulez
les lignes 0 à 2, vous indiqueriez 0 et 1. Et étant donné que vous voulez
les colonnes 1 à 2, vous indiqueriez ensuite simplement 1. Avec la méthode squeeze, vous pouvez faire l'inverse
de ce que vous faites avec expand_dims. Avec expand_dims,
vous insérez une dimension de taille 1 n'importe où dans le Tensor. Et avec squeeze,
vous retirez des dimensions de taille 1 de la forme d'un Tensor. Donc, j'ai ici un Tensor. C'est un Tensor 3D. Notez le nombre de crochets. t est un Tensor 3D. J'appelle squeeze en transmettant t, et j'obtiens un Tensor 2D
qui est plus compact. Le Tensor d'origine était de forme 1, 2, 4, tandis que le Tensor réduit
est seulement de forme 2, 4. Vous pouvez sans aucun doute
vous passer d'expand_dims et de squeeze, et utiliser simplement reshape. Mais votre code sera un peu plus explicite si vous montrez que vous insérez
ou retirez une dimension 1 pour convertir des scalaires en Tensors, ou que l'opération concerne une matrice 2, 4, qui peut être un Tensor 3D de forme 1, 2, 4
ou un Tensor 2D de forme 2, 4 selon le contexte du code.