I hope that in the previous lab, where we asked you to write some code to compute the area for a triangle, you didn't just run the cells, that you tried to write some TensorFlow code yourself from scratch. If you did that and you're like most people, you quickly ran into compiler and runtime errors and you started to wonder, how would I debug a TensorFlow program? Debugging a TensorFlow program can be tricky because of the lazy evaluation paradigm. If you have errors in your graph, you won't know about it until that part of the graph gets executed. This is one of the reasons why we said tf.eager can be helpful when developing TensorFlow programs. It's not a panacea however, you still need to know how to debug TensorFlow programs, even if you developed the program interactively with tf.eager. So let's look at how to debug lazy evaluation TensorFlow programs. Debugging a TensorFlow program is similar to debugging any program. You have to learn how to read the error messages and use those error messages and stack traces to isolate the method. The purpose of isolating the method, the problematic method, is so that you can call the method all by itself. You don't want to run the entire TensorFlow program on the data set and try to debug the monolithic thing. Instead, you will want to send made-up data into the method and then you have a repeatable error that you can try to fix. How would you fix the error though? Obviously, we cannot show you all the possible errors you might run into, but we'll cover some of the more common types of error messages and ways that you'd address them. The first step is to not let your eyes glaze over, when you see a spew of error messages. Look carefully at the error message. In particular, you're looking for two pieces of information. One, the stack trace. This is the call stack of methods at the time the error was thrown. In this case for example, you see that the line S equals A plus B, in the method, some method of data is a problem. Obviously, the call stack will include a bunch of TensorFlow library methods too. Your program is calling those methods, so the trick is to hone in on your code. Once you do that, look for the second piece of information. Look at the actual error message. In this case, the error message is that a value error was encountered. TensorFlow expects that the dimensions must be equal, but it turns out that they're not. What's going on? Well, when you add A plus C, that will only work if A is a 2D tensor and C is a 2D tensor. Or if A is a 4D tensor, then C also has to be a to 4D tensor. In this case it turns out that one of them maybe A, maybe C, is a 2D tensor of the shape four comma two and the other one maybe C, is a 1D tensor of the shape four. So that is a problem. So obviously something in your program is wrong, maybe you want both of them to be four comma two, or maybe you want both of them to be four. But finding the call stack and reading the error message, helps you understand the problem. By looking at the call stack, you've found the line of code and the name of the method. So now find the method and look at it. Here, the method is called some_method, and it takes in a tensor called data. This is a tensor that you have to fake in order to get things working correctly. Forget about the rest of your program. Ignore how data actually gets read into your current program. We'll invoke the method with fake data. To invoke the method with fake data, create a session, create a hard coded TensorArray, and in this case, I'm created a four by three tensor called fake_data. Do you see it? I'm taking the fake_data, and passing it into some underscore method. Notice that I've also heavily instrumented the code of some data with print statements. It's a little old fashion to debug with print statements, but that's the easiest way to diagnose shape errors. So here we have two things that we're adding; A and C, and this was a problem. So I make sure to print out the shape of A, and the shape of C. And when I run the program, the first line prints out four comma two, and the second line prints out four. Just like the value error message was saying. And now, it gets to intent. Did you mean to slice out a four comma two matrix for C? Or did you mean to slice out a 1D vector for A? Whichever it is that you meant to do, do it. When I run the program, the first line prints out four comma two, and the second line prints out four. Just like the value error message was saying. So now it gets to intent. Did you mean to slice out off four comma two matrix for C? Or did you mean to slice out a 1D vector for A? Whichever it is that you meant to do-