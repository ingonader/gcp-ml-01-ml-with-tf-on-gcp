ここまでのレッスンで
TensorFlowのデバッグ方法を見てきました エラーメッセージを確認し
問題のあるメソッドを特定して 架空データを使って
エラーを修正しました ただし 見つけにくい条件下で 発生する問題もあります 途中まで問題なく
動作していたのに 突然 なぜかエラーが発生し 通常に戻ります 入力値や実行システムの
条件に関連するエラーの場合は 理由を特定できないことがあります この場合 プログラム全体を
デバッグする必要があり その方法は3つあります tf.Printは 特定の条件が
満たされる場合に テンソルの値を出力します tfdbgは対話型デバッガで TensorFlowセッションに
アタッチできます 視覚的なTensorBoardでは タグを調べられますが 評価指標、過剰適合、 動作していない階層の確認などの トラブルシューティングができる ハイレベルなデバッガです これについては
後で説明します 今はTensorBoardが 強力なツールであることを
覚えておいてください もう一つ付け加えると TensorFlowプログラムのデフォルトの
ログレベルはWARNなので 出力は少なめです ログメッセージを増やすには ログレベルを INFOに変更します この場合は
tf.loggingで冗長レベルを設定します レベルはDEBUG、INFO、
WARN、ERROR、FATALです 冗長性はDEBUGが最も高く
FATALが最も低くなります 開発ではINFO
本番環境ではWARNを使用します コマンドラインパラメータで
切り換えられます tf.Printは 特定のテンソル値を
記録するのに使用できます aをbで割ったとき
NAN（非数）が出力されるとします aの値とbの値を確認して
問題の原因を探ります ただしprint aを実行しても デバッグ出力が得られるだけで 値は得られません 値を得るには
テンソルを評価する必要があり aの値を毎回出力するのは
望ましくありません sをラップしてaとbを出力する
print_abをテンソルとして使います sがNANになるバッチのみを対象に
グラフのsをprint_abに置き換えます すると該当するものだけが
出力されます Datalabはログメッセージ用に
テンソルを使用するので 独立プログラムを
使用します コードをファイルに
書き込んで実行します 実行中のTensorFlowプログラムで
tf.Printをよく使用します 稀なエラーを診断し
ログに情報をキャプチャします 便利ですね TensorFlowには tf_debugという
対話型デバッガもあります コマンドラインで実行します TensorFlowプログラムを
独立プログラムとして実行し その際にコマンドラインフラグ
--debugを追加します これはリモート実行中の
デバッグにも有効で プログラムにアタッチできます デバッグ実験向けと評価プログラム向けの デバッグ用フックもあります ステップ単位でのコードの実行や ブレークポイントの設定などができます 他の言語や環境でこのデバッガを
使用したことがあれば 用語やステップなどを
よくご存知でしょう