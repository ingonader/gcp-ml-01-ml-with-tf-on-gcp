では よくある問題の
対処方法について説明します まずは形状エラー 次にスカラーとベクトルの不一致による
一種の形状エラー 最後はデータ型の不一致についてです 前のレッスンでは
このコードを使用しました aとcの形状が違うために 加算できませんでした どちらの形状が正しいかは
目的次第です ここでは メソッドが
元の4行×3列の行列を取り入れて 4×2の一定サイズの
スライディング ウィンドウを
処理しようとしています つまり aが正しくcが誤りです どうすればcを(4, 2)に
できるでしょうか cのスライスを変更して
「すべての行と列1」から 「すべての行と列1および列2」にする
方法があります Pythonの範囲には 最初の数字は含まれ
最後の数字は含まれません aは列0と列1
cは列1と列3を取得し 毎回2列単位でスライスします これで正常に
動作するようになります バッチサイズが原因の
形状エラーもあります テンソルの形状については 次元を可変長にできると
説明しました 可変長テンソルを使うのは バッチ処理のプログラムの場合です バッチは通常 すべて同じサイズです 各バッチのサンプルが
64個であるものの 入力ファイルの最後では サンプル数が64に満たず たとえば42個のサンプルを含む テンソルが作成される可能性があります コード内の
プレースホルダXの形状では 1次元目がNoneになっています Noneは可変長を意味します Xの値を出力すると テンソルのデバッグ出力で
2次元テンソルと表示されます (?, 3)の部分は 行列の列数が常に3であるものの
行数は可変だという意味です 架空のデータを入力する際 データの形状はどうなりますか 3つの要素が含まれますが 1次元テンソルです プレースホルダーが求めているのは
2次元行列です 行数は可変なので
たとえ1行でも構いませんが 2次元行列にする必要があります どのように修正すればよいでしょうか スライスほど簡単ではありません これらのメソッドを使って 形状を強制的に変更します 必要なのはtf.reshapeで 元の数値を取り入れて
別の形状に配置します 3つの数値があり それで十分ですが 2次元のテンソルが必要です ここで形状を変更して
送り出します