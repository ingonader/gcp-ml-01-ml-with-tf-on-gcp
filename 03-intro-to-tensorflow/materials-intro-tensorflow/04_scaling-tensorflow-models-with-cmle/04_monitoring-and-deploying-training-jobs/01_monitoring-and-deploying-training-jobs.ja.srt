1
00:00:00,000 --> 00:00:04,740
ジョブのモニタリング方法を説明しましょう

2
00:00:04,740 --> 00:00:08,655
Cloud Machine Learning Engineで
実行するためにジョブを送信したら

3
00:00:08,655 --> 00:00:10,935
さまざまな確認方法があります

4
00:00:10,935 --> 00:00:13,620
最も簡単な方法では 現在の状態を取得します

5
00:00:13,620 --> 00:00:17,135
これで保留中、実行中、完了がわかります

6
00:00:17,145 --> 00:00:21,310
実行中は最新のログを
確認したくなるでしょう

7
00:00:21,320 --> 00:00:23,470
gcloudでも確認できます

8
00:00:23,470 --> 00:00:26,745
並行実行する多数のジョブを送信するときは

9
00:00:26,745 --> 00:00:30,800
gcloudのジョブのリストと
フィルタを試してください

10
00:00:30,800 --> 00:00:35,980
GCP Consoleにはジョブモニタリング用のUIがあります

11
00:00:35,980 --> 00:00:38,300
起動方法、ログ

12
00:00:38,300 --> 00:00:41,920
CPUとメモリの消費量をチェックできます

13
00:00:41,920 --> 00:00:46,120
ログエントリの検証は
例外などのデバッグに役立ちますが

14
00:00:46,120 --> 00:00:49,615
MLのパフォーマンスの検証には適しません

15
00:00:49,615 --> 00:00:52,130
一方TensorBoardは優れたツールです

16
00:00:52,130 --> 00:00:57,025
利用するには ジョブの概要データを
Google Cloud Storageに保存します

17
00:00:57,025 --> 00:01:00,585
あとはTensorBoard開始時に
そのディレクトリを指定するだけです

18
00:01:00,585 --> 00:01:03,535
1つのフォルダで複数のジョブも処理できます

19
00:01:03,535 --> 00:01:07,020
ではモデルを使ってできることを
確認しましょう

20
00:01:07,040 --> 00:01:09,420
トレーニングジョブが完了したら

21
00:01:09,420 --> 00:01:12,760
TensorFlowのモデルで予測できます

22
00:01:12,760 --> 00:01:16,090
CMLEはそのための優れたインフラです

23
00:01:16,090 --> 00:01:20,290
CMLEは本番利用可能なウェブアプリを
トレーニングモデルから構築し

24
00:01:20,290 --> 00:01:24,265
レイテンシの影響が少ない予測に
バッチサービスを提供します

25
00:01:24,265 --> 00:01:26,530
これはREST APIなので

26
00:01:26,530 --> 00:01:28,570
スケーラブルで安全な予測を

27
00:01:28,570 --> 00:01:32,900
どんな言語のクライアントでも作成できます

28
00:01:33,200 --> 00:01:37,710
TFモデルの成果物をクラウドに送信するには

29
00:01:37,710 --> 00:01:41,535
バージョン管理されたリソースで
CMLEモデルを作成します

30
00:01:41,535 --> 00:01:47,065
個々のTFトレーニング済みモデルは
特定のバージョンに対応します

31
00:01:47,065 --> 00:01:49,790
CMLEでは モデルは
複数バージョンのグループで

32
00:01:49,790 --> 00:01:52,910
デフォルトのバージョンもあります

33
00:01:52,910 --> 00:01:57,720
この抽象化とグループ化の層では
TFモデルバージョン間で

34
00:01:57,720 --> 00:02:00,605
シームレスにトラフィックを移行します

35
00:02:00,605 --> 00:02:04,690
変更するのはモデルの
デフォルトバージョンだけです

36
00:02:04,690 --> 00:02:07,365
REST呼び出しを使用した予測に対する

37
00:02:07,365 --> 00:02:11,315
リモートデプロイモデルの
簡単な使用例を示しました

38
00:02:11,315 --> 00:02:13,830
CMLEのオンライン予測は

39
00:02:13,830 --> 00:02:18,345
完全にサーバーレスなシステムで
リソース割り当ての心配はありません

40
00:02:18,345 --> 00:02:20,740
ユーザーの代わりにスケーリングします