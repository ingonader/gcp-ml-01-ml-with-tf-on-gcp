1
00:00:00,000 --> 00:00:04,356
まず Estimator APIの
コンポーネントを調べて

2
00:00:04,356 --> 00:00:11,230
分散型トレーニング、モニタリング、提供など
共通のMLタスクの処理方法を確認しましょう

3
00:00:11,230 --> 00:00:15,100
Estimatorは高レベルの
TensorFlow APIの一部です

4
00:00:15,100 --> 00:00:18,630
前のモジュールで
初めてTensorFlowを操作しましたが

5
00:00:18,630 --> 00:00:20,850
Core TensorFlowレベルでした

6
00:00:20,850 --> 00:00:24,820
基本的にTensorFlowは
数値処理ライブラリとして使われます

7
00:00:24,820 --> 00:00:29,330
このレベルの下に
あまり使用しないAPIがあります

8
00:00:29,330 --> 00:00:32,390
これらはハードウェア、
CPU、GPU、TPU さらに

9
00:00:32,390 --> 00:00:35,410
Androidなど別のプラットフォームを
扱います

10
00:00:35,410 --> 00:00:37,270
Core TensorFlowの上には

11
00:00:37,270 --> 00:00:41,060
モデルの作成に必要な
標準ブロック用の API があります

12
00:00:41,060 --> 00:00:45,160
さまざまなニューラルネットワーク層や
損失関数などです

13
00:00:45,160 --> 00:00:48,830
最後に このすべてを
まとめるのがEstimatorです

14
00:00:48,830 --> 00:00:51,434
初心者レベルの
TensorFlowモデルには 通常

15
00:00:51,434 --> 00:00:54,994
ニューラルネットワーク層と
トレーニングループが含まれます

16
00:00:54,994 --> 00:00:57,780
でも「なぜ助けが必要なの？」と思いますか

17
00:00:57,780 --> 00:01:00,330
「デベロッパーだから
ループを書けるのに」

18
00:01:00,330 --> 00:01:02,350
私もそう思いましたが

19
00:01:02,350 --> 00:01:08,190
今では小さなプロトタイプモデルにも
Estimatorを使っています

20
00:01:08,190 --> 00:01:10,700
互換性があるのが気に入っているし

21
00:01:10,700 --> 00:01:15,290
標準的なEstimatorモデルを
すぐにテストできるからです

22
00:01:16,470 --> 00:01:20,630
データが増えてトレーニング時間が増えると
ニーズも増えます

23
00:01:20,630 --> 00:01:24,270
トレーニングを一時停止/再開する
チェックポイントが必要なら

24
00:01:24,270 --> 00:01:25,790
Estimatorにあります

25
00:01:25,790 --> 00:01:27,840
データがメモリに収まらない？

26
00:01:27,840 --> 00:01:33,090
Estimatorではメモリ外のデータセットを
処理するDataset API を使います

27
00:01:33,090 --> 00:01:36,400
大きなネットワークのトレーニングでは
監視が必要ですが

28
00:01:36,400 --> 00:01:38,480
Estimatorならトレーニング中に

29
00:01:38,480 --> 00:01:42,150
主な指標を自動的に
TensorBoardで可視化できます

30
00:01:42,150 --> 00:01:44,670
分散型トレーニングを検討中ですか？

31
00:01:44,670 --> 00:01:49,270
Estimatorには 必要なクラスタ実行コードが
含まれています

32
00:01:49,270 --> 00:01:52,092
やがて モデルをラップする段階に進み

33
00:01:52,092 --> 00:01:55,430
ML Engineの
ハイパーパラメータ調整を使ったり

34
00:01:55,430 --> 00:02:00,780
管理/自動スケーリング予測サービスで
本番環境にpushしたりするでしょう

35
00:02:00,780 --> 00:02:04,065
それもEstimator APIが全部やってくれます

36
00:02:04,065 --> 00:02:07,349
引き続きトレーニングループをご自分で書いて

37
00:02:07,349 --> 00:02:12,240
定型のコードを何度も作成したいと
まだ思いますか？

38
00:02:12,240 --> 00:02:16,950
思いませんよね
ではEstimator APIをご紹介させてください

39
00:02:17,600 --> 00:02:21,268
Estimator基底クラスでは
tf.layers APIを使って

40
00:02:21,268 --> 00:02:25,480
レイヤから構築するモデルをラッピングできます

41
00:02:25,480 --> 00:02:29,310
でも 標準的なものを作るなら
その必要はありません

42
00:02:29,310 --> 00:02:34,150
TensorFlowにある
作成済みのEstimatorを試せます

43
00:02:34,150 --> 00:02:39,260
LinearまたはDNN分類器（Classifier）が
データをカテゴリに分類し

44
00:02:39,260 --> 00:02:43,120
同様のRegressorが連続値を予測します

45
00:02:43,120 --> 00:02:47,970
DNNLinearCombinedClassifierも
忘れないでください

46
00:02:47,970 --> 00:02:53,510
Googleの研究論文によると
広範囲で深いモデルです

47
00:02:53,510 --> 00:02:56,190
これは重要です
たとえば これを使って

48
00:02:56,190 --> 00:02:59,300
Google Playの
レコメンデーションエンジンを強化します

49
00:02:59,300 --> 00:03:01,010
同時に とても柔軟で

50
00:03:01,010 --> 00:03:06,096
エンタープライズ機械学習の主力だと
言われることもあります

51
00:03:06,096 --> 00:03:10,760
これは あらゆる構造のデータ向けに
すぐ使えます

52
00:03:10,760 --> 00:03:14,535
1つ覚えておくべき点は
一般的なAPIのおかげで

53
00:03:14,535 --> 00:03:17,570
作成済みEstimatorは交換可能で

54
00:03:17,570 --> 00:03:20,820
すべてを簡単に試してテストできます