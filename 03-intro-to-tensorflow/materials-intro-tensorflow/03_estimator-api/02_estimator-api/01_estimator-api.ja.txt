まず Estimator APIの
コンポーネントを調べて 分散型トレーニング、モニタリング、提供など
共通のMLタスクの処理方法を確認しましょう Estimatorは高レベルの
TensorFlow APIの一部です 前のモジュールで
初めてTensorFlowを操作しましたが Core TensorFlowレベルでした 基本的にTensorFlowは
数値処理ライブラリとして使われます このレベルの下に
あまり使用しないAPIがあります これらはハードウェア、
CPU、GPU、TPU さらに Androidなど別のプラットフォームを
扱います Core TensorFlowの上には モデルの作成に必要な
標準ブロック用の API があります さまざまなニューラルネットワーク層や
損失関数などです 最後に このすべてを
まとめるのがEstimatorです 初心者レベルの
TensorFlowモデルには 通常 ニューラルネットワーク層と
トレーニングループが含まれます でも「なぜ助けが必要なの？」と思いますか 「デベロッパーだから
ループを書けるのに」 私もそう思いましたが 今では小さなプロトタイプモデルにも
Estimatorを使っています 互換性があるのが気に入っているし 標準的なEstimatorモデルを
すぐにテストできるからです データが増えてトレーニング時間が増えると
ニーズも増えます トレーニングを一時停止/再開する
チェックポイントが必要なら Estimatorにあります データがメモリに収まらない？ Estimatorではメモリ外のデータセットを
処理するDataset API を使います 大きなネットワークのトレーニングでは
監視が必要ですが Estimatorならトレーニング中に 主な指標を自動的に
TensorBoardで可視化できます 分散型トレーニングを検討中ですか？ Estimatorには 必要なクラスタ実行コードが
含まれています やがて モデルをラップする段階に進み ML Engineの
ハイパーパラメータ調整を使ったり 管理/自動スケーリング予測サービスで
本番環境にpushしたりするでしょう それもEstimator APIが全部やってくれます 引き続きトレーニングループをご自分で書いて 定型のコードを何度も作成したいと
まだ思いますか？ 思いませんよね
ではEstimator APIをご紹介させてください Estimator基底クラスでは
tf.layers APIを使って レイヤから構築するモデルをラッピングできます でも 標準的なものを作るなら
その必要はありません TensorFlowにある
作成済みのEstimatorを試せます LinearまたはDNN分類器（Classifier）が
データをカテゴリに分類し 同様のRegressorが連続値を予測します DNNLinearCombinedClassifierも
忘れないでください Googleの研究論文によると
広範囲で深いモデルです これは重要です
たとえば これを使って Google Playの
レコメンデーションエンジンを強化します 同時に とても柔軟で エンタープライズ機械学習の主力だと
言われることもあります これは あらゆる構造のデータ向けに
すぐ使えます 1つ覚えておくべき点は
一般的なAPIのおかげで 作成済みEstimatorは交換可能で すべてを簡単に試してテストできます