例を見てみましょう 不動産はどうでしょうか 物件価格を予測できますか？ まず特徴（Feature）をいくつか選びます これは予測のベースになるデータです 戸建てやアパートのサイズに
基づいて価格を予測する モデルを構築してみましょう 特徴は次のとおりです 1. 面積（平方フィート） 2. カテゴリ（戸建てまたはアパート） 実装方法を見ていきましょう feature_column API で
特徴（feature）を定義できます まず面積（sq footage）の数値列です 次に物件タイプのカテゴリ列です このシンプルなモデルでは
戸建て（house）とアパート（apt）が可能です 次に LinearRegressorを
インスタンス化できます これは 上記の特徴のための
作成済みEstimatorです Regressorは数値を出力するモデルです ここでは物件の予想販売価格です なぜ feature_columnが必要なのでしょうか 詳しく見てみましょう LinearRegressorは
データのベクターを扱うモデルです 入力データ要素の加重合計
（weighted sum）を計算します そして問題の重みを調整するよう
トレーニングされます ここでは販売価格の予測です では LinearRegressor用に どのように
データを1つの入力ベクターにまとめますか？ どんなデータをまとめるかに応じて
さまざまな方法があります ですから feature_column API が役立ちます これは データをベクター要素にまとめる
標準的な方法を実装します このnumeric_columnの値は単なる数値です これを そのままコピーして
入力ベクターの1つの要素に入れます 一方 categorical_columは
one-hotにエンコードされます 2つのカテゴリがあり house（戸建て）が1,0で apt（アパート）は0, 1です 3番目のカテゴリがあれば0, 0, 1
などとエンコードされます さて LinearRegressorが
これらの特徴を扱えるようになったので 入力ベクターにまとめて LinearRegressorの機能を適用してみます 他にも多くのfeature_columnタイプから選べます 連続値の列、バケット化用 単語の組み込み、交差列などです 適用される変換は
TensorFlowドキュメントに記載されているので 動作をいつでも確認できます モデルをトレーニングするには feature_columnで指定された特徴を返す
input関数を書く必要があります トレーニング中なので 正解つまり「labels」も必要です ここで Estimatorの train関数を呼び出し このデータセットを100回繰り返して
モデルをトレーニングします バッチ処理の動作については後で見ます でも バッチ処理の概念を
すでにご存じの方のために言うと ここに書いたコードはステップごとに
1つのバッチデータでトレーニングし このバッチにはデータセット全体が含まれます トレーニングが済んだら
モデルを予測に使えます 予測用のデータを提供する
input関数が必要になります ここでは1500平方フィートの戸建てと
1800平方フィートのアパートです Estimator APIのpredict関数は Pythonジェネレータを返します
これを使って繰り返し予測できます Estimator APIのここまでの内容を
まとめましょう モデルにデータを理解させるために
feature_column（特徴列）を使います feature_columnに基づいて
LinearRegressorをインスタンス化します trainを呼び出して100回のステップで
モデルをトレーニングします トレーニング用データが
データ入力関数inputで提供され 予測を得るためにpredictを呼び出して そのためのデータが
再びinput関数で提供されます 詳細はこのコースで後ほど説明します 別の作成済みEstimatorを使うには 単にクラス名を変更して
適切な構成パラメータを指定するだけです たとえば
このDense Neural Network Regressorで 2つの隠れ（hidden）レイヤを使えます 1番目には3つのニューロンがあり 2番目には2つだけです そして物件価格を予測する
1つのニューロンで終わります なお 両方のモデルで
入力ベクターは同じですから 同じfeature_columnを再利用できます Dense Neural Network（DNN）で
調整できる項目をいくつか挙げると 隠れレイヤの数とサイズ 活性化関数の選択 ドロップアウトなどの正規化パラメータ そして トレーニング用の
好みのオプティマイザです 最も重要な点として 適切なデフォルトが
ほぼすべてのものに備わっています DNNRegressorでは 必須のパラメータは隠れレイヤだけです