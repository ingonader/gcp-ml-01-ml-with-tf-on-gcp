1
00:00:00,000 --> 00:00:03,555
3番目のCodelabに取りかかりましょう

2
00:00:03,555 --> 00:00:07,250
今回はトレーニングと評価です

3
00:00:07,250 --> 00:00:11,400
いつもどおり
ラボのファイルの場所を見つけます

4
00:00:11,400 --> 00:00:16,030
cloud.google.com/consoleに移動し

5
00:00:16,030 --> 00:00:23,670
ラボのアカウントでログインします

6
00:00:32,150 --> 00:00:38,300
ログインしたら
このポータルでCloud Shellを開きます

7
00:00:38,300 --> 00:00:41,120
Datalabインスタンスに再接続するために

8
00:00:41,120 --> 00:00:45,090
「datalab connect」と入力し
インスタンスの名前を入力します

9
00:00:52,110 --> 00:00:55,450
ここではmylabです

10
00:01:01,160 --> 00:01:03,889
接続しています

11
00:01:03,889 --> 00:01:07,560
完了したら
[ウェブでプレビュー]ボタンを使います

12
00:01:07,560 --> 00:01:14,460
ポートを8081に変更します
Datalabではこれを使うからです

13
00:01:14,460 --> 00:01:18,045
いつものノートブックの
インターフェースが開きました

14
00:01:18,045 --> 00:01:22,170
新しいノートブックを作成して
bashコマンドを入力し

15
00:01:22,170 --> 00:01:26,285
コードを取り出します

16
00:01:26,285 --> 00:01:32,220
このリポジトリをgit cloneします

17
00:01:32,220 --> 00:01:38,970
それが完了すると
ここに training-data-analystが表示されます

18
00:01:38,970 --> 00:01:42,300
3番目のCodelabのファイルは

19
00:01:42,300 --> 00:01:51,160
training-data-analyst、courses、
machine_learning

20
00:01:51,160 --> 00:01:55,530
deepdive、最後にtensorflowです

21
00:01:55,530 --> 00:02:02,170
このコードのラボは d_trainevalです
開いてみましょう

22
00:02:04,280 --> 00:02:08,509
ここではモデルの最後の仕上げをします

23
00:02:08,509 --> 00:02:13,150
では取りかかりましょう

24
00:02:13,150 --> 00:02:18,035
データの読み込みで
変更点はありません

25
00:02:18,035 --> 00:02:21,020
すでに完了しています
datasetを使用して

26
00:02:21,020 --> 00:02:25,075
細分化されたCSVファイルから
CSVデータを読み込みます

27
00:02:25,075 --> 00:02:30,905
特徴も変更しません
今はそのままにします

28
00:02:30,905 --> 00:02:34,240
これは新しい
serving_input（提供入力）関数です

29
00:02:34,240 --> 00:02:37,975
モデルのデプロイの準備を
完了するには これが必要です

30
00:02:37,975 --> 00:02:41,610
モデルがREST APIから予測を提供するとき

31
00:02:41,610 --> 00:02:45,215
データを JSONフィードとして受け取ります

32
00:02:45,215 --> 00:02:46,930
幸いなことにAPIでは

33
00:02:46,930 --> 00:02:50,800
このCSVトレーニングデータと
まったく同じ形式のJSONフィードを

34
00:02:50,800 --> 00:02:53,045
必ずしも使う必要はありません

35
00:02:53,045 --> 00:02:57,510
この serving_input関数が
必要なアノテーションを行います

36
00:02:57,510 --> 00:03:04,805
とはいえ ここで 
想定されるJSONフィードの形状を定義します

37
00:03:04,805 --> 00:03:08,240
想定される名前を指定し 形状と

38
00:03:08,240 --> 00:03:12,680
値のタイプをTensorFlowプレースホルダの
指定どおりに使います

39
00:03:12,680 --> 00:03:17,090
これらのプレースホルダは
JSONフィードからの値を受け取ります

40
00:03:17,090 --> 00:03:18,905
さらに この場合

41
00:03:18,905 --> 00:03:23,255
追加の変換は必要ないと仮定すると

42
00:03:23,255 --> 00:03:28,530
特徴は さきほど定義した
特徴プレースホルダとまったく同じになります

43
00:03:28,530 --> 00:03:33,775
モデルは この特徴の辞書を
そのまま理解できます

44
00:03:33,775 --> 00:03:38,655
train_and_evaluateを呼び出す準備が
ほとんどできました

45
00:03:38,655 --> 00:03:42,370
あと少しだけ構成が必要です

46
00:03:42,500 --> 00:03:47,390
モデルを選びます
ここでは LinearRegressorです

47
00:03:47,390 --> 00:03:50,415
TrainSpecを定義します

48
00:03:50,415 --> 00:03:56,960
ここで train_input関数が挿入されます

49
00:03:56,960 --> 00:03:58,919
exporterも定義します

50
00:03:58,919 --> 00:04:01,019
この LatestExporterです

51
00:04:01,019 --> 00:04:03,205
これは トレーニングの最後に

52
00:04:03,205 --> 00:04:06,995
デプロイ用モデルを
エクスポートするという意味です

53
00:04:06,995 --> 00:04:14,370
exporterは さきほど定義した
serving_input関数を知っている必要があります

54
00:04:14,370 --> 00:04:16,430
これです

55
00:04:16,430 --> 00:04:19,890
次にEvalSpecを定義します

56
00:04:19,890 --> 00:04:22,950
ここに評価データの入力関数を挿入します

57
00:04:22,950 --> 00:04:28,090
また 評価とエクスポートはどちらも
チェックポイントの後で発生するので

58
00:04:28,090 --> 00:04:31,925
exporterをここで解析するのが適切です

59
00:04:31,925 --> 00:04:35,460
これで準備ができ 構成が完了しました

60
00:04:35,460 --> 00:04:38,580
TensorBoardを開始しましょう

61
00:04:43,775 --> 00:04:45,765
ここです

62
00:04:49,010 --> 00:04:54,400
TensorBoardが開始されました
クリックして開きます

63
00:04:55,130 --> 00:04:59,265
今はダッシュボードが空ですね

64
00:04:59,265 --> 00:05:01,615
トレーニングをまだ始めていません

65
00:05:01,615 --> 00:05:08,030
では始めましょう

66
00:05:08,030 --> 00:05:17,070
このtrain_and_evaluate関数を実行します

67
00:05:17,070 --> 00:05:21,810
トレーニング中に生成されたマトリックスが
通常の出力ディレクトリに書き込まれます

68
00:05:21,810 --> 00:05:25,920
TensorBoardはその場所を知る必要があります

69
00:05:25,920 --> 00:05:30,270
ですから最初にここで指定しました

70
00:05:30,270 --> 00:05:36,285
トレーニングが開始したので
トレーニングログをここで確認でき

71
00:05:36,285 --> 00:05:41,580
TensorBoard側で
曲線がここにあります

72
00:05:41,580 --> 00:05:44,250
できました これが平均損失です

73
00:05:44,250 --> 00:05:50,820
少し後でトレーニング用データセットで
計算された平均損失を確認し

74
00:05:50,820 --> 00:05:53,670
評価用データセットでも確認します

75
00:05:53,670 --> 00:05:57,800
トレーニングと評価を
同時に行っているからです

76
00:06:00,800 --> 00:06:04,215
このモデルはまだトレーニング中です

77
00:06:04,215 --> 00:06:07,340
終わるまで待ちましょう

78
00:06:13,490 --> 00:06:16,785
トレーニングが進むにつれて

79
00:06:16,785 --> 00:06:20,830
TensorBoardを自動的に更新表示できます

80
00:06:20,830 --> 00:06:23,000
その設定はここです

81
00:06:23,000 --> 00:06:25,380
データを30秒ごとにリロードします

82
00:06:25,380 --> 00:06:29,250
または この更新ボタンを押すと
データの表示が更新され

83
00:06:29,250 --> 00:06:36,130
トレーニング曲線がトレーニング中に
進捗するのを確認できます

84
00:06:45,310 --> 00:06:48,810
モデルのトレーニングが完了しました

85
00:06:48,810 --> 00:06:51,470
最後に更新表示すると

86
00:06:51,470 --> 00:06:55,360
最後のトレーニング曲線が表示されます

87
00:06:55,360 --> 00:06:59,255
これで終わりです
この曲線には注目すべき点がたくさんあり

88
00:06:59,255 --> 00:07:01,100
それは後で学習します

89
00:07:01,100 --> 00:07:05,190
今は モデルのトレーニングが
あまり適切でないことだけを確認します

90
00:07:05,190 --> 00:07:08,235
検証の損失は改善されていません

91
00:07:08,235 --> 00:07:10,605
でも それはわかっていました

92
00:07:10,605 --> 00:07:13,945
こうしてコードが動作し データが読み込まれ

93
00:07:13,945 --> 00:07:16,490
TensorBoardで動作を確認できるので

94
00:07:16,490 --> 00:07:20,320
データサイエンスを行う
準備ができました