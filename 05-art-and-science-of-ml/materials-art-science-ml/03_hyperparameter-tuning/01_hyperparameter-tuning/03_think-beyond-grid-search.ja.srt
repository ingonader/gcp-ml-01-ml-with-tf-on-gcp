1
00:00:00,000 --> 00:00:05,760
さまざまな設定を調整して
バランスの良い組み合わせを見つけるのは

2
00:00:05,760 --> 00:00:08,715
気が遠くなるような作業です

3
00:00:08,715 --> 00:00:10,265
配列については

4
00:00:10,265 --> 00:00:14,185
グリッド検索アルゴリズムで
自動化できますが

5
00:00:14,185 --> 00:00:20,670
正しい組み合わせを見つけるには
何時間もの計算が必要な場合があります

6
00:00:20,670 --> 00:00:23,610
そこでトレーニングループを使用し

7
00:00:23,610 --> 00:00:29,870
メタトレーニングでハイパーパラメータの
適切な設定を見つる方法はどうでしょう

8
00:00:29,870 --> 00:00:33,675
Google Vizierがあれば難しくありません

9
00:00:33,675 --> 00:00:36,300
ハイパーパラメータの調整の大部分は

10
00:00:36,300 --> 00:00:40,240
Google Vizierアルゴリズムが
自動的に行います

11
00:00:40,240 --> 00:00:42,820
詳細を知る必要はありません

12
00:00:42,820 --> 00:00:46,270
処理内容に興味がある場合は

13
00:00:46,270 --> 00:00:50,510
画面のリンクから
研究論文をご覧ください

14
00:00:50,510 --> 00:00:55,100
重要なのは
Cloud ML Engineで作業が簡単になる点です

15
00:00:55,100 --> 00:01:00,155
ジョブを構成すれば
あとはML Engineにお任せです

16
00:01:00,155 --> 00:01:05,555
ハイパーパラメータの
自動調整方法を説明します

17
00:01:05,555 --> 00:01:09,945
Cloud ML Engineは
MLモデルをトレーニング、ホストする

18
00:01:09,945 --> 00:01:12,830
サーバーレスプラットフォームです

19
00:01:12,830 --> 00:01:17,215
ML Engineでのハイパーパラメータの
調整プロセスは明快です

20
00:01:17,215 --> 00:01:21,575
次の手順を知るだけで
サービスを利用できます

21
00:01:21,575 --> 00:01:27,810
まず調整対象のハイパーパラメータを
コマンドライン引数として表します

22
00:01:27,815 --> 00:01:32,725
次にトレーニングの繰り返しで
出力が上書きされないようにします

23
00:01:32,725 --> 00:01:38,420
最後にそれらのハイパーパラメータを
トレーニングジョブに渡します

24
00:01:38,420 --> 00:01:42,600
ラボでの作業の前に
ハイパーパラメータを調整します

25
00:01:42,600 --> 00:01:46,595
この3ステップは
コード上ではどうなるでしょう

26
00:01:46,595 --> 00:01:48,305
最初のステップでは

27
00:01:48,305 --> 00:01:53,640
調整対象のハイパーパラメータを
コマンドライン引数として定義します

28
00:01:53,640 --> 00:01:58,380
たとえば
2つのハイパーパラメータを定義するとします

29
00:01:58,380 --> 00:02:03,220
1つは
緯度と経度を離散化するバケットの数

30
00:02:03,220 --> 00:02:07,640
もう1つは
深層ニューラルネットの隠れ層の数です

31
00:02:07,640 --> 00:02:09,050
次のステップでは

32
00:02:09,050 --> 00:02:13,940
各トライアルの出力が
相互に上書きされないようにします

33
00:02:13,940 --> 00:02:18,940
そこで 出力フォルダに
適切な命名規則を使用します

34
00:02:18,940 --> 00:02:24,775
トライアルの値を接尾辞として使用し
出力フォルダ名を一意にします

35
00:02:24,775 --> 00:02:26,495
最後のステップでは

36
00:02:26,495 --> 00:02:30,540
ジョブの送信時に
ハイパーパラメータを渡します

37
00:02:30,540 --> 00:02:34,580
まず 
このようなyamlファイルを作成します

38
00:02:34,580 --> 00:02:37,965
次にyamlファイルのパスを渡します

39
00:02:37,965 --> 00:02:43,745
これにはCloud ML Engineの
コマンドラインパラメータを使います

40
00:02:43,745 --> 00:02:48,180
yamlファイルの内容を見ていきましょう

41
00:02:48,180 --> 00:02:53,590
ここでは 評価データセットの
RMSEを最小化します

42
00:02:53,590 --> 00:03:00,080
ML Engineを実行して64～512の範囲で
最適なバッチサイズを見つけます

43
00:03:00,080 --> 00:03:03,445
これはグリッド検索よりも
さらにスマートです

44
00:03:03,445 --> 00:03:05,860
最大トライアルに注目してください

45
00:03:05,860 --> 00:03:10,135
ML Engineは
候補エリアをアルゴリズムで検索し

46
00:03:10,135 --> 00:03:17,930
最大並列トライアルで指定された数の
並列トライアルをランダムに開始して探索します

47
00:03:17,935 --> 00:03:24,425
ML Engineで各種のニューラル
ネットワーク構造を体系的に試行します

48
00:03:24,425 --> 00:03:27,610
それでは試してみましょう