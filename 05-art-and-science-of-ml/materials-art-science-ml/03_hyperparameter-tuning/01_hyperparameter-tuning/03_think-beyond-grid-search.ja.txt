さまざまな設定を調整して
バランスの良い組み合わせを見つけるのは 気が遠くなるような作業です 配列については グリッド検索アルゴリズムで
自動化できますが 正しい組み合わせを見つけるには
何時間もの計算が必要な場合があります そこでトレーニングループを使用し メタトレーニングでハイパーパラメータの
適切な設定を見つる方法はどうでしょう Google Vizierがあれば難しくありません ハイパーパラメータの調整の大部分は Google Vizierアルゴリズムが
自動的に行います 詳細を知る必要はありません 処理内容に興味がある場合は 画面のリンクから
研究論文をご覧ください 重要なのは
Cloud ML Engineで作業が簡単になる点です ジョブを構成すれば
あとはML Engineにお任せです ハイパーパラメータの
自動調整方法を説明します Cloud ML Engineは
MLモデルをトレーニング、ホストする サーバーレスプラットフォームです ML Engineでのハイパーパラメータの
調整プロセスは明快です 次の手順を知るだけで
サービスを利用できます まず調整対象のハイパーパラメータを
コマンドライン引数として表します 次にトレーニングの繰り返しで
出力が上書きされないようにします 最後にそれらのハイパーパラメータを
トレーニングジョブに渡します ラボでの作業の前に
ハイパーパラメータを調整します この3ステップは
コード上ではどうなるでしょう 最初のステップでは 調整対象のハイパーパラメータを
コマンドライン引数として定義します たとえば
2つのハイパーパラメータを定義するとします 1つは
緯度と経度を離散化するバケットの数 もう1つは
深層ニューラルネットの隠れ層の数です 次のステップでは 各トライアルの出力が
相互に上書きされないようにします そこで 出力フォルダに
適切な命名規則を使用します トライアルの値を接尾辞として使用し
出力フォルダ名を一意にします 最後のステップでは ジョブの送信時に
ハイパーパラメータを渡します まず 
このようなyamlファイルを作成します 次にyamlファイルのパスを渡します これにはCloud ML Engineの
コマンドラインパラメータを使います yamlファイルの内容を見ていきましょう ここでは 評価データセットの
RMSEを最小化します ML Engineを実行して64～512の範囲で
最適なバッチサイズを見つけます これはグリッド検索よりも
さらにスマートです 最大トライアルに注目してください ML Engineは
候補エリアをアルゴリズムで検索し 最大並列トライアルで指定された数の
並列トライアルをランダムに開始して探索します ML Engineで各種のニューラル
ネットワーク構造を体系的に試行します それでは試してみましょう