1
00:00:00,000 --> 00:00:03,800
In diesem Lab haben wir
Hyperparameter manuell optimiert.

2
00:00:03,800 --> 00:00:05,610
Sehen wir uns die Ergebnisse an.

3
00:00:05,610 --> 00:00:07,910
Wir setzen
eine einfache lineare Regression ein,

4
00:00:07,910 --> 00:00:12,070
um Wohnungspreise
auf Basis der Zimmeranzahl vorherzusagen.

5
00:00:12,070 --> 00:00:16,895
Wir bewerten
die Modellgenauigkeit mithilfe des RMSE

6
00:00:16,895 --> 00:00:21,455
und passen zur Verbesserung des RMSE
die Lernrate und die Batchgröße an.

7
00:00:21,455 --> 00:00:27,420
Die Daten für dieses Lab stammen aus
einer Erhebung von 1990 in Kalifornien.

8
00:00:27,420 --> 00:00:33,090
Sehen Sie sich nun
das Python-Notebook hier an.

9
00:00:33,090 --> 00:00:36,360
Am Anfang lade ich nur 
einige Bibliotheken.

10
00:00:36,360 --> 00:00:40,080
Hier erhalte ich eine Warnung, 
die ignoriert werden kann.

11
00:00:40,080 --> 00:00:43,820
Je nach verwendeter Version
erhalten Sie diese möglicherweise nicht.

12
00:00:43,820 --> 00:00:53,430
Dann lade ich von dieser öffentlichen URL
mein Dataset in ein Pandas-DataFrame.

13
00:00:53,430 --> 00:00:55,960
Danach untersuchen wir die Daten

14
00:00:55,960 --> 00:01:03,480
und sehen uns
einige Datensätze und Statistiken an.

15
00:01:05,690 --> 00:01:09,950
Ein Problem dieses Datasets
besteht in der Granularität.

16
00:01:09,950 --> 00:01:13,505
Sie geht auf die Ebene der Häuserblocks
anstelle der Haushalte hinunter.

17
00:01:13,505 --> 00:01:16,610
Das müssen wir vor der Verwendung beheben.

18
00:01:16,610 --> 00:01:23,270
Dazu erstellen wir eine neue Datenspalte
auf Basis der Gesamtanzahl der Zimmer,

19
00:01:23,270 --> 00:01:29,100
die auf Blockebene vorliegt,
geteilt durch die Haushalte in den Blocks.

20
00:01:29,100 --> 00:01:34,145
So erhalten wir
die ungefähre Zimmeranzahl pro Haushalt.

21
00:01:34,145 --> 00:01:40,815
Mit "describe" 
erhalte ich diese Statistik.

22
00:01:40,815 --> 00:01:43,710
Bevor wir das Modell trainieren,

23
00:01:43,710 --> 00:01:45,935
sehen wir uns das Dataset an

24
00:01:45,935 --> 00:01:48,160
und überlegen, was wir machen.

25
00:01:48,160 --> 00:01:51,370
Diese Spalte mit der Zimmeranzahl
haben wir gerade erstellt,

26
00:01:51,370 --> 00:01:54,850
indem wir
zwei vorhandene Spalten dividiert haben.

27
00:01:54,850 --> 00:01:58,885
Dies ist unser Merkmal,
im Grunde unsere Modelleingabe.

28
00:01:58,890 --> 00:02:04,120
Mit unserem Modell sagen wir
das mittlere Alter von Haushalten vorher.

29
00:02:04,120 --> 00:02:08,780
Über diese Spalte erhalten wir das Label.

30
00:02:11,050 --> 00:02:15,925
In dieser Zelle definiere ich
die Voraussetzung für den Trainingsstart.

31
00:02:15,925 --> 00:02:23,550
Die Trainingsfunktion, die Eingabefunktion,
liest aus dem DataFrame.

32
00:02:26,690 --> 00:02:30,400
Die Zimmeranzahl ist das Merkmal

33
00:02:30,400 --> 00:02:34,700
und der mittlere Wohnungswert das Label.

34
00:02:37,710 --> 00:02:40,700
Hier definiere ich das Ausgabeverzeichnis.

35
00:02:40,700 --> 00:02:45,710
Ich sorge dafür, dass
der Inhalt dieses Ausgabeverzeichnisses

36
00:02:45,710 --> 00:02:48,160
bei jedem Start entfernt wird.

37
00:02:48,160 --> 00:02:51,884
Wir möchten
eine lineare Regression verwenden,

38
00:02:51,884 --> 00:02:53,850
was hier passiert.

39
00:02:53,850 --> 00:02:56,840
Ich verwende "LinearRegressor"
aus der TensorFlow-Bibliothek.

40
00:02:56,840 --> 00:03:01,475
Ich übergebe das Merkmal und
das Ausgabeverzeichnis an den Estimator

41
00:03:01,475 --> 00:03:03,605
und starte hier das Training.

42
00:03:03,605 --> 00:03:09,090
Ich beurteile anhand des RMSE
die Leistung unseres Modells.

43
00:03:09,090 --> 00:03:10,645
Das passiert hier.

44
00:03:10,645 --> 00:03:17,650
Wenn ich die Zelle ausführe,

45
00:03:17,650 --> 00:03:23,080
wird für den RMSE
eine sehr große Zahl ausgegeben.

46
00:03:23,080 --> 00:03:28,330
Das ist seltsam, da der RMSE
nur einige Hundert betragen sollte

47
00:03:28,330 --> 00:03:31,980
und nicht so viel wie hier.

48
00:03:31,980 --> 00:03:35,070
Hier findet eine Skalierung statt.

49
00:03:35,080 --> 00:03:37,850
Die Werte sind auf 100.000 skaliert,

50
00:03:37,850 --> 00:03:39,410
was wir übernehmen müssen,

51
00:03:39,410 --> 00:03:43,925
damit der RMSE 
entsprechend berechnet wird.

52
00:03:43,925 --> 00:03:46,675
Das mache ich in der nächste Zelle.

53
00:03:46,675 --> 00:03:52,830
Ich teile einfach
den Y-Wert durch die Skalierung,

54
00:03:52,830 --> 00:03:55,340
der Rest bleibt unverändert.

55
00:03:55,340 --> 00:03:58,860
Wenn ich dies ausführe,

56
00:03:58,860 --> 00:04:03,635
erhalte ich 
eine Fehlerrate von 7,4 Prozent,

57
00:04:03,635 --> 00:04:06,250
was für den Anfang gut ist.

58
00:04:06,250 --> 00:04:08,245
Wir können sie aber noch verbessern.

59
00:04:08,245 --> 00:04:10,250
Das tun wir in der nächsten Zelle.

60
00:04:10,250 --> 00:04:12,960
Ich ändere die Lernrate und die Batchgröße

61
00:04:12,960 --> 00:04:18,000
und sehe mir
die Auswirkungen auf die Fehlerrate an.

62
00:04:18,000 --> 00:04:20,490
Die Skalierung bleibt.

63
00:04:20,490 --> 00:04:23,325
Ich definiere die Batchgröße hier

64
00:04:23,325 --> 00:04:25,360
mit einer Größe von 10.

65
00:04:26,850 --> 00:04:29,055
Wir beginnen wieder von vorne,

66
00:04:29,055 --> 00:04:31,534
da wir jedes Mal
das Ausgabeverzeichnis entfernen.

67
00:04:31,534 --> 00:04:38,220
Wir verwenden hier eine Lernrate von 0,01

68
00:04:38,220 --> 00:04:40,080
und wieder die lineare Regression.

69
00:04:40,080 --> 00:04:43,800
Der Rest des Codes bleibt unverändert.

70
00:04:43,800 --> 00:04:48,050
Der einzige Unterschied
ist die kleinere Batchgröße,

71
00:04:48,050 --> 00:04:51,170
daher müssen wir mehr Schritte angeben.

72
00:04:51,170 --> 00:04:52,865
Das geschieht hier.

73
00:04:52,865 --> 00:04:56,890
Dann geben wir den RMSE aus.

74
00:05:02,520 --> 00:05:06,950
Zur Erinnerung:
Vor Einführung der Lernrate und Batchgröße

75
00:05:06,950 --> 00:05:09,245
waren wir bei 7,4.

76
00:05:09,245 --> 00:05:12,185
Mit dieser kleinen Änderung

77
00:05:12,185 --> 00:05:15,050
geht der Wert hinunter auf 3,6.

78
00:05:15,050 --> 00:05:17,937
Experimentieren Sie
mit diesen Hyperparametern,

79
00:05:17,937 --> 00:05:20,165
um die bestmögliche Leistung zu erhalten.

80
00:05:20,165 --> 00:05:25,420
Bei meinem letzten Versuch
bin ich bis auf 0,528 gekommen.

81
00:05:27,340 --> 00:05:32,030
Das war der Stoff,
den ich in diesem Lab behandeln wollte.

82
00:05:32,030 --> 00:05:36,795
Eine häufige Frage ist,

83
00:05:36,795 --> 00:05:41,970
ob es eine Standardmethode
zum Optimieren dieser Parameter gibt.

84
00:05:41,970 --> 00:05:43,630
Um es kurz zu machen:

85
00:05:43,630 --> 00:05:46,605
Die Auswirkungen der Hyperparameter
hängen von den Daten ab.

86
00:05:46,605 --> 00:05:48,695
Es gibt hier keine festen Regeln.

87
00:05:48,695 --> 00:05:51,290
Sie müssen
mit Ihren Daten Tests durchführen.

88
00:05:51,290 --> 00:05:55,360
Es gibt einige grobe Regeln,
die Ihnen die Richtung weisen können.

89
00:05:55,360 --> 00:05:57,900
Wenn Sie Ihren Trainingsfehler überwachen,

90
00:05:57,900 --> 00:06:01,850
sollte dieser beständig abnehmen,

91
00:06:01,850 --> 00:06:03,830
zu Beginn drastisch.

92
00:06:03,830 --> 00:06:08,210
Gegen Ende, wenn das Training konvergiert,
sollte er sich einem Wert annähern.

93
00:06:08,210 --> 00:06:10,145
Wenn das Training nicht konvergiert,

94
00:06:10,145 --> 00:06:12,065
setzen Sie es fort.

95
00:06:12,065 --> 00:06:15,350
Wenn der Trainingsfehler zu langsam sinkt,

96
00:06:15,350 --> 00:06:19,160
kann eine Erhöhung der Lernrate helfen.

97
00:06:19,160 --> 00:06:24,435
Wenn die Lernrate zu hoch ist,
kann aber auch das Gegenteil eintreten.

98
00:06:24,435 --> 00:06:27,360
Wenn der Trainingsfehler
in einen großen Bereich springt,

99
00:06:27,360 --> 00:06:29,220
verringern Sie die Lernrate.

100
00:06:29,220 --> 00:06:34,040
Das Senken der Lernrate plus
eine höhere Schrittanzahl oder Batchgröße

101
00:06:34,040 --> 00:06:36,465
ist oft eine gute Kombination.

102
00:06:36,465 --> 00:06:41,505
Sehr kleine Batchgrößen
können auch zu Instabilität führen.

103
00:06:41,505 --> 00:06:45,180
Probieren Sie zuerst größere Werte
im Hunderter- oder Tausenderbereich aus

104
00:06:45,180 --> 00:06:48,280
und verringern Sie sie,
bis Sie eine Verschlechterung erkennen.

105
00:06:48,280 --> 00:06:54,170
Folgen Sie diesen Regeln nicht zu streng,
da die Auswirkung von den Daten abhängt.

106
00:06:54,170 --> 00:06:56,960
Experimentieren Sie
und überprüfen Sie die Ergebnisse.

107
00:06:58,530 --> 00:07:00,210
Als Bonus zu diesem Lab

108
00:07:00,210 --> 00:07:04,425
sollten Sie weitere Merkmale hinzufügen
und sich die Ergebnisse ansehen.

109
00:07:04,425 --> 00:07:06,800
Das sollte nicht allzu lange dauern.

110
00:07:06,800 --> 00:07:08,640
In fünf bis zehn Minuten

111
00:07:08,640 --> 00:07:14,880
sollten Sie einige Merkmale hinzufügen
und Ihre Modellleistung beurteilen können.