再開しましょう
このモジュールでは カスタムEstimatorを書く方法を
説明します このコースでは MLのツールキットに備わっている
さまざまな機能を見ていきます 定型のEstimatorはとても役立ちますが 定型Estimatorを拡張したいと
思う場合も生じてくるでしょう そのために カスタムEstimatorを書く方法を学習します カスタムEstimatorを作成すると モジュールの機能自体を
より効果的に制御しながら Estimator APIの機能を
活用し続けることで モデルのトレーニングと評価を
分散できます 最後に この機会に TensorFlowとKerasとの関係を
ご説明します これに関する質問をよく受けるからです カスタムEstimatorでは
Kerasの使用を考慮できる場合があります なぜなら KerasはカスタムEstimatorの
モデル関数を書く便利な方法だからです Kerasはディープラーニング
モデル向けの 便利なオープンソース
フロントエンドです このモジュールでKerasモデルを
簡単に見ていきます また KerasモデルをEstimator
フレームワークに取り込む方法も学習します Estimator APIを使って
多くのことができます メモリ外部データに関連する
問題を解決するために データセットAPIを使用できます トレーニング/評価の
機能が備わっているので トレーニングや評価を簡単に分散できます 要約情報をエクスポートすることで トレーニングと評価だけでなく
モニタリングも可能です 評価の時点でチェックポイントを
エクスポートできます チェックポイント自体に
障害回復が備わっています エクスポートすると モデルを簡単に
デプロイできるので 本番環境で トレーニング済みモデルから
予測を提供できます また評価指標でハイパーパラメータの
チューニングも可能です でも私がEstimatorを好んでいる
主な理由はQuick Modelです どれほどクイック（速い）かは
専門分野のコース3で見ました モデルをトレーニングして
住宅価格を予測したい場合 トレーニングコードの中で メモリ外部データセットを
読み込んでトレーニングし そのコード全体を1枚のスライドに
収めることができます 分散トレーニングで大きなデータセットを
対象とするだけでなく 多数のマシンでフォールト
トレラントな方法を使う場合 いくつかの概念が加わります つまり トレーニング/評価パラメータの指定や
これらの操作の時間の長さ/頻度です さらに モデルを本番環境に提供するには エキスポートシグニチャを
指定する必要がありました それでも作成済みEstimatorの
シンプルなコードには 強力なトレーニング/評価機能があるので
難しい操作を簡単に実現できます とはいえ 定型Estimatorが不十分な
場合もあるでしょう 作成済み つまり定型
Estimatorを使用できるのは 目的の操作にぴったり合う
定型Estimatorが存在する場合だけです TensorFlowチームは
汎用性の高いモデルの作成を試みています しかし さまざまなニーズをすべて満たす
定型モデルが 存在しないことは明らかです そのような場合
Estimatorの機能を最大限に活用しながら そこで使われている数学モデルを
変更できるでしょう つまり データサイエンティスト
である皆様は ニューラルネットワークのレイアウト、 損失関数、出力のフォーマット方法を
定義しますが 皆様がワーカーとパラメータサーバーの
通信方法を変更することは 極めて稀です ですから このように
Estimatorの組み込み機能を使いますが モデル自体の微調整は依然として可能です ところで Kerasでは独自のモデルを
書くことができます Kerasを使う場合 Kerasでモデルを
書くことはできますが Estimatorを使って Kerasモデルを
トレーニング/評価してください ですから 
Kerastoratorモデルの使用は 柔軟な選択肢の一例に過ぎません このモジュールでは
このような点を見ていきます