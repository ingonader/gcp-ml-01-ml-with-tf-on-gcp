入力テンソルから出力テンソルへのコードが
TensorFlowで書かれている場合の カスタムEstimatorの作成方法を
見てきました コードと
EstimatorSpecを返す関数とをまとめて その関数を基底クラスEstimatorに渡しました Kerasではこれは
どう機能するでしょうか そもそもKerasとは何ですか Kerasは高水準の
ニューラルネットワークAPIです 畳込みと循環のニューラルネットワークの
両方をサポートします しかしTensorFlowと違って
KerasはCNN/RNNの実装ではありません KerasはPythonで書かれた
高水準ニューラルネットワークAPIですが バックエンドでTensorFlowをサポートします つまり Keras関数を呼び出すと
その関数から TensorFlow関数セットが呼び出され
機能が実装されます さらに KerasはTensorFlow以外にも CNTK、theanoなどの他のニューラル
ネットワーク実装での実行をサポートします Kerasは使いやすく
迅速なプロトタイプ化が可能です 例として ここにKerasで書かれた
シーケンス分類モデルがあります 埋め込みLSDM、Dropoutなどの
クラスがあります このように Kerasではモデルの
アーキテクチャを考えることができ 低水準の実装を
気にする必要がありません たとえば TensorFlowで埋込みを作成するには
埋込み列を作ります そのためには トレーニングデータから
カテゴリ列を最初に作る必要があります Kerasではこのような実装の
詳細を気にしなくて済みます もちろん
もし埋め込みに達する前に 何か異なる方法で
前処理を行いたい場合は Kerasのガイドを
深く調べる必要があります これは簡単とは限らず シンプルさと表現力の間には
しばしば トレードオフがあります ともかく Kerasでモデルを作ることは
よくあります ただし Kerasは迅速な
プロトタイプ化を意図しています ディストリビュータのトレーニングや スケール予測は処理されません ですから 本番環境にするには
Estimator APIを使用すべきでしょう 多くの場合 Kerasで書かれた
MLプロトタイプに基づき プロトタイプを運用可能にする
必要があります どうすれば
よいでしょうか ヒントを得るために
もう少しコードを見てみましょう コードの詳細は気にしないでください このコードの最初の数行で 階層化アーキテクチャが作成されます いったんモデルが作成されると 損失関数、最適化手法、
評価指標を渡してコンパイルされます 何かを思い出しますね
そうです カスタムEstimatorのモデル関数です では KerasとEstimator APIは
どのように混合しますか？ 答えは Kerasモデルをコンパイルすると
Estimatorが得られます 古いKerasコードはスタンドアロンの
Kerasをインポートする可能性があります 必要に応じてインポート文を変更して
TF.Kerasをインポートさせます この from tensorFlow import keras
によって Kerasが
TensorFlow呼び出しに含まれ それが可能になります 次に keras.estimator.model_to_estimator
を呼び出し コンパイルされたモデルを渡すと
Estimatorが返されます 呼び出されるmodel.Fitと
model.evaluateを捨てます このモデルを
どのようにトレーニングしますか 通常と同じ方法で
このestimatorを使用します それとともにトレーニング入力関数 評価入力関数、train spec、
eval spec、exporterなどを train and evaluateに渡します この方法で Kerasモデルを
本番環境化します 覚えておくべき点として 入力関数とKerasモデルとの関連付けでは
命名規則を使います XYZというKerasレイヤがある場合 入力関数から返される
特徴（features）辞書の中に XYZ_inputという名前の特徴が必要です これをクイックデモで見てみましょう 以前と同じNotebookを使用しますが デモの目的で
サンプルKerasモデルを使います