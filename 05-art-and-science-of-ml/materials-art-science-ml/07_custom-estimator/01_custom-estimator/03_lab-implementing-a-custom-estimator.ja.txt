このラボでは カスタムEstimatorを
書く方法を習得します あるTensorFlow関数を想定します この関数は入力テンソルセットを受け入れて
出力テンソルを作成します この関数をEstimatorフレームワークに
組み込むのが目標です そうすることでEstimatorの
高水準のメリットが得られます 実際には Estimatorを使わない
モデルに取り組んでいる場合 なんらかの方法でデータを読み込んで
モデルを出力します 今回はモデルのこのような部分を
実質的に捨て去って モデルの数学的なコアだけを残します このモデルは入力テンソルを
出力テンソルに変換します このラボで学ぶ点は Estimatorフレームワーク、
カスタムモジュール関数を含めて モデルをラップする方法です これをスライドで示すために
ある時系列モデルを使用します この時系列モデルが実際に
どのように動作するかは 気にしないでください シーケンスモデルについては
あとで見ていくので 今は ブラックボックスと見なします 基本的にどう機能するかを
示すための外部ラッパーです さてここで import tensorflowに進みます 一連のデータを作成して
シミュレーションします 各データは基本的に
偏角が異なる正弦波です 作成されるさまざまな周波数で この正弦波ができます ここに この時系列の
5つの例があります 実際にこのデータを多数
作成します そして このデータでトレーニングします つまりニューラルネットワークに
9個の値を与えます 0、1、2、3... 8まで進みます 9個の値を与えて
10個目を予測させます 多数の既存データに基づいて学習させ 8個いや9個の値に基づいて
10番目がどんな値になるか学習させます これを行うには CSVファイルを作成します to_csvでファイルに名前を指定し シーケンスが何個必要かを伝えます 次にファイルを開き 書き込んで時系列を作成します
（create_time_series） 時列系の数はN個です この場合は train.csv.n=1000として 1000個のシーケンスを含む
ファイルができます train.csvには
1000個のシーケンスが含まれます value.csvには
50個のシーケンスが含まれます すべてカンマで区切られます これを実行できます 実行すると train.csvの最初の5列が見えます これが最初の5列です そして value.csvの最初の5列です これは実際には1個の時系列です これが
トレーニング入力特徴（features）になり そして これがラベルになります モデルにこれを学習させます これを使うのは
どんなときですか 皆様が時系列を扱わないとしても こんな状況を考えると役立つでしょう たとえば 皆さんが
小売店を経営しているとします 何千個もの商品があります 各商品には季節性があります 過去8期間または9期間の履歴データを見て そこから10期目を予測します 基本的にこうします しかし 1つの株式市場の
将来値を予測しようとする場合 こういう時系列とは異なり ものすごく長い1つの時系列です 一方ここでは
何千個もの短い時系列があるので まったく別の問題になります この問題は小売店の例で 何千個もの商品があり それぞれに季節性があります すべての商品の季節性から 季節性という考え方を
学習させたいと思います 1つの商品だけの時系列を見て
次を予測させます これが今回の
トレーニング用データセットです これに基づきモデルをトレーニングします 循環ニューラルモデル（RNN）を
トレーニングします ここでも モデル自体の
内部については気にせず 実装方法に注目してください この場合もTensorFlowをインポートし データを読み込む必要があります データは基本的に
シーケンスの長さ（SEQ_LEN）です デフォルトは[0.0] 0からSEQ_LENまでのxrange（範囲）の
すべての浮動小数点数です 10個の数字があります バッチサイズですが
何個でしょうか 最急降下を計算するので バッチサイズは20になります データの時系列（TIMESERIES_COL）は
rawdataです このシーケンスで 出力の数（N_OUTPUTS）は1つです これが最終出力です 入力の数（N_INPUTS）は シーケンス長から
出力数を引いたものです 言い換えると 最初の9個が入力 そして 最後の1個が出力です 定義する場合は これが定数セットです 次に 読み込んだデータセットを書き出します これは入力関数を作るようなものです ここで decode_csvとline（列）は 「すべてを浮動小数点数として
読み込みなさい」と指示し すべてのデータ つまり
10個の数値が得られますが 一度に1つのバッチを読み込みます ですから これは1列ではありません 実際にデータは標準的に
20列に相当します バッチごとに読み込むからです これは20列です そのうち最初の9つを切り分けて これらが入力になります そして最後の列を切り分けて これがラベルになります これが操作の内容です 最初の9個の値を切り分けて
それらが入力（inputs）になり 最後の値がラベルです inputsの長さはバッチサイズ
幅は9です labelsの高さはバッチサイズ
幅は1つまり出力数です このようなデータを取り入れます すべて別個の値ですが
それらを一緒に重ねて（stack） 行列（マトリックス）が得られます これが入力です これを重ねて行列にし これも重ねて行列にします 行列の第2ディメンションは1ですが まだ行列にはなく 一連のリストです リストではなく行列が必要なので スタック（stack）がこれを行います 次に TIMESERIES_COL生データ（rawdata） テンソルinputsを指定し
featuresとlabelsを返すことができます featuresには1つだけが含まれ 1つの特徴を含む辞書です その特徴は行列です 以前は すべての特徴が単一列でした しかしこの特徴は行列です このため ここでstack（積み重ね）します 次にデータセットを
どのように読み込みますか データセットを読み込むとき ファイル名では 実際に
ファイルパスを与えます ですから globを行って ワイルドカードに合う
すべてのファイルを照合します たとえば file_listです それをテキスト行として読み込み decode_csvを呼び出して
データセットを返し トレーニングの場合は
データセットをシャッフルします 評価ではシャッフルは必要ないので ここではシャッフルしません トレーニングでは
無制限に読み込み 評価で読み込む場合は
データセット全体を一度に読み込むので epochの数は1です epochの回数だけ
データセットを繰り返します 評価では1度だけ行います トレーニングでは永久にこれを行い
バッチサイズで一括処理します 一度に20行つまり 一度に20個のシーケンスです 次にイテレータを返します これがデータセットの読み込みです さて ここでは モデル自体がどう動作するかは
気にせず 重要な点は この行列simple_rnnで features、labels、modeを受け入れ featuresからシーケンスXを取り出し さらに操作を進めて この部分は気にせず やがて predictionsに達します これが時系列モデルの出力です 入力が提供されると 出力が得られます すべてのモデル関数は
だいたいこんな感じです 次に 損失関数を決める必要があります 時系列の問題ですから 最後の値を予測します つまり値の予測です これは回帰/分類のどちらですか？
回帰ですね ですから loss（損失）は
平均2乗誤差になります 2乗平均平方根誤差と 平均2乗誤差のどちらでも使用できます トレーニングオペレーションでは
lossを最小化し 特定の学習率learning_rateと 特定のoptimizerを使用します 評価指標は今回はrmce
つまり2乗平均平方根誤差で labelsとpredictionsをここで提供します トレーニングでも
評価でもない場合は loss、train op、eval metricsは
どれもnoneです ラベルがないのでnoneになります ラベルがないと予測できません 評価できず トレーニングやlossもできません これらのオペレーションを
すべてnoneにします 予測辞書（predictions_dict）は
出力predictionsです それに「predicted」という名前を付けます エクスポートでは
regression export outputsという名前です これらのprediction（予測）を取り入れて
書き出します この場合は 書き出される
埋め込みがないので 1つだけ書き出します 複数の内容を書き出す場合は これは辞書にすぎないので このように下の部分で
「embedding」と入力し 上の埋め込みのここに
テンソルがあるとしましょう このweightテンソルが埋め込みだとします 下に行ってembedding weightと
指定するだけです モデルのエクスポートでは 2つのものがエクスポートされます 回帰出力と埋め込みです これが完了したら estimator specを書き出すことができます その際 modeと
prediction dictを渡し さらに loss、train op、eval metricsなど エクスポートしたいものを渡します これで ほとんど説明できました 残りの内容はすでに学んだことと
基本的に同じです トレーニング/検証関数を作成します パラメータや入力関数は不要です ここでは単にget trainだけです train.csvを渡してモードはtrain serving input関数では
TIMESERIES_COLが必要です すべて浮動小数点数です train and evaluateを呼び出し スタンドアロンモジュールとして試し さらに MLエンジンでもトレーニングできます BUCKETを qwiklabsバケットに
必ず変更してください