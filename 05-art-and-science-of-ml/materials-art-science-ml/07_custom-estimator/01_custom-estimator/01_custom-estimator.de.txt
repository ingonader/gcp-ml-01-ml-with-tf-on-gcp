Willkommen zurück! In diesem Modul lernen wir, wie man 
benutzerdefinierte Estimators erstellt. In diesem Kurs 
betrachten wir verschiedene Dinge, die für die Arbeit 
von ML-Experten wichtig sind. Mit vorgefertigten Estimators
kommen Sie zwar ziemlich weit, es gibt aber Situationen, 
in denen diese nicht ausreichen. Hier lernen Sie, wie man einen 
benutzerdefinierten Estimator erstellt. Mit einem benutzerdefinierten Estimator erhalten Sie mehr Kontrolle 
über die Modulfunktion an sich. Nach wie vor können Sie auch die Estimator API nutzen und damit das Training 
und das Bewerten für Ihr Modell verteilen. Außerdem gehe ich hier auf die Beziehung
zwischen TensorFlow und Keras ein, weil ich danach häufig gefragt werde. Keras bietet sich
bei benutzerdefinierten Estimators an, da damit deren Modellfunktionen 
leicht geschrieben werden können. Falls Sie es noch nicht kennen: Keras ist ein sehr intuitives 
Open-Source-Front-End für Deep Learning-Modelle. In diesem Modul
schauen wir Keras-Modelle kurz an. Sie lernen dann, Keras-Modelle 
in ein Estimator-Framework einzubinden. Die Estimator API nimmt uns ja einiges ab. Sie löst mit der Dataset API Probleme mit Daten, 
die nicht im Speicher sind. Mit ihr können wir das Training 
und das Bewerten einfach verteilen, indem wir die Funktion 
"train_and_evaluate" bereitstellen. Sie exportiert Zusammenfassungen, 
damit auch das Überwachen möglich ist. Mit der API können wir 
beim Bewerten Prüfpunkte exportieren. Mit solchen Prüfpunkten 
können Fehler behoben werden. Durch das Exportieren
wird die Modellbereitstellung erleichtert. Daher können wir 
in der Produktionsumgebung Vorhersagen 
eines trainierten Modells bereitstellen. Mit den Bewertungsmesswerten wird auch
die Hyperparameter-Abstimmung ermöglicht. Das beste am Estimator ist, 
dass wir ein schnelles Modell erhalten. Im 3. Kurs der Reihe 
haben wir gesehen wie schnell. Beim Trainieren eines Modells 
zur Vorhersage von Häuserpreisen passt der Code mit der Anweisung, 
dass speicherexterne Datasets gelesen und das Modell 
trainiert werden soll, auf eine Folie. Da sich verteilte Trainings nun nicht nur bei großen Datasets sondern auch fehlertolerant 
auf vielen Rechnern ausführen lassen, mussten einige Konzepte ergänzt werden,
um die Trainings- und Bewertungsparameter und die Dauer 
und Häufigkeit der Vorgänge anzugeben. Außerdem mussten wir 
eine Exportsignatur angeben, um das Modell 
zu produktionalisieren. Beim vorgefertigten Estimator 
ist der Code sehr einfach gehalten. Viele schwierige Dinge erleichtert
die train_and_evaluate-Funktion. In manchen Situationen 
reichen diese Estimators aber nicht aus. Sie können vorgefertigte 
Estimators nur verwenden, wenn für den gewünschten Zweck 
ein vorgefertigter Estimator existiert. Das TensorFlow-Team versucht,
die häufigsten Modelltypen aufzunehmen. Für manche Varianzen wird es eventuell 
nie ein vorgefertigtes Modell geben. In diesem Fall wollen Sie die Vorteile des Estimators 
bestmöglich nutzen und dennoch 
das mathematisches Modell ändern können. Sie als Data Scientist wollen eher das Layout 
des neuronalen Netzwerks, die Verlustfunktion 
und das Ausgabenformat definieren, als die Art zu ändern, wie Worker und Parameterserver 
miteinander kommunizieren. Dann sollten Sie Estimators 
mit entsprechender Funktionalität nutzen. Sie sollten das Modell 
aber dennoch detailliert steuern können. Mit Keras können Sie 
übrigens eigene Modelle erstellen. Falls Sie Keras verwenden, wollen Sie damit
vielleicht ein Modell erstellen, aber einen Estimator 
zum Trainieren und Bewerten verwenden. Die Modellerstellung mit Keras ist nur ein Beispiel dafür, was für
eine Flexibilität Sie sich ggf. wünschen. Um solche Flexibilität 
geht es in diesem Modul.