Bienvenue à tous. Dans ce module, vous allez apprendre
à écrire des Estimators personnalisés. Dans ce cours,
nous allons voir diverses choses dont tous ceux qui font du ML doivent
disposer dans leur boîte à outils. Et bien que vous puissiez dans bien des cas
vous servir des Estimators standardisés, il y aura des situations dans lesquelles vous voudrez disposer
de solutions plus personnalisées. C'est pour cette raison que vous allez
apprendre à écrire un Estimator personnalisé. Vous pourrez ainsi mieux
contrôler la fonction de modèle tout en continuant à bénéficier
des avantages de l'API Estimator et de sa capacité à distribuer l'entraînement
et l'évaluation de votre modèle. Enfin, je profiterai de l'occasion pour expliquer la relation
qui existe entre TensorFlow et Keras, puisque c'est une question
que l'on me pose souvent. Keras entre en jeu lorsque l'on pense
aux Estimators personnalisés, car cette API constitue un moyen pratique
d'écrire la fonction de modèle pour un Estimator personnalisé. Si vous n'avez pas entendu parler de Keras, sachez que c'est une interface
Open Source très intuitive pour les modèles de deep learning. Nous verrons les modèles Keras
rapidement dans ce module. Vous verrez ainsi également comment intégrer des modèles Keras
dans le framework de l'Estimator. Retenez que l'API Estimator présente
pour nous plusieurs avantages. Elle résout les problèmes liés
aux données hors mémoire, à l'aide de l'API Dataset. Elle constitue un moyen pratique
de distribuer l'entraînement et l'évaluation avec la fonction train_and_evaluate. Elle exporte des résumés pour que nous puissions en plus
effectuer une surveillance. Nous pouvons grâce à elle
exporter des points de contrôle lorsque nous effectuons l'évaluation. Ces points de contrôle permettent
la reprise après sinistre. L'exportation facilite
le déploiement d'un modèle afin qu'il soit possible, en production, de diffuser des prédictions
à partir d'un modèle entraîné. Les statistiques d'évaluation permettent
également le réglage d'hyperparamètres. Mais j'apprécie principalement l'Estimator parce qu'il nous permet
de disposer d'un modèle rapide. Rapide. Mais à quel point ? Nous avons vu cela dans le troisième
cours de la spécialisation. Si vous voulez entraîner un modèle
pour prédire les prix des logements, l'intégralité du code d'entraînement qui permet de lire
les ensembles de données hors mémoire et d'entraîner le modèle tient dans une diapositive. L'ajout de la possibilité
d'effectuer un entraînement distribué, pas seulement
avec de grands ensembles de données, mais sur de nombreuses machines, et avec une tolérance aux pannes, a impliqué de définir
quelques concepts supplémentaires quant à la spécification des paramètres
d'entraînement et d'évaluation, et quant à l'indication de la durée
et de la fréquence à respecter. Il nous a également fallu spécifier
une signature d'exportation pour qu'il soit possible
de produire le modèle. L'Estimator prédéfini n'en reste
pas moins un code très simple qui facilite l'accomplissement
de nombreuses opérations complexes grâce à la puissante fonction
train_and_evaluate. Il existe toutefois des situations dans lesquelles les Estimators
standardisés peuvent être insuffisants. Vous ne pouvez utiliser un Estimator
prédéfini (ou standardisé) que s'il en existe un convenant parfaitement
pour ce que vous voulez faire. L'équipe TensorFlow tente de proposer
les types de modèles les plus courants, mais il semble évident qu'il ne pourra jamais y en avoir un pour
chacun des cas particuliers envisageables. Dans ces situations, il est important que vous puissiez tirer
le meilleur parti de celui que vous employez tout en ayant la possibilité de modifier
le modèle mathématique utilisé. L'idée est qu'en tant que data scientist, vous voulez pouvoir définir
l'organisation du réseau de neurones, la fonction de perte, le mode
de mise en forme des sorties, mais rarement modifier
le mode de communication entre les nœuds de calcul
et les serveurs de paramètres. Vous pouvez donc avoir recours pour tout cela
aux fonctionnalités intégrées des Estimators tout en gardant
un contrôle précis sur le modèle. Il se trouve par ailleurs que Keras
nous permet d'écrire notre propre modèle. Si vous utilisez Keras, vous pouvez souhaiter
vous en servir pour écrire un modèle, mais entraîner et évaluer
ce modèle Keras à l'aide de l'Estimator. La possibilité d'utiliser Keras
pour écrire un modèle est un autre exemple du type de flexibilité
dont vous pouvez souhaiter bénéficier, et c'est ce dont il va être
question dans ce module.