皆様が ある論文を
読むとします その中で 時系列の将来値を予測する
優れたモデルが扱われています コードも掲載されています LSTMCellなどの聞き慣れない概念や Static_rnnなどの見慣れない
TensorFlow関数を使っています Matmulなどの
低レベルTensorFlow操作も少し行います 今のところ これらの用語の意味や
機能は心配しないでください この点は 専門分野のコース9
シーケンスモデルで見ていきます ここでは この関数を単なる
ブラックボックスとして扱いましょう 基本的に 入力は時系列です 時間を表す値からなる配列です N_INPUTSはこの時系列の長さです predictions（予測）はモデルの出力です 出力配列には N_OUTPUTS数があります これらは このモデルで予測される
時系列の将来値を表します さて 皆様はこのモデルを
トレーニングしたいと考えます でも これはモデルに過ぎません
単なる数学です 依然としてデータを読み込む必要があり トレーニングして評価する必要もあります これを分散型の
フォールトトレラントな方法で行い 仕組みを少し調整したいと
思うかもしれません これをEstimatorフレームワークに
まとめるのが適切でしょう この方法で
分散トレーニングや スケーリングされた予測などが
得られるからです では それを行う方法を
見ていきましょう 最初にtrain_and_evaluate
関数を見てください estimator、train_spec、eval_specという
3つのパラメータがあります train_specとeval_specは
定型Estimatorのパラメータと同じで これらは入力関数とデータセットを使って
データの入力方法を管理します さらに トレーニングの時間の長さ、 評価の頻度、
エクスポートのタイミングも管理します ここで違うのはtrain_and_evaluateの
最初のパラメータestimatorです 以前には 線形回帰、DNN回帰、
線形分類器などを作成することで Estimatorを作りました こうして定型つまり作成済み
Estimatorを作りました しかし今は 基底クラスEstimatorを作ります ここでは estimatorを単に
tf.estimators.Estimatorに設定しています 基底クラスestimatorには
2つのパラメータがあります 2番目のパラメータは定型Estimatorです これはチェックポイントを保存する
出力ディレクトリです 1番目のパラメータはモデル関数です このモデル関数myfuncはどんな関数ですか myfuncはestimator_specです つまり myfuncは
tf.estimater.EstimatorSpecを返します 3つのパラメータ features、targets、
modeを受け入れます featuresとtargetsは
聞き覚えがあるでしょう たとえばトレーニング入力関数から
これが返されます featuresは複数の特徴からなる辞書です この場合 その辞書から
INCOLに対応するテンソルを導き出します targetsは単なるラベルです これも トレーニング入力関数から返されます modeは3つの値
train、eval、predictのいずれかです このモデルが必要になる理由を
間もなくお見せします この3つの入力値のうち myfuncの役割は
estimator_specを作成して返すことです eestimator_specには
6つのものが含まれます 最初のパラメータmodeでは単に 入力されたものを
そのまま渡すだけです 2番目のパラメータpredictionsは
モデルの出力です predictionsは辞書である必要があります キー名と対応するテンソルを提供します ここでは predictions_dictが
1つのキーだけで構成されます それをpredictedと呼びます テンソルはもちろん
論文のモデルの出力です predictionsを使用して
エクスポート済み出力を作成します predictionsだけでなくそれ以外のものも
エクスポートできます たとえばモデルから 学習済みの埋め込みをエクスポートできます ここで キーと
それに対応するテンソルを指定します estimator_specの
他の構成要素も見てみましょう つまり損失loss、
トレーニングオペレーションtrain_op、 評価指標オペレーション
eval_metric_opsです trainモードの場合にのみ
train_opを実施する必要があります evalモードの場合にのみ
評価指標を計算する必要があります lossをtargets、labels、predictionsの間の
平均2乗誤差に設定します train_opはこの場合 確率最急降下（SGD）を使用した
損失関数の最適化からなります このモデルではSGDが使用されると 論文に書かれているという想定です 評価指標は辞書です 評価するすべての指標で構成されます ここでは 2乗平均平方根誤差だけを計算します 予測の際にはこれらの
どのオペレーションも実行されません その理由はラベルがないからです ですから すべてのオペレーション（op）を
単にnoneに設定しました 要約すると基底クラスestimatorで
train_and_evaluateを呼び出します その際 estimator_specを返す関数を渡します これで カスタムEstimatorができました