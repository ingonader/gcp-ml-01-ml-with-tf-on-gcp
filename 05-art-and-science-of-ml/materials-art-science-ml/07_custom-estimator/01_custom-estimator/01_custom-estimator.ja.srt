1
00:00:00,000 --> 00:00:02,895
再開しましょう
このモジュールでは

2
00:00:02,895 --> 00:00:07,580
カスタムEstimatorを書く方法を
説明します

3
00:00:07,580 --> 00:00:09,595
このコースでは

4
00:00:09,595 --> 00:00:14,005
MLのツールキットに備わっている
さまざまな機能を見ていきます

5
00:00:14,005 --> 00:00:17,720
定型のEstimatorはとても役立ちますが

6
00:00:17,720 --> 00:00:22,200
定型Estimatorを拡張したいと
思う場合も生じてくるでしょう

7
00:00:22,200 --> 00:00:23,675
そのために

8
00:00:23,675 --> 00:00:26,800
カスタムEstimatorを書く方法を学習します

9
00:00:26,800 --> 00:00:28,820
カスタムEstimatorを作成すると

10
00:00:28,820 --> 00:00:34,019
モジュールの機能自体を
より効果的に制御しながら

11
00:00:34,019 --> 00:00:37,790
Estimator APIの機能を
活用し続けることで

12
00:00:37,790 --> 00:00:42,100
モデルのトレーニングと評価を
分散できます

13
00:00:42,100 --> 00:00:44,455
最後に この機会に

14
00:00:44,455 --> 00:00:48,415
TensorFlowとKerasとの関係を
ご説明します

15
00:00:48,415 --> 00:00:51,430
これに関する質問をよく受けるからです

16
00:00:51,430 --> 00:00:55,240
カスタムEstimatorでは
Kerasの使用を考慮できる場合があります

17
00:00:55,240 --> 00:01:01,670
なぜなら KerasはカスタムEstimatorの
モデル関数を書く便利な方法だからです

18
00:01:01,670 --> 00:01:04,430
Kerasはディープラーニング
モデル向けの

19
00:01:04,430 --> 00:01:08,700
便利なオープンソース
フロントエンドです

20
00:01:08,700 --> 00:01:12,060
このモジュールでKerasモデルを
簡単に見ていきます

21
00:01:12,060 --> 00:01:18,320
また KerasモデルをEstimator
フレームワークに取り込む方法も学習します

22
00:01:18,320 --> 00:01:22,345
Estimator APIを使って
多くのことができます

23
00:01:22,345 --> 00:01:26,515
メモリ外部データに関連する
問題を解決するために

24
00:01:26,515 --> 00:01:28,455
データセットAPIを使用できます

25
00:01:28,455 --> 00:01:32,480
トレーニング/評価の
機能が備わっているので

26
00:01:32,480 --> 00:01:36,115
トレーニングや評価を簡単に分散できます

27
00:01:36,115 --> 00:01:38,740
要約情報をエクスポートすることで

28
00:01:38,740 --> 00:01:43,120
トレーニングと評価だけでなく
モニタリングも可能です

29
00:01:43,120 --> 00:01:47,655
評価の時点でチェックポイントを
エクスポートできます

30
00:01:47,655 --> 00:01:51,500
チェックポイント自体に
障害回復が備わっています

31
00:01:51,500 --> 00:01:55,375
エクスポートすると モデルを簡単に
デプロイできるので

32
00:01:55,375 --> 00:01:56,815
本番環境で

33
00:01:56,815 --> 00:02:00,235
トレーニング済みモデルから
予測を提供できます

34
00:02:00,235 --> 00:02:05,230
また評価指標でハイパーパラメータの
チューニングも可能です

35
00:02:05,230 --> 00:02:11,745
でも私がEstimatorを好んでいる
主な理由はQuick Modelです

36
00:02:11,745 --> 00:02:16,300
どれほどクイック（速い）かは
専門分野のコース3で見ました

37
00:02:16,300 --> 00:02:19,780
モデルをトレーニングして
住宅価格を予測したい場合

38
00:02:19,780 --> 00:02:22,060
トレーニングコードの中で

39
00:02:22,060 --> 00:02:25,360
メモリ外部データセットを
読み込んでトレーニングし

40
00:02:25,360 --> 00:02:29,580
そのコード全体を1枚のスライドに
収めることができます

41
00:02:29,580 --> 00:02:34,180
分散トレーニングで大きなデータセットを
対象とするだけでなく

42
00:02:34,180 --> 00:02:38,575
多数のマシンでフォールト
トレラントな方法を使う場合

43
00:02:38,575 --> 00:02:41,360
いくつかの概念が加わります つまり

44
00:02:41,360 --> 00:02:48,785
トレーニング/評価パラメータの指定や
これらの操作の時間の長さ/頻度です

45
00:02:48,785 --> 00:02:51,240
さらに モデルを本番環境に提供するには

46
00:02:51,240 --> 00:02:55,090
エキスポートシグニチャを
指定する必要がありました

47
00:02:55,090 --> 00:03:00,700
それでも作成済みEstimatorの
シンプルなコードには

48
00:03:00,700 --> 00:03:09,895
強力なトレーニング/評価機能があるので
難しい操作を簡単に実現できます

49
00:03:09,895 --> 00:03:15,555
とはいえ 定型Estimatorが不十分な
場合もあるでしょう

50
00:03:15,555 --> 00:03:18,845
作成済み つまり定型
Estimatorを使用できるのは

51
00:03:18,845 --> 00:03:24,570
目的の操作にぴったり合う
定型Estimatorが存在する場合だけです

52
00:03:24,570 --> 00:03:29,075
TensorFlowチームは
汎用性の高いモデルの作成を試みています

53
00:03:29,075 --> 00:03:32,465
しかし さまざまなニーズをすべて満たす
定型モデルが

54
00:03:32,465 --> 00:03:34,845
存在しないことは明らかです

55
00:03:34,850 --> 00:03:41,790
そのような場合
Estimatorの機能を最大限に活用しながら

56
00:03:41,790 --> 00:03:46,205
そこで使われている数学モデルを
変更できるでしょう

57
00:03:46,205 --> 00:03:50,060
つまり データサイエンティスト
である皆様は

58
00:03:50,060 --> 00:03:53,615
ニューラルネットワークのレイアウト、

59
00:03:53,615 --> 00:03:57,750
損失関数、出力のフォーマット方法を
定義しますが

60
00:03:57,750 --> 00:04:01,950
皆様がワーカーとパラメータサーバーの
通信方法を変更することは

61
00:04:01,950 --> 00:04:03,630
極めて稀です

62
00:04:03,630 --> 00:04:08,325
ですから このように
Estimatorの組み込み機能を使いますが

63
00:04:08,325 --> 00:04:14,265
モデル自体の微調整は依然として可能です

64
00:04:14,265 --> 00:04:19,715
ところで Kerasでは独自のモデルを
書くことができます

65
00:04:19,715 --> 00:04:21,105
Kerasを使う場合

66
00:04:21,105 --> 00:04:24,010
Kerasでモデルを
書くことはできますが

67
00:04:24,010 --> 00:04:28,435
Estimatorを使って Kerasモデルを
トレーニング/評価してください

68
00:04:28,435 --> 00:04:31,170
ですから 
Kerastoratorモデルの使用は

69
00:04:31,170 --> 00:04:36,230
柔軟な選択肢の一例に過ぎません

70
00:04:36,230 --> 00:04:40,070
このモジュールでは
このような点を見ていきます