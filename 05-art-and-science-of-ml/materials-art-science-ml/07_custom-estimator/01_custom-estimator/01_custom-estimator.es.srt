1
00:00:00,640 --> 00:00:01,445
Bienvenido.

2
00:00:01,855 --> 00:00:06,890
En este módulo aprenderemos a escribir
estimadores personalizados.

3
00:00:07,440 --> 00:00:09,935
En este curso, abordamos varios temas

4
00:00:10,145 --> 00:00:13,290
que cualquier especialista en AA
debería conocer.

5
00:00:13,570 --> 00:00:17,150
Y aunque los estimadores prediseñados
son muy útiles

6
00:00:17,580 --> 00:00:21,720
en ocasiones necesitará algo distinto.

7
00:00:22,140 --> 00:00:23,485
Para hacerlo

8
00:00:23,735 --> 00:00:26,300
aprenderá a escribir
un estimador personalizado.

9
00:00:26,680 --> 00:00:28,710
Si escribe un estimador personalizado

10
00:00:28,930 --> 00:00:33,419
tendrá mayor control
sobre las funciones del modelo

11
00:00:33,889 --> 00:00:37,440
a la vez que aprovechará
la API de Estimator

12
00:00:37,640 --> 00:00:41,530
y su capacidad para distribuir
el entrenamiento y evaluación del modelo.

13
00:00:41,970 --> 00:00:42,930
Finalmente

14
00:00:43,140 --> 00:00:48,505
aprovecharé para explicar la relación
entre TensorFlow y Keras

15
00:00:48,855 --> 00:00:51,100
porque es una pregunta frecuente.

16
00:00:51,400 --> 00:00:54,940
Keras aparece cuando se habla
de estimadores personalizados

17
00:00:55,120 --> 00:00:59,650
porque ofrece una manera conveniente
de escribir la función del modelo

18
00:00:59,700 --> 00:01:01,200
para un estimador personalizado.

19
00:01:01,610 --> 00:01:03,450
Keras, si no lo conoce

20
00:01:03,580 --> 00:01:06,665
es un frontend
de código abierto muy intuitivo

21
00:01:06,815 --> 00:01:08,545
para modelos de aprendizaje profundo.

22
00:01:08,765 --> 00:01:11,480
En este módulo veremos brevemente
los modelos de Keras.

23
00:01:11,740 --> 00:01:15,635
También aprenderá
a incorporar modelos de Keras

24
00:01:15,915 --> 00:01:17,670
en el marco de trabajo del estimador.

25
00:01:18,190 --> 00:01:22,215
Recuerde que la API de Estimator
nos ayuda con muchas tareas.

26
00:01:22,645 --> 00:01:26,215
Resuelve problemas asociados
con los datos fuera de memoria

27
00:01:26,445 --> 00:01:28,075
mediante la API de Dataset.

28
00:01:28,475 --> 00:01:32,390
Nos permite distribuir fácilmente
el entrenamiento y la evaluación

29
00:01:32,690 --> 00:01:35,435
por medio de la función
train_and_evaluate.

30
00:01:35,865 --> 00:01:40,560
Exporta resúmenes
para que podamos entrenar y evaluar

31
00:01:40,800 --> 00:01:42,700
así como supervisar.

32
00:01:43,010 --> 00:01:47,305
Nos permite exportar puntos de control
cuando hacemos evaluaciones.

33
00:01:47,585 --> 00:01:50,800
Los puntos de control sirven además
ofrecen recuperación ante fallas.

34
00:01:51,260 --> 00:01:54,765
Exportar nos permite
implementar fácilmente un modelo

35
00:01:54,915 --> 00:01:58,375
para que durante la producción
podamos entregar predicciones

36
00:01:58,535 --> 00:02:00,035
a partir de un modelo entrenado.

37
00:02:00,275 --> 00:02:04,700
Las métricas de evaluación
nos permiten ajustar los hiperparámetros.

38
00:02:05,050 --> 00:02:10,905
En particular, me gusta el estimador
porque nos ofrece un modelo rápido.

39
00:02:11,495 --> 00:02:12,372
¿Qué tan rápido?

40
00:02:13,052 --> 00:02:15,740
Lo vimos
en el tercer curso de la especialización.

41
00:02:16,240 --> 00:02:19,350
Si desea entrenar un modelo
para predecir los precios de casas

42
00:02:19,640 --> 00:02:24,045
puede hacer que el código completo
lea conjuntos de datos fuera memoria

43
00:02:24,225 --> 00:02:25,490
para entrenar el modelo.

44
00:02:25,560 --> 00:02:29,040
Puede poner todo el código de entrenamiento
en una diapositiva.

45
00:02:29,580 --> 00:02:32,240
Agregar la capacidad
de entrenamiento distribuido

46
00:02:32,370 --> 00:02:34,120
no solo con grandes conjuntos de datos

47
00:02:34,300 --> 00:02:38,295
sino entrenar en muchas máquinas
con tolerancia a las fallas

48
00:02:38,595 --> 00:02:40,817
significó algunos conceptos adicionales

49
00:02:41,037 --> 00:02:44,340
como especificar
los parámetros de entrenamiento y evaluación

50
00:02:44,630 --> 00:02:47,775
así como la duración y frecuencia
con que se realizan estas tareas.

51
00:02:48,725 --> 00:02:52,380
También tuvimos que especificar
una firma de exportación

52
00:02:52,560 --> 00:02:54,740
para poner el modelo en producción.

53
00:02:56,460 --> 00:03:00,385
El estimador prediseñado
es un código muy simple

54
00:03:00,575 --> 00:03:04,210
que permite realizar fácilmente
muchas tareas

55
00:03:04,540 --> 00:03:08,485
gracias a la potente función
train_and_evaluate.

56
00:03:09,715 --> 00:03:13,755
Sin embargo, hay casos
en los que los estimadores prediseñados

57
00:03:13,755 --> 00:03:15,135
pueden no ser suficientes.

58
00:03:15,615 --> 00:03:18,595
Puede usar
estos estimadores prediseñados

59
00:03:18,935 --> 00:03:23,920
solo si existe alguno
para la tarea exacta que quiera realizar.

60
00:03:24,510 --> 00:03:28,565
El equipo de TensorFlow intenta capturar
los tipos de modelos más comunes

61
00:03:28,865 --> 00:03:34,305
pero, obviamente, nunca habrá un modelo
prediseñado para cada variación posible.

62
00:03:34,775 --> 00:03:35,960
En ese caso

63
00:03:36,220 --> 00:03:41,290
debe aprovechar lo más posible
la capacidad del estimador

64
00:03:41,820 --> 00:03:45,645
además de ser capaz de cambiar
el modelo matemático que se está usando.

65
00:03:46,215 --> 00:03:47,880
La idea es que usted

66
00:03:48,100 --> 00:03:49,615
como científico de datos

67
00:03:49,955 --> 00:03:53,260
defina el diseño de la red neuronal

68
00:03:53,470 --> 00:03:57,075
la función de pérdida,
el formato de las salidas

69
00:03:57,765 --> 00:04:00,150
pero casi nunca tendrá
que preocuparse de cambiar

70
00:04:00,150 --> 00:04:03,220
cómo se comunican los trabajadores
y los servidores de parámetros.

71
00:04:03,610 --> 00:04:07,745
Use la funcionalidad integrada
de los estimadores para todo eso

72
00:04:08,065 --> 00:04:13,215
pero mantenga un control detallado
sobre el modelo.

73
00:04:14,105 --> 00:04:19,405
A propósito, Keras nos permite escribir
nuestro propio modelo.

74
00:04:19,665 --> 00:04:20,885
Si usa Keras

75
00:04:21,205 --> 00:04:23,590
puede escribir un modelo con esta herramienta

76
00:04:23,880 --> 00:04:28,065
pero entrene y evalúe
su modelo de Keras con Estimator.

77
00:04:28,335 --> 00:04:30,510
Usar Keras para escribir su modelo

78
00:04:30,650 --> 00:04:35,190
es solo otro ejemplo
de la flexibilidad que puede lograr

79
00:04:35,800 --> 00:04:39,200
y de eso hablaremos en este módulo.