Bienvenido. En este módulo aprenderemos a escribir
estimadores personalizados. En este curso, abordamos varios temas que cualquier especialista en AA
debería conocer. Y aunque los estimadores prediseñados
son muy útiles en ocasiones necesitará algo distinto. Para hacerlo aprenderá a escribir
un estimador personalizado. Si escribe un estimador personalizado tendrá mayor control
sobre las funciones del modelo a la vez que aprovechará
la API de Estimator y su capacidad para distribuir
el entrenamiento y evaluación del modelo. Finalmente aprovecharé para explicar la relación
entre TensorFlow y Keras porque es una pregunta frecuente. Keras aparece cuando se habla
de estimadores personalizados porque ofrece una manera conveniente
de escribir la función del modelo para un estimador personalizado. Keras, si no lo conoce es un frontend
de código abierto muy intuitivo para modelos de aprendizaje profundo. En este módulo veremos brevemente
los modelos de Keras. También aprenderá
a incorporar modelos de Keras en el marco de trabajo del estimador. Recuerde que la API de Estimator
nos ayuda con muchas tareas. Resuelve problemas asociados
con los datos fuera de memoria mediante la API de Dataset. Nos permite distribuir fácilmente
el entrenamiento y la evaluación por medio de la función
train_and_evaluate. Exporta resúmenes
para que podamos entrenar y evaluar así como supervisar. Nos permite exportar puntos de control
cuando hacemos evaluaciones. Los puntos de control sirven además
ofrecen recuperación ante fallas. Exportar nos permite
implementar fácilmente un modelo para que durante la producción
podamos entregar predicciones a partir de un modelo entrenado. Las métricas de evaluación
nos permiten ajustar los hiperparámetros. En particular, me gusta el estimador
porque nos ofrece un modelo rápido. ¿Qué tan rápido? Lo vimos
en el tercer curso de la especialización. Si desea entrenar un modelo
para predecir los precios de casas puede hacer que el código completo
lea conjuntos de datos fuera memoria para entrenar el modelo. Puede poner todo el código de entrenamiento
en una diapositiva. Agregar la capacidad
de entrenamiento distribuido no solo con grandes conjuntos de datos sino entrenar en muchas máquinas
con tolerancia a las fallas significó algunos conceptos adicionales como especificar
los parámetros de entrenamiento y evaluación así como la duración y frecuencia
con que se realizan estas tareas. También tuvimos que especificar
una firma de exportación para poner el modelo en producción. El estimador prediseñado
es un código muy simple que permite realizar fácilmente
muchas tareas gracias a la potente función
train_and_evaluate. Sin embargo, hay casos
en los que los estimadores prediseñados pueden no ser suficientes. Puede usar
estos estimadores prediseñados solo si existe alguno
para la tarea exacta que quiera realizar. El equipo de TensorFlow intenta capturar
los tipos de modelos más comunes pero, obviamente, nunca habrá un modelo
prediseñado para cada variación posible. En ese caso debe aprovechar lo más posible
la capacidad del estimador además de ser capaz de cambiar
el modelo matemático que se está usando. La idea es que usted como científico de datos defina el diseño de la red neuronal la función de pérdida,
el formato de las salidas pero casi nunca tendrá
que preocuparse de cambiar cómo se comunican los trabajadores
y los servidores de parámetros. Use la funcionalidad integrada
de los estimadores para todo eso pero mantenga un control detallado
sobre el modelo. A propósito, Keras nos permite escribir
nuestro propio modelo. Si usa Keras puede escribir un modelo con esta herramienta pero entrene y evalúe
su modelo de Keras con Estimator. Usar Keras para escribir su modelo es solo otro ejemplo
de la flexibilidad que puede lograr y de eso hablaremos en este módulo.