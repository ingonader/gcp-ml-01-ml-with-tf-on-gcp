1
00:00:00,340 --> 00:00:04,220
Hier erfahren Sie, 
wie ein Keras-Estimator funktioniert.

2
00:00:04,220 --> 00:00:07,540
Wir haben 
eine Methode "make_keras_estimator"

3
00:00:07,540 --> 00:00:09,220
mit einem "output_dir".

4
00:00:09,220 --> 00:00:13,205
Sie importiert Keras aus TensorFlow.

5
00:00:13,205 --> 00:00:15,825
Das ist
das Zeitachsenmodell von vorhin,

6
00:00:15,825 --> 00:00:21,085
aber jetzt behandle ich es einfach als 
neuronales Netzwerk mit neun Eingaben.

7
00:00:21,085 --> 00:00:24,345
Ich erstelle damit 
ein Keras-Sequenzmodell

8
00:00:24,345 --> 00:00:29,435
und gebe an, dass ein Dense-Netzwerk 
mit 32 Eingabeknoten erstellt werden soll.

9
00:00:29,435 --> 00:00:31,975
Sie nehmen eine Relu-Aktivierung vor.

10
00:00:31,975 --> 00:00:34,457
Es gibt eine Ausgabe, "Dense(1)",

11
00:00:34,457 --> 00:00:37,762
und mein Verlust ist "mean_squared_error".

12
00:00:37,762 --> 00:00:40,181
Meine Optimierungsmethode ist "adam".

13
00:00:40,181 --> 00:00:43,640
Meine Evaluationsmesswerte sind
"Mean Absolute Error" und

14
00:00:43,640 --> 00:00:45,860
"Mean Absolute Percentage Error".

15
00:00:45,860 --> 00:00:50,290
Dann übergebe ich 
in "keras.estimator.model_to_estimator"

16
00:00:50,290 --> 00:00:53,430
das kompilierte Keras-Modell.

17
00:00:53,430 --> 00:00:56,770
Sie erstellen also 
ein Keras-Modell, kompilieren es

18
00:00:56,770 --> 00:00:59,430
und übergeben es in "model_to_estimator".

19
00:00:59,430 --> 00:01:02,810
Dieser Code ist bereits Teil

20
00:01:02,810 --> 00:01:06,790
dieses "simplernn"-Pakets.

21
00:01:06,790 --> 00:01:09,520
Das ist der Ordner "simplernn".

22
00:01:09,520 --> 00:01:15,160
"simplernn" enthält 
im Ordner "trainer" die Datei "model.py".

23
00:01:15,160 --> 00:01:20,468
"model.py" enthält 
die ursprüngliche simplernn-Funktion, die

24
00:01:20,468 --> 00:01:26,745
mit Features, Labels und Mode als
benutzerdefinierter Estimator fungierte.

25
00:01:26,745 --> 00:01:31,590
Sie enthält auch
einen "make_keras_estimator".

26
00:01:31,590 --> 00:01:33,990
Das ist der "make_keras_estimator".

27
00:01:33,990 --> 00:01:37,300
Der eben gezeigte Code
gehört zu "make_keras_estimator".

28
00:01:37,300 --> 00:01:40,722
Damit werden ein Sequenzmodell 
und eine Dense-Ebene erstellt,

29
00:01:40,722 --> 00:01:44,590
die mit "relu" aktiviert werden.
Es wird eine weitere Dense-Ebene erstellt,

30
00:01:44,590 --> 00:01:47,260
die Verlustmesswerte werden generiert etc.

31
00:01:47,260 --> 00:01:51,913
Die Funktion "train_and_evaluate" 
bietet beim Aufruf die Option "use_keras".

32
00:01:51,913 --> 00:01:55,950
Soll Keras verwendet werden,
rufe ich den "make_keras_estimator" auf,

33
00:01:55,950 --> 00:02:01,156
wenn nicht, den Basisklassen-Estimator,
der die Funktion "simple_rnn" übergibt.

34
00:02:01,156 --> 00:02:06,407
Der Code ist also 
bis auf den Parameter "use_karas" gleich.

35
00:02:06,407 --> 00:02:12,521
Dieser Parameter wird 
via Befehlszeile und "task.py" übergeben.

36
00:02:12,521 --> 00:02:18,788
"task.py" enthält 
ein neues Argument namens "--keras".

37
00:02:18,788 --> 00:02:22,316
Je nachdem, 
wie das gesetzt ist,

38
00:02:22,316 --> 00:02:27,679
werden Keras-Argumente 
in "model.train_and_evaluate" übergeben.

39
00:02:27,679 --> 00:02:30,260
Das ist entweder "True" oder "False".

40
00:02:30,260 --> 00:02:32,400
Im Notebook sehen Sie dann,

41
00:02:32,400 --> 00:02:35,760
wie sich "--keras" auswirkt.

42
00:02:35,760 --> 00:02:37,933
Da "--keras" übergeben wird,

43
00:02:37,933 --> 00:02:41,399
wird der simplernn-Code ausgeführt.

44
00:02:41,399 --> 00:02:45,199
Dieser wird in "train.csv" 
und "valid.csv" ausgeführt,

45
00:02:45,199 --> 00:02:47,359
es wird jedoch Keras verwendet.

46
00:02:47,359 --> 00:02:49,620
Das funktioniert ebenfalls.