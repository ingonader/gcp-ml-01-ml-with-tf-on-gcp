1
00:00:01,090 --> 00:00:06,365
入力テンソルから出力テンソルへのコードが
TensorFlowで書かれている場合の

2
00:00:06,365 --> 00:00:10,410
カスタムEstimatorの作成方法を
見てきました

3
00:00:10,410 --> 00:00:14,920
コードと
EstimatorSpecを返す関数とをまとめて

4
00:00:14,920 --> 00:00:19,425
その関数を基底クラスEstimatorに渡しました

5
00:00:19,425 --> 00:00:22,150
Kerasではこれは
どう機能するでしょうか

6
00:00:22,150 --> 00:00:24,715
そもそもKerasとは何ですか

7
00:00:24,715 --> 00:00:28,645
Kerasは高水準の
ニューラルネットワークAPIです

8
00:00:28,645 --> 00:00:32,974
畳込みと循環のニューラルネットワークの
両方をサポートします

9
00:00:32,974 --> 00:00:40,200
しかしTensorFlowと違って
KerasはCNN/RNNの実装ではありません

10
00:00:40,200 --> 00:00:46,885
KerasはPythonで書かれた
高水準ニューラルネットワークAPIですが

11
00:00:46,885 --> 00:00:51,305
バックエンドでTensorFlowをサポートします

12
00:00:51,305 --> 00:00:55,280
つまり Keras関数を呼び出すと
その関数から

13
00:00:55,280 --> 00:01:01,170
TensorFlow関数セットが呼び出され
機能が実装されます

14
00:01:01,170 --> 00:01:03,674
さらに KerasはTensorFlow以外にも

15
00:01:03,674 --> 00:01:11,710
CNTK、theanoなどの他のニューラル
ネットワーク実装での実行をサポートします

16
00:01:11,710 --> 00:01:16,440
Kerasは使いやすく
迅速なプロトタイプ化が可能です

17
00:01:16,440 --> 00:01:21,910
例として ここにKerasで書かれた
シーケンス分類モデルがあります

18
00:01:21,910 --> 00:01:27,530
埋め込みLSDM、Dropoutなどの
クラスがあります

19
00:01:27,530 --> 00:01:32,150
このように Kerasではモデルの
アーキテクチャを考えることができ

20
00:01:32,150 --> 00:01:35,200
低水準の実装を
気にする必要がありません

21
00:01:35,200 --> 00:01:39,860
たとえば TensorFlowで埋込みを作成するには
埋込み列を作ります

22
00:01:39,860 --> 00:01:40,760
そのためには

23
00:01:40,760 --> 00:01:45,520
トレーニングデータから
カテゴリ列を最初に作る必要があります

24
00:01:45,520 --> 00:01:49,515
Kerasではこのような実装の
詳細を気にしなくて済みます

25
00:01:49,515 --> 00:01:52,720
もちろん
もし埋め込みに達する前に

26
00:01:52,720 --> 00:01:57,740
何か異なる方法で
前処理を行いたい場合は

27
00:01:57,740 --> 00:02:01,395
Kerasのガイドを
深く調べる必要があります

28
00:02:01,395 --> 00:02:03,060
これは簡単とは限らず

29
00:02:03,060 --> 00:02:07,510
シンプルさと表現力の間には
しばしば トレードオフがあります

30
00:02:07,510 --> 00:02:12,965
ともかく Kerasでモデルを作ることは
よくあります

31
00:02:12,965 --> 00:02:16,550
ただし Kerasは迅速な
プロトタイプ化を意図しています

32
00:02:16,550 --> 00:02:19,055
ディストリビュータのトレーニングや

33
00:02:19,055 --> 00:02:20,975
スケール予測は処理されません

34
00:02:20,975 --> 00:02:26,755
ですから 本番環境にするには
Estimator APIを使用すべきでしょう

35
00:02:26,755 --> 00:02:30,785
多くの場合 Kerasで書かれた
MLプロトタイプに基づき

36
00:02:30,785 --> 00:02:33,685
プロトタイプを運用可能にする
必要があります

37
00:02:33,685 --> 00:02:35,875
どうすれば
よいでしょうか

38
00:02:35,875 --> 00:02:40,500
ヒントを得るために
もう少しコードを見てみましょう

39
00:02:40,500 --> 00:02:43,305
コードの詳細は気にしないでください

40
00:02:43,305 --> 00:02:45,585
このコードの最初の数行で

41
00:02:45,585 --> 00:02:49,015
階層化アーキテクチャが作成されます

42
00:02:49,015 --> 00:02:51,270
いったんモデルが作成されると

43
00:02:51,270 --> 00:02:59,480
損失関数、最適化手法、
評価指標を渡してコンパイルされます

44
00:02:59,480 --> 00:03:03,210
何かを思い出しますね
そうです

45
00:03:03,230 --> 00:03:06,840
カスタムEstimatorのモデル関数です

46
00:03:06,840 --> 00:03:11,010
では KerasとEstimator APIは
どのように混合しますか？

47
00:03:11,010 --> 00:03:16,970
答えは Kerasモデルをコンパイルすると
Estimatorが得られます

48
00:03:16,980 --> 00:03:22,310
古いKerasコードはスタンドアロンの
Kerasをインポートする可能性があります

49
00:03:22,310 --> 00:03:27,195
必要に応じてインポート文を変更して
TF.Kerasをインポートさせます

50
00:03:27,195 --> 00:03:31,250
この from tensorFlow import keras
によって

51
00:03:31,250 --> 00:03:34,120
Kerasが
TensorFlow呼び出しに含まれ

52
00:03:34,120 --> 00:03:36,110
それが可能になります

53
00:03:36,110 --> 00:03:41,120
次に keras.estimator.model_to_estimator
を呼び出し

54
00:03:41,120 --> 00:03:46,460
コンパイルされたモデルを渡すと
Estimatorが返されます

55
00:03:46,460 --> 00:03:50,740
呼び出されるmodel.Fitと
model.evaluateを捨てます

56
00:03:50,740 --> 00:03:53,605
このモデルを
どのようにトレーニングしますか

57
00:03:53,605 --> 00:03:57,654
通常と同じ方法で
このestimatorを使用します

58
00:03:57,654 --> 00:03:59,670
それとともにトレーニング入力関数

59
00:03:59,670 --> 00:04:05,640
評価入力関数、train spec、
eval spec、exporterなどを

60
00:04:05,640 --> 00:04:08,860
train and evaluateに渡します

61
00:04:08,870 --> 00:04:13,355
この方法で Kerasモデルを
本番環境化します

62
00:04:13,355 --> 00:04:15,190
覚えておくべき点として

63
00:04:15,190 --> 00:04:22,755
入力関数とKerasモデルとの関連付けでは
命名規則を使います

64
00:04:22,755 --> 00:04:26,925
XYZというKerasレイヤがある場合

65
00:04:26,925 --> 00:04:31,580
入力関数から返される
特徴（features）辞書の中に

66
00:04:31,580 --> 00:04:36,755
XYZ_inputという名前の特徴が必要です

67
00:04:36,755 --> 00:04:39,285
これをクイックデモで見てみましょう

68
00:04:39,285 --> 00:04:42,265
以前と同じNotebookを使用しますが

69
00:04:42,265 --> 00:04:46,560
デモの目的で
サンプルKerasモデルを使います