Hier erfahren Sie, 
wie ein Keras-Estimator funktioniert. Wir haben 
eine Methode "make_keras_estimator" mit einem "output_dir". Sie importiert Keras aus TensorFlow. Das ist
das Zeitachsenmodell von vorhin, aber jetzt behandle ich es einfach als 
neuronales Netzwerk mit neun Eingaben. Ich erstelle damit 
ein Keras-Sequenzmodell und gebe an, dass ein Dense-Netzwerk 
mit 32 Eingabeknoten erstellt werden soll. Sie nehmen eine Relu-Aktivierung vor. Es gibt eine Ausgabe, "Dense(1)", und mein Verlust ist "mean_squared_error". Meine Optimierungsmethode ist "adam". Meine Evaluationsmesswerte sind
"Mean Absolute Error" und "Mean Absolute Percentage Error". Dann übergebe ich 
in "keras.estimator.model_to_estimator" das kompilierte Keras-Modell. Sie erstellen also 
ein Keras-Modell, kompilieren es und übergeben es in "model_to_estimator". Dieser Code ist bereits Teil dieses "simplernn"-Pakets. Das ist der Ordner "simplernn". "simplernn" enthält 
im Ordner "trainer" die Datei "model.py". "model.py" enthält 
die ursprüngliche simplernn-Funktion, die mit Features, Labels und Mode als
benutzerdefinierter Estimator fungierte. Sie enthält auch
einen "make_keras_estimator". Das ist der "make_keras_estimator". Der eben gezeigte Code
gehört zu "make_keras_estimator". Damit werden ein Sequenzmodell 
und eine Dense-Ebene erstellt, die mit "relu" aktiviert werden.
Es wird eine weitere Dense-Ebene erstellt, die Verlustmesswerte werden generiert etc. Die Funktion "train_and_evaluate" 
bietet beim Aufruf die Option "use_keras". Soll Keras verwendet werden,
rufe ich den "make_keras_estimator" auf, wenn nicht, den Basisklassen-Estimator,
der die Funktion "simple_rnn" übergibt. Der Code ist also 
bis auf den Parameter "use_karas" gleich. Dieser Parameter wird 
via Befehlszeile und "task.py" übergeben. "task.py" enthält 
ein neues Argument namens "--keras". Je nachdem, 
wie das gesetzt ist, werden Keras-Argumente 
in "model.train_and_evaluate" übergeben. Das ist entweder "True" oder "False". Im Notebook sehen Sie dann, wie sich "--keras" auswirkt. Da "--keras" übergeben wird, wird der simplernn-Code ausgeführt. Dieser wird in "train.csv" 
und "valid.csv" ausgeführt, es wird jedoch Keras verwendet. Das funktioniert ebenfalls.