1
00:00:00,000 --> 00:00:02,985
Welcome back. In this module,

2
00:00:02,985 --> 00:00:07,200
we are going to be learning about how to write custom estimators.

3
00:00:07,200 --> 00:00:10,065
In this course, we're looking at a variety of things

4
00:00:10,065 --> 00:00:13,410
that every ML practitioners should have in their toolkit.

5
00:00:13,410 --> 00:00:17,150
And while canned estimators will take you a long way,

6
00:00:17,150 --> 00:00:21,930
there will be instances when you will want to go beyond canned estimators.

7
00:00:21,930 --> 00:00:23,535
In order to do that,

8
00:00:23,535 --> 00:00:26,470
you will learn how to write a custom estimator.

9
00:00:26,470 --> 00:00:28,640
By writing a custom estimator,

10
00:00:28,640 --> 00:00:33,599
you'll be able to gain greater control over the module function itself,

11
00:00:33,599 --> 00:00:35,820
while still taking advantage of

12
00:00:35,820 --> 00:00:38,400
the estimator API and its ability

13
00:00:38,400 --> 00:00:41,590
to distribute the training and evaluation of your model.

14
00:00:41,590 --> 00:00:45,270
Finally, I'll use this opportunity to explain

15
00:00:45,270 --> 00:00:48,705
the relationship between TensorFlow and Keras,

16
00:00:48,705 --> 00:00:51,110
because this is a question I get a lot.

17
00:00:51,110 --> 00:00:55,470
Keras comes into play when you think of custom estimators because

18
00:00:55,470 --> 00:01:01,280
Keras provides a convenient way to write the model function for a custom estimator.

19
00:01:01,280 --> 00:01:03,510
Keras, if you haven't heard of it,

20
00:01:03,510 --> 00:01:08,550
is a very intuitive opensource front end to deep learning models.

21
00:01:08,550 --> 00:01:11,340
We'll look at Keras models briefly in this module.

22
00:01:11,340 --> 00:01:17,910
So you will also learn how to incorporate Keras models into the estimator framework.

23
00:01:17,910 --> 00:01:22,395
Recall that the estimator API does quite a few things for us.

24
00:01:22,395 --> 00:01:26,365
It solves problems associated with out of memory data,

25
00:01:26,365 --> 00:01:28,105
using the data set API.

26
00:01:28,105 --> 00:01:31,530
It gives us a handy way to distribute our training and

27
00:01:31,530 --> 00:01:35,595
evaluation by providing the train and evaluate function.

28
00:01:35,595 --> 00:01:40,800
It exports summaries so that not only can we train and evaluate,

29
00:01:40,800 --> 00:01:42,720
we can also monitor.

30
00:01:42,720 --> 00:01:47,385
It allows us to export checkpoints at the time we evaluate.

31
00:01:47,385 --> 00:01:51,000
The checkpoints themselves provide fault recovery.

32
00:01:51,000 --> 00:01:56,625
The exporting allows a model to be easily deployed so that in production,

33
00:01:56,625 --> 00:01:59,895
we can serve predictions from a trained model.

34
00:01:59,895 --> 00:02:04,800
The evaluation metrics also allow for hyper parameter tuning.

35
00:02:04,800 --> 00:02:12,625
But mainly I like the estimator because it gives us a quick model. How quick?

36
00:02:12,625 --> 00:02:15,930
We saw this in the third course of the specialization.

37
00:02:15,930 --> 00:02:19,410
If you want to train a model to predict housing prices,

38
00:02:19,410 --> 00:02:25,350
you can fit the entire training code to read out of memory data sets and train the model,

39
00:02:25,350 --> 00:02:29,270
you can fit that entire training code into one slide.

40
00:02:29,270 --> 00:02:32,340
Adding the ability to do distributor training,

41
00:02:32,340 --> 00:02:34,080
not just large data sets,

42
00:02:34,080 --> 00:02:38,405
but to do training on many machines in a fault tolerant way,

43
00:02:38,405 --> 00:02:42,720
meant a few extra concepts of specifying the training and

44
00:02:42,720 --> 00:02:48,285
evaluation parameters and how long and how often to do these things.

45
00:02:48,285 --> 00:02:52,480
Also, we had to specify an expert signature,

46
00:02:52,480 --> 00:02:54,740
so we could productionize the model.

47
00:02:54,740 --> 00:03:01,740
Still the pre-built estimator is very simple code that makes a lot of

48
00:03:01,740 --> 00:03:08,995
hard things easy to accomplish by means of the powerful train and evaluate function.

49
00:03:08,995 --> 00:03:15,335
Still there are situations where canned estimators can be insufficient.

50
00:03:15,335 --> 00:03:19,545
You can use pre-built or canned estimators only if

51
00:03:19,545 --> 00:03:24,170
a canned estimator exists for the exact thing that you want to do.

52
00:03:24,170 --> 00:03:28,725
The TensorFlow team tries to capture the most common types of models,

53
00:03:28,725 --> 00:03:34,505
but obviously there will never be a canned model for every variation that you need.

54
00:03:34,505 --> 00:03:37,850
In that case, you will want to take advantage

55
00:03:37,850 --> 00:03:41,540
of as much of the estimator capability as you can,

56
00:03:41,540 --> 00:03:45,905
while being able to change the mathematical model being used.

57
00:03:45,905 --> 00:03:48,020
The idea is that you,

58
00:03:48,020 --> 00:03:49,745
as a data scientist,

59
00:03:49,745 --> 00:03:53,300
wants to define the layout of the neural network,

60
00:03:53,300 --> 00:03:57,395
the last function, the way you format the outputs,

61
00:03:57,395 --> 00:04:00,110
but you will rarely be concerned about changing

62
00:04:00,110 --> 00:04:03,190
the way workers and parameter servers communicate.

63
00:04:03,190 --> 00:04:07,805
So use estimators built in functionality for all that stuff

64
00:04:07,805 --> 00:04:13,535
but retain fine grained control over the model itself.

65
00:04:13,535 --> 00:04:19,505
Incidentally, what Keras does is that it allows us to write our own model.

66
00:04:19,505 --> 00:04:21,015
If you're using Keras,

67
00:04:21,015 --> 00:04:23,760
you might want to write a model using Keras,

68
00:04:23,760 --> 00:04:28,135
but train and evaluate the Keras model using estimator.

69
00:04:28,135 --> 00:04:30,930
So, using kerastorator model is

70
00:04:30,930 --> 00:04:35,760
just another example of the kind of flexibility that you might want,

71
00:04:35,760 --> 00:04:39,910
and that is what we're going to talk about in this model.