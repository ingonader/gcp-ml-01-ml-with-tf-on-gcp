1
00:00:00,430 --> 00:00:04,330
Keras Estimatorの機能について
説明しましょう

2
00:00:04,330 --> 00:00:07,820
make_keras_estimator
というメソッドで

3
00:00:07,820 --> 00:00:09,730
output_dirを指定し

4
00:00:09,730 --> 00:00:13,315
from tensorFlow import keras
を行います

5
00:00:13,315 --> 00:00:16,115
ここまでは
以前の時系列モデルと同じですが

6
00:00:16,115 --> 00:00:20,755
今回は 単純な古い9個の
入力ニューラルネットワークとして扱います

7
00:00:20,755 --> 00:00:24,785
これから 
KerasのSequentialモデルを作り

8
00:00:24,785 --> 00:00:29,765
32個の入力ノードを持つデンス（Dense）
ネットワークの作成を指定します

9
00:00:29,765 --> 00:00:31,735
reluでアクティブ化し

10
00:00:31,735 --> 00:00:34,507
1つの出力Dense(1)

11
00:00:34,507 --> 00:00:37,992
損失（loss）はmean_squared_error

12
00:00:37,992 --> 00:00:40,051
optimizerはadam

13
00:00:40,051 --> 00:00:42,990
評価マトリクスは平均絶対誤差（mas）と

14
00:00:42,990 --> 00:00:45,730
平均絶対誤差率（mape）です

15
00:00:45,730 --> 00:00:50,070
次に 
keras.estimator.model to estimatorで

16
00:00:50,070 --> 00:00:53,820
このkerasコンパイル済みモデルを渡します

17
00:00:53,820 --> 00:00:56,970
このように kerasモデルを作成し
コンパイルして

18
00:00:56,970 --> 00:00:59,290
model_to_estimatorに渡します

19
00:00:59,290 --> 00:01:01,175
このコードはすでに

20
00:01:01,175 --> 00:01:05,750
このsimplernnパッケージに含まれます

21
00:01:05,750 --> 00:01:09,860
見てみましょう
これがsimplernnです

22
00:01:09,860 --> 00:01:15,290
simplernnの中に
trainerとmodel.pyがあり

23
00:01:15,290 --> 00:01:21,168
model.pyの中に
元のsimple_rnn関数がありました

24
00:01:21,168 --> 00:01:27,155
features、labels、modeを受け入れ
custom_estimatorの処理を行います

25
00:01:27,155 --> 00:01:31,690
make_keras_estimatorもあります

26
00:01:31,690 --> 00:01:33,990
これがmake_keras_estimatorです

27
00:01:33,990 --> 00:01:36,930
先ほどお見せしたコードが
ここにあります

28
00:01:36,930 --> 00:01:40,142
Sequencialモデルを作成し
Denseレイヤを作成し

29
00:01:40,142 --> 00:01:44,030
reluでモデルをアクティブ化し
別のDenseレイヤを作成し

30
00:01:44,030 --> 00:01:46,840
loss metricsなどもあります

31
00:01:46,840 --> 00:01:52,213
train and evaluateを行うとき
use_kerasオプションがあります

32
00:01:52,213 --> 00:01:55,540
もしuse_kerasならば
make_keras_estimatorを呼び出し

33
00:01:55,540 --> 00:02:01,596
そうでないなら基底クラスestimatorを
呼び出し 関数simple_rnnを渡します

34
00:02:01,596 --> 00:02:04,477
ですから 本質的に同じコードです

35
00:02:04,477 --> 00:02:07,447
この1つのパラメータuse_kerasは

36
00:02:07,447 --> 00:02:13,651
task.pyを使って
コマンドラインから渡されます

37
00:02:13,651 --> 00:02:19,088
task.pyの中には
--kerasという新しい引数があります

38
00:02:19,088 --> 00:02:22,756
それが設定されるかどうかに応じて

39
00:02:22,756 --> 00:02:27,769
kerasの引数を
model_train_and_evaluateに渡します

40
00:02:27,769 --> 00:02:30,020
これはtrueまたはfalseです

41
00:02:30,020 --> 00:02:32,290
ここで Notebookに戻ると

42
00:02:32,290 --> 00:02:35,780
--kerasの効果がここに見えます

43
00:02:35,780 --> 00:02:38,263
--kerasを渡したので

44
00:02:38,263 --> 00:02:41,309
simple rnnコードを実行し

45
00:02:41,309 --> 00:02:45,199
対象はtrain.csvとvalue.csvですが

46
00:02:45,199 --> 00:02:47,929
代わりにkerasを使用します

47
00:02:47,929 --> 00:02:50,380
これも動作するはずです