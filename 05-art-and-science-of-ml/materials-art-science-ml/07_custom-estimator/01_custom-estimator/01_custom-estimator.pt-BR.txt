Bem-vindo de volta. Neste módulo, vamos aprender a escrever
Estimators personalizados. Neste curso, vamos analisar
vários itens que todos que usam ML precisam ter
no toolkit. Os Estimators automáticos ajudam muito, mas haverá casos em que você
vai querer ir além deles. Para fazer isso, você aprenderá a escrever
um Estimator personalizado. Ao escrever um Estimator personalizado, você poderá ganhar maior controle
sobre a própria função do módulo, aproveitando ao mesmo tempo a API Estimator e a capacidade dela de distribuir o treinamento
e a avaliação do seu modelo. Por fim, usarei esta oportunidade
para explicar a relação entre o TensorFlow e o Keras, porque essa é uma pergunta
que me fazem bastante. O Keras entra em cena quando você pensa em
Estimators personalizados porque oferece um modo prático de escrever a função de
modelo para um Estimator personalizado. O Keras, se você ainda
não ouviu falar dele, é um front-end de código aberto
muito intuitivo para modelos de aprendizagem profunda. Vamos ver modelos do Keras
brevemente neste módulo. Você também aprenderá a incorporar modelos
do Keras na biblioteca do Estimator. Lembre-se que a API Estimator
faz algumas coisas para nós. Ela resolve problemas associados
a dados sem memória, usando a API Dataset. Ela nos fornece uma maneira prática
de distribuir nosso treinamento e nossa avaliação, oferecendo
a função de treinamento e avaliação. Ela exporta resumos para que não apenas
possamos treinar e avaliar, mas também monitorar. Isso nos permite exportar pontos
de verificação na hora em que avaliamos. Os pontos de verificação em si
fornecem recuperação de falhas. A exportação permite que um modelo seja
implantado facilmente para que, na produção, possamos veicular
previsões de um modelo treinado. As métricas de avaliação também permitem
o ajuste de hiperparâmetros. Gosto do Estimator principalmente porque
ele nos dá um modelo rápido. Qual a velocidade dele? Vimos isso no terceiro curso
da especialização. Se você quer treinar um modelo
para prever preços de imóveis, pode ajustar todo o código de treino
para ler conjuntos de dados de memória e treinar o modelo. Você pode ajustar
todo o código de treino em um slide. Adicionar a capacidade de fazer
o treinamento do distribuidor, não só grandes conjuntos de dados, mas fazer treinamento em muitas máquinas
de uma maneira tolerante a falhas, traz alguns conceitos extras de
especificação dos parâmetros de treino e avaliação e por quanto tempo
e com que frequência fazer isso. Além disso, tivemos que especificar
uma assinatura especializada para que pudéssemos produzir o modelo. Ainda assim, o Estimator pré-criado é um
código muito simples que faz com que muitas coisas difíceis
sejam fáceis de realizar por meio de uma função poderosa
de treino e avaliação. Contudo, há situações em que os Estimators
automáticos podem ser insuficientes. Você pode usar Estimators pré-criados
ou automáticos somente se existir um Estimator automático
para o que você quer fazer exatamente. A equipe do TensorFlow tenta capturar
os tipos mais comuns de modelos, mas, obviamente, nunca haverá um modelo
automático para cada variação necessária. Nesse caso, você vai querer aproveitar o máximo possível
da capacidade do Estimator, e ainda poderá alterar
o modelo matemático em uso. A ideia é que você, como cientista de dados, queira definir o layout da rede neural, a última função,
a maneira de formatar as saídas, mas raramente se preocupará em mudar o modo como os workers e
os servidores de parâmetros se comunicam. Portanto, use Estimators criados em
funcionalidade para tudo isso, mas retenha um controle refinado
sobre o próprio modelo. Aliás, o que o Keras faz é nos permitir
escrever nosso próprio modelo. Se você estiver usando o Keras, pode querer escrever um modelo
usando o Keras, mas treinar e avaliar o modelo do Keras
usando o Estimator. Então, usar o modelo de kerastorator é apenas outro exemplo do tipo
de flexibilidade que você pode querer, e é sobre isso
que vamos falar neste módulo.