前のレッスンでは ルールを使用して埋め込みを
手動で作成する方法を説明しました 観客の平均年齢や
チケットの売上総数といった属性を利用して 50万の次元空間ができるはずの映画を すべて2次元空間に投影しました この2次元埋め込みでは 軸に「年齢」や「チケット売り上げ」のほか 「アート系/ヒット作」
「子供/成人」などの名前をつけました ただ必ずしも軸に名前を
付ける必要はありません 重要なのは次元数が50万から
2つに減ったということです これは映画の属性を手動で
確認することで実現しました 50万から2つへの次元縮退を行うことで
どのような影響があるでしょうか それぞれの映画の2D埋め込みは
2つの実数値に関連付けられていますので 2D空間を指せば
それぞれの映画を表すことができます この埋め込みを行う
重要な理由の1つを説明します たとえばあるユーザーが
ある映画を気に入るかどうか 予測するようにモデルを
トレーニングするとします Dの情報を持つモデルは Nの情報を持つモデルよりも
トレーニングが容易です NはDよりはるかに大きいからです 情報ノードの数が少ないほど
最適化を要する重みが少なくなります すなわちモデルのトレーニングが高速化し 過学習の可能性も低下します 埋め込みは問題を単純化する手法です ただしこの次元縮退は 情報が失われないように
行う必要があります 適切な埋め込みを行うには
どうすればいいでしょうか 埋め込みは通常のトレーニングプロセスの
一部としてデータから学習できます 別個のプロセスは不要です まず元の情報をワンホットエンコードされた
配列として表し それを埋め込み層に送ります このアプローチでは埋め込み層は 1次元あたりユニット数1の
単なる隠れ層です モデルのトレーニングでは
ラベルを使用しますので 埋め込みはこのラベルに
基づいて変化します 隠れユニットは直感的に
D次元空間の項目を 整理する方法を見つけ出し 最終目標を有効に最適化します ちょっとした問題として 情報の保管にどれだけのメモリが
必要かということがあります カテゴリ情報は可変ですが 潜在的な値の数は50万にのぼります そのため50万の情報ノードを作成し 巨大なマトリックスの演算を
行う必要があります