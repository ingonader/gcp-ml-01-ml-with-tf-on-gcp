1
00:00:00,770 --> 00:00:04,915
En el curso anterior
aprendió brevemente sobre incorporaciones

2
00:00:05,055 --> 00:00:06,980
así como sobre combinaciones de atributos.

3
00:00:07,250 --> 00:00:10,830
Pero las incorporaciones se encuentran
en todos los aspectos del AA actual

4
00:00:11,010 --> 00:00:13,815
y no se limitan
a las combinaciones de atributos

5
00:00:14,035 --> 00:00:15,990
o incluso a datos estructurados.

6
00:00:16,260 --> 00:00:17,140
De hecho

7
00:00:17,340 --> 00:00:22,015
las usará bastante
en modelos de imágenes y de texto.

8
00:00:22,855 --> 00:00:27,200
Resumamos cómo
entendemos las incorporaciones.

9
00:00:28,030 --> 00:00:31,000
Dijimos que podemos crear
un modelo de aprendizaje automático

10
00:00:31,000 --> 00:00:33,955
para predecir un aspecto del tráfico

11
00:00:34,385 --> 00:00:37,055
quizá la hora
en la que el siguiente vehículo

12
00:00:37,325 --> 00:00:38,995
llegará a una intersección.

13
00:00:39,485 --> 00:00:42,015
Tenemos una cantidad
de entradas en nuestro modelo.

14
00:00:42,505 --> 00:00:46,090
Buscamos entradas categóricas
específicamente

15
00:00:46,410 --> 00:00:48,465
la hora del día y el día de la semana.

16
00:00:49,105 --> 00:00:52,820
Dijimos que se podría mejorar
el modelo de AA en gran medida

17
00:00:53,900 --> 00:00:56,670
si, en vez de tener
la hora del día y el día de la semana

18
00:00:56,760 --> 00:00:58,590
como entradas independientes

19
00:00:59,030 --> 00:01:03,040
las concatenamos para crear
una combinación de atributos.

20
00:01:03,780 --> 00:01:06,895
Dijimos que, si usamos
una cantidad grande de depósitos hash

21
00:01:07,015 --> 00:01:08,970
cuando hagamos
la combinación de atributos

22
00:01:09,520 --> 00:01:13,395
podemos estar bastante seguros
de que cada depósito

23
00:01:13,715 --> 00:01:17,330
tendrá solo una combinación de hora y día.

24
00:01:18,540 --> 00:01:22,480
En este punto,
introdujimos las incorporaciones.

25
00:01:23,120 --> 00:01:24,500
Dijimos que

26
00:01:25,030 --> 00:01:28,230
si en vez de usar codificación one-hot
en la combinación de atributos

27
00:01:28,610 --> 00:01:30,370
la usamos como es

28
00:01:30,850 --> 00:01:33,437
podríamos pasarla por una capa densa

29
00:01:33,917 --> 00:01:37,394
y luego entrenar el modelo
para predecir el tráfico como antes.

30
00:01:38,244 --> 00:01:39,997
Esta capa densa

31
00:01:40,347 --> 00:01:42,870
que muestran los nodos amarillo y verde

32
00:01:43,290 --> 00:01:44,640
crea una incorporación.

33
00:01:45,450 --> 00:01:48,855
Las incorporaciones
son números con valor real

34
00:01:49,155 --> 00:01:50,650
ya que son la suma ponderada

35
00:01:50,670 --> 00:01:52,750
de los valores
de la combinación de atributos.

36
00:01:53,880 --> 00:01:55,315
Debemos tener en cuenta

37
00:01:55,585 --> 00:01:58,980
que los pesos que se usan
en la capa de incorporación

38
00:01:59,120 --> 00:02:01,331
los nodos amarillo y verde

39
00:02:01,421 --> 00:02:04,912
se aprenden a partir de los datos.

40
00:02:05,550 --> 00:02:06,835
El punto es

41
00:02:07,145 --> 00:02:09,950
que si entrena estos pesos
en un conjunto de datos

42
00:02:10,550 --> 00:02:13,200
para resolver un problema útil

43
00:02:13,420 --> 00:02:15,420
algo genial ocurre.

44
00:02:16,120 --> 00:02:18,499
La combinación de atributos de día y hora

45
00:02:18,679 --> 00:02:21,595
tiene 168 valores únicos

46
00:02:22,341 --> 00:02:28,285
pero forzamos su representación
con solo dos números de valor real.

47
00:02:30,249 --> 00:02:34,484
El modelo aprende a incorporar
la combinación de atributos

48
00:02:34,634 --> 00:02:36,542
en un espacio dimensional inferior.

49
00:02:37,395 --> 00:02:43,299
Sugerimos que la caja verde
tiende a capturar el tráfico peatonal

50
00:02:43,513 --> 00:02:46,842
y la amarilla, el tráfico automotor.

51
00:02:47,133 --> 00:02:51,639
Pero no importa
lo que esas dos dimensiones capturen.

52
00:02:52,088 --> 00:02:57,737
Lo importante es que toda la información
de hora del día y día de la semana

53
00:02:58,027 --> 00:03:02,110
en lo que se refiere
al tráfico en intersecciones urbanas

54
00:03:02,290 --> 00:03:05,705
se reduce a solo dos números.

55
00:03:06,716 --> 00:03:10,579
Si hace esto en un conjunto de datos
lo suficientemente grande y apropiado

56
00:03:11,150 --> 00:03:15,671
estos números tendrán
una propiedad muy útil.

57
00:03:16,719 --> 00:03:20,049
Las horas que son similares
en cuanto al tráfico

58
00:03:20,259 --> 00:03:23,049
obtendrán números de valor real cercanos.

59
00:03:23,456 --> 00:03:26,517
Y las horas que son diferentes
en cuanto al tráfico

60
00:03:26,847 --> 00:03:29,577
obtendrán números de valor real diferentes.

61
00:03:30,948 --> 00:03:34,649
Luego, vimos cómo crear
una incorporación en TensorFlow.

62
00:03:35,238 --> 00:03:36,553
Para crear una incorporación

63
00:03:36,763 --> 00:03:40,275
use el método
embedding_column en tf.feature_column

64
00:03:41,125 --> 00:03:43,935
y pasen la columna categórica

65
00:03:43,995 --> 00:03:45,381
que desee incorporar.

66
00:03:46,063 --> 00:03:49,126
Esto funciona
con cualquier columna categórica

67
00:03:49,296 --> 00:03:51,161
no solo con la combinación de atributos.

68
00:03:52,351 --> 00:03:56,793
Puede hacer una incorporación
de cualquier columna categórica.

69
00:03:57,738 --> 00:04:00,704
Por último, vimos rápidamente

70
00:04:00,964 --> 00:04:04,691
cómo puede usar las incorporaciones
que aprendió para un problema

71
00:04:05,081 --> 00:04:09,531
para aplicarlas en otro problema
de aprendizaje automático similar.

72
00:04:10,077 --> 00:04:13,972
Quizá aprendió a representar
la hora del día y el día de la semana

73
00:04:14,162 --> 00:04:16,123
con dos números de valor real

74
00:04:16,353 --> 00:04:19,044
mediante el entrenamiento
con datos del tráfico de Londres.

75
00:04:19,705 --> 00:04:22,945
Como inicio rápido,
puede usar los mismos pesos

76
00:04:23,165 --> 00:04:25,865
para iniciar el mismo modelo
para Fráncfort.

77
00:04:26,789 --> 00:04:31,583
Incluso podría usar la incorporación
que aprendió con el problema de tráfico

78
00:04:31,859 --> 00:04:34,703
para predecir la cantidad de espectadores
de un programa de TV.

79
00:04:35,054 --> 00:04:40,064
La idea es que el tráfico de la calle
y los espectadores de TV

80
00:04:40,354 --> 00:04:43,454
dependen del mismo factor latente.

81
00:04:43,749 --> 00:04:47,049
Es decir, ¿las personas
de la ciudad están en movimiento?

82
00:04:47,669 --> 00:04:49,559
¿O están en casa o en el trabajo?

83
00:04:50,381 --> 00:04:54,651
El aprendizaje por transferencia
puede funcionar en problemas muy distintos

84
00:04:54,956 --> 00:04:59,266
siempre que compartan
los mismos factores latentes.