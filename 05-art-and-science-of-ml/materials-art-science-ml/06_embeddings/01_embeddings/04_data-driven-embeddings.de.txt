In der letzten Lektion haben wir über die manuelle Erstellung
von Einbettungen mit Regeln gesprochen. Wir haben Attribute wie das
Durchschnittsalter von Zuschauern und die Gesamtticketverkäufe
verwendet, um unsere Filme, die sich sonst in einem Raum
von 500.000 Dimensionen befinden würden, in einen
zweidimensionalen Raum zu projizieren. Im Fall unserer
zweidimensionalen Einbettung haben wir unseren Achsen Bezeichnungen wie Alter und verkaufte Tickets, Kinder und Erwachsene, Kunstfilme und Kassenschlager gegeben. Diese Achsen müssen aber
nicht unbedingt Bezeichnungen haben. Wichtig ist, dass wir uns
von 500.000 auf zwei reduziert haben. Das haben wir erzielt, indem wir Attribute
der Filme manuell untersucht haben. Welche Auswirkung hat die Reduktion
der Dimensionalität von 500.000 auf zwei? Die 2D-Einbettung, die wir für jeden Film
haben, ist mit zwei Realwerten verknüpft. sodass Sie jeden Film durch
einen Punkt im 2D-Raum darstellen können. Warum sollten wir
diese Einbettung vornehmen? Ein wichtiger Grund ist dieser: Sagen wir, wir trainieren ein Modell zur
Vorhersage, ob ein Nutzer einen Film mag. Es ist einfacher,
ein Modell mit D Inputs anzulernen, als ein Modell mit N Inputs. Denken Sie dran, dass N viel größer
ist als D. Je weniger Eingabeknoten, desto weniger Gewichte
müssen wir optimieren. Das heißt, dass die
Trainingsphase kürzer ist und die Gefahr der Überanpassung geringer. Die Einbettung ist eine Methode,
um das Problem zu vereinfachen. Aber wir müssen diese
Dimensionalitätsreduktion so vornehmen, dass wir keine Informationen verlieren. Wie ermitteln wir
eine geeignete Einbettung? Sie können Einbettung als Teil
des Trainings von den Daten lernen. Es ist keine separate Anlernphase nötig. Nehmen Sie zuerst das ursprüngliche Input und stellen Sie es als
one-hot-codiertes Feld dar. Senden Sie es dann
durch eine Einbettungsebene. Hierbei ist die Einbettungsebene nur eine
verborgene Ebene mit 1 Einheit/Dimension. Da wir ein Modell mit Labels trainieren, ändert sich die Einbettung
auf der Grundlage dieser Labels. Die verborgenen
Einheiten entdecken intuitiv, wie die Elemente im D-dimensionalen
Raum so organisiert werden können, dass das Endziel am besten optimiert wird. Es gibt aber ein kleines Problem. Wie viel Speicher ist nötig,
um die Eingaben zu speichern? Sie haben eine kategoriale Inputvariable, aber 500.000 mögliche Werte. Sie müssen also
500.000 Inputknoten erstellen und Matrix-Mathematik
an riesigen Matrizen vornehmen.