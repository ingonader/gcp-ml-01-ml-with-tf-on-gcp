前のコースでは 特徴クロスの観点から
埋め込みを見てきましたが 埋め込みはあらゆるカテゴリ列で有用です 例として埋め込みを
別の観点から見てみましょう たとえば顧客に映画を
おすすめするとします 自分の企業は100万人のユーザーと
50万の映画を抱えています ちなみにこれは小さい数字です YouTubeと他8つのGoogleサービスでは
10億人のユーザーを抱えています そしてそれぞれのユーザーに
5～10件の映画をおすすめするとします 誰もが気に入る映画を
選ばなければなりません 100万人のユーザーに対して
それぞれ個別に 50万の映画の中から
5～10作品ずつを選ぶのです 自社の入力データセットは マトリックスで表した場合 100万の行と50万の列が
あることになります 図の中の数値は顧客が見て
評価した映画の数を表しています このマトリックスの残りの部分を
知る必要があるわけですが この問題を解決するには 似たような映画を見極める
方法が必要になります 1つのアプローチは映画の属性を利用して
映画を類似性で分類することです たとえば観客の平均年齢を基準に 映画を並べてみることができます 漫画やアニメの映画は左側に表示され より暗い大人向けの映画は
右側に表示されています たとえば『Mr.インクレディブル』が
好きなユーザーなら おそらく子供か
または小さい子供がいると思われますから 『シュレック』をおすすめできます しかし『ブルー』や『メメント』は
アートシアター系映画で 一方『スターウォーズ』や
『ダークナイトライジング』は いずれも大ヒット作です 『ブルー』が好きな人なら おそらくバットマン映画より
『メメント』が気にいるでしょう 同様に『スターウォーズ』が
好きな人の場合は アートシアター系より
『ダークナイトライジング』を好むでしょう この問題に対処するため 2番目の次元を
追加してみましょう たとえば2番目の次元は
その映画が公開されたときに 映画館で売れたチケットの総数とします ここでは『スターウォーズ』と
『ダークナイトライジング』が近くなっています 『ブルー』と『メメント』も
近いですね また『シュレック』と
『Mr.インクレディブル』も近いです 『ハリー・ポッター』はアニメ映画と
『スターウォーズ』の中間で 子供だけでなく大人も見ますし
これも大ヒット作です こうして2番目の次元を追加することで おすすめによい作品同士が
近くにまとまりました このほうが直感に
ずっと適合していますね もちろん次元は２つだけでなく
もっと作成できます さらに多くの次元を追加すれば いっそう細かい区別が可能になります そうした細かい区別によって
より適切におすすめできることもありますが 必ずしもそうならないこともあります 過学習の危険性は
常に存在します ポイントはこの情報に
Nの次元が含まれるということです この映画の例における
Nとは何でしょうか 50万ですよね 映画のIDはカテゴリ特徴であり 通常はワンホットエンコーディングされます ですからNは50万です この例ではすべての映画を
2次元空間で表したので d＝2となります 要点はdがNよりも
はるかに小さいということです ユーザーの映画への関心は
dの要素で表せることが前提となっています ユーザーの映画への関心を表すのに
多数の要素を用いる必要はありません