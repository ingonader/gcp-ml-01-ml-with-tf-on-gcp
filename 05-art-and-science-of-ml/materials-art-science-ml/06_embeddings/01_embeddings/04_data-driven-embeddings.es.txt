En la lección anterior hablamos sobre crear incorporaciones de forma manual mediante reglas. Usamos atributos como la edad promedio del espectador
y la venta total de boletos para seleccionar películas que se encontraban
en un espacio dimensional de 500,000 y proyectarlas
en un espacio de dos dimensiones. En el caso
de la incorporación en dos dimensiones pusimos nombres a los ejes,
como edad y boletos vendidos. Niños frente a adultos cine de autor o película taquillera. Sin embargo, no es esencial
que estos ejes tengan nombre. Lo que importa es que
pasamos de 500,000 a 2. No que lo hicimos analizando
manualmente los atributos de las películas. ¿Cuál es el impacto de realizar
la reducción de dimensionalidad de 500,000 a 2? La incorporación 2D
que tenemos de cada película se asocia a dos valores reales de modo que puede representar cada película
mediante un punto en el espacio 2D. ¿Por qué deberíamos
hacer esta incorporación? Una razón clave es la siguiente. Digamos que entrenamos un modelo para predecir si a un espectador
le gustará una película. Es más fácil entrenar modelos
con d entradas que entrenar un modelo con N entradas. Recuerde que N es mucho más grande que d. Mientras menor
sea la cantidad de nodos de entrada menos serán los pesos
que se deberán optimizar. Esto significa que el modelo
se entrena más rápido y hay menos probabilidades de sobreajuste. Las incorporaciones
son una forma de simplificar el problema. Sin embargo, debemos hacer
la reducción de dimensionalidad de forma que no perdamos información. ¿Cómo encontramos
la incorporación adecuada? Puede aprender incorporaciones
a partir de los datos como parte
del proceso normal de entrenamiento. No es necesario
un proceso de entrenamiento separado. Primero, use la entrada original y represéntela como un arreglo
con codificación one-hot. Luego, envíela por una capa de incorporación. En este enfoque,
la capa de incorporación es una capa oculta
con una unidad por dimensión. Dado que entrenamos un modelo
con etiquetas las incorporaciones cambian
de acuerdo con ellas. De forma intuitiva las unidades ocultas descubren cómo organizar
los elementos en el espacio dimensional d para optimizar mejor el objetivo final. Pero hay un pequeño problema. ¿Cuánta memoria se necesita
para almacenar las entradas? Tiene una variable de entrada categórica pero 500,000 valores posibles. Por lo que debe crear
500,000 nodos de entrada y realizar operaciones matemáticas en matrices enormes.