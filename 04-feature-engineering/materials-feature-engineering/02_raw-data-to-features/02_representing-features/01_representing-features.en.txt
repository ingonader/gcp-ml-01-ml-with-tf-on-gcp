So, let's move on to representing some features with some real examples. Let's take this example that you see here. This is my raw data, I'm in an ice cream store, I'm trying to figure out if my ice cream is served by some employee, and if the customer waited 1.4 seconds or 1.4 minutes, and what the rating is going to be. So, I want to predict that rating. How satisfied is my customer going to be based on who served them, how long they waited, what is it that they bought, and what the store location was, and more and more. So, fair enough, that's our data. So, that's our training data, I would take this training data and ultimately I have to make them all to good numbers. Remember that rule, everything is going to be numeric, because neural networks deal with numbers. So, I'll take my data, make them all numbers and those are my features. So, in Tensorflow, I'm going to take this thing which is a Json input, comes out on my web application that goes into a data warehouse, I pull it out, I create these numeric values and tensorflow each of these columns, then a feature column. So, how do we take some data like this and make them feature columns? How do we make them numeric? Well, the first thing is that there are some values like price or wait time. These are already numeric. Awesome. These are super easy to encode. We'll just take them and use them as is. The numeric and they have a meaningful magnitude. So, 2.5 or 1.4 for the waiting time is very easy for Tensorflow to learn. This is why we call it real value column. So, I just say layers like real valued column price, layers that real value column wait time. So, these numbers we can just use as is and they'll be real valued columns. What about this input? Transaction ID is equal to 42. Now, that's way too specific, throw it out, we can't use that as a feature. What about employee ID? Employee ID is equal to 72365. Is it numeric? Well, yeah it is a number, but does it have meaningful magnitude? Is somebody with an employee ID as 72365's, as twice as good as an employee with an ID of 36182? No, right? So I can't use the employee ID as it is, I have to do something with them. So, let's say my ice cream shop has five employees. Employee number 8345, employee number 72365, etc. What I can do, I can say if this employee number is 72365, I'll represent this employee's ID by this vector that you see here. The vector is 01000 because I define the second column as corresponding to that employee 72365. So, essentially, I make it like a bit mask almost. You make that employee's column one and all the other columns zero. This is what's called one hot encoding, there's one column that's hot, and all the other columns are cold. So, if you have five employees in an ice cream store, you essentially have five columns. Actually, usually we do four because one are linearly independent just to be detailed. Let's not even worry about it. Let's say we have five employees for five columns, in Tensorflow, this is called a sparse column. You basically say that I want to create a sparse column with the keys, and the column name this is employee ID, and the keys are 8345, 72365 for the employee etc. We just passed the strings for each of those keys, and then tensorflow we'll take that string and provide a direct training time, our prediction time and represent them one hand and code them, it will make them all numeric for you, and what we do is we say in the employee ID is your sparse column. Now, this is if we know the keys before hand. What if you don't know the keys before hand? What do you do if you have to take your input data, and you have to preprocess that data and find all the key is it occurring in a trading dataset, and create what's called a vocabulary of keys. So, that's your first step. That's the preprocessing. You have to do all this before you actually even do your training, and then you create a new dataset where these preprocess values can be used. So, before you ever even get to training your model, you need to create this vocabulary of keys, and this vocabulary needs to be available at prediction time, because at prediction time, you just going to come back and say, "Hey, I've got employee ID 72365, and the model needs to know that at training time, that it knew that 72365 was that second column for it to one handing code." So, the vocabulary needs to be identical, and the mapping of the vocabulary needs to be identical between training and prediction time, otherwise it's no good. As a lot of you may be wondering, what happens if you hire a new employee, is the model still the same? Well, at this point you don't have a place for this new employee. So, what this means is that you're not able to predict for this new employee. This kind of the thing that you need to think about beforehand, you might had had something around. Well, what do I do if an employee that I don't know about or employ that isn't found, and you basically decide that perhaps you're going to say average all of your career employees and just use that number imputed right. Meanwhile, you collect data about the times that this employee is on duty, and the customer satisfaction associated with that employee, and for different wait times, and different things that they're serving, and then once you've collected that, you can use that in your prediction. So, if you know the key, if you know the key beforehand, you essentially create that sparse column with the keys, and you pass in the Keys and ultimately just hack through them. So, these are all the different ways of creating a sparse column. Now, sometimes your data might already be indexed. Why are your data had to be indexed? Maybe for example you have an employee ID and they just happened to be numbers one through 1000, at that point they're already indexed. They're arbitrarily big numbers all over the place that are just one to add. If that's the case, they want to create a sparse column with the Enterprise feature which is employee ID, and there are five employees. So, where this is useful say in our tax example, is the we use that for hour of the day, because it's automatically indigenized from zero to 23. It's perfect as an energized feature, because the hour of the day is not numeric, and it's not completely numeric, because the number like 23 is very close to the number zero or one, it's only two hours away. So, let's take the third possibility. Suppose you don't have a vocabulary, and it's not energerized, well, here's a cool trick that you can do. If you don't want to go out, build a vocabulary and you don't really care, so, what are you going to do is, I'm going to take my employee ID, hash it, compute the hash of the employee ID, and just break that hash up into say 500 buckets. Why would you do this? Well let's say if you're in a company that has 100 employees, and you hash it into 500 buckets, so on average each employee were each buck in, we'll have zero employee use or one employee in it, it's almost like 100 encoding, or a 500 hot encoding, and that kind of gets me to the same thing without having to build that vocabulary first. So, the customer rating. What do we do with that? Well, for trying to predict the customer rating, and it's a label, we're not even worried. Let's say we're trying to use it as an input, because we're trying to predict something else. So, you have something like a rating, and you want to use it as an input feature, you could do one of two things, you could treat it as a continuous number one to five, it's numeric right, and it sort of has a meaningful magnitude for us like say three is more than two, or you can say four stars is very different from five stars, is very different to two stars, which is just one hot encoded. So, in some cases you have choices, and the customer grading you either one encoded, or you can treat it as a number. It's up to you with how you want to deal with that rating. One thing that you want to watch out for, is what do you do for a customer that actually did not provide you a rating? Say that you might be doing a survey and the customer just did not answer your survey. What do you do with missing data? Well, one option is to use two columns, one for the rating, and one for whether or not you've got a rating. So, in this case, the number four is a rating that a customer gave you, and one means that they actually gave you a rating, as zero means that they actually did not rate us, and you could also do it the other way if you doing one hot encoding, you would say I got a reading of four, which is 0001, or I didn't get a rating 0000. But don't make mistake of not having a second column rated or not rated, because you don't want to mix magic numbers with the real values that you have. You have to add an extra column to state whether or not you observed the value or not. So, if you have missing data, the long or short of it is, you need to have another column.