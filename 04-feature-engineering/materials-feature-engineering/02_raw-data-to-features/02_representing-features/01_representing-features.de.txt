Als Nächstes stellen wir
Funktionen anhand realer Beispiele dar. Sehen Sie sich dieses Beispiel an. Das sind meine Rohdaten. Es geht um eine Eisdiele. Ich möchte herausfinden,
ob ein bestimmter Mitarbeiter bedient, ob der Kunde
1,4 Sekunden oder 1,4 Minuten gewartet hat und was für eine Bewertung er abgibt. Ich möchte diese Bewertung vorhersagen. Wie zufrieden wird mein Kunde sein,
je nachdem, von wem er bedient wird, wie lang er warten musste, was er gekauft hat, wo sich das Geschäft befindet usw. Das sind unsere Daten. Jetzt müssen diese Trainingsdaten in Zahlen umgewandelt werden. Alle Werte müssen numerisch sein, da neuronale Netzwerke Zahlen verarbeiten. Ich wandle also alle Daten in
Zahlen um und erhalte folgende Funktionen. In TensorFlow
rufe ich diese JSON-Eingabe aus meiner Webanwendung ab,
die auf ein Data Warehouse zugreift, und erstelle die numerischen Werte. In TensorFlow
werden diese Spalten zu Funktionsspalten. Wie machen wir
aus diesen Daten Funktionsspalten? Wie werden daraus Zahlenwerte? Werte wie "price" oder "waitTime" sind bereits numerisch. Praktisch.
Diese Werte lassen sich leicht codieren. Wir übernehmen Sie einfach unverändert. Sie sind numerisch
und haben eine aussagekräftige Größe. Eine Wartezeit von 2,5
oder 1,4 kann TensorFlow leicht lernen. Dies wird als Realwertspalte bezeichnet. Ich gebe also Ebenen
wie Realwertspalte "price" und Realwertspalte "waitTime" an. Diese Zahlen können wir einfach
übernehmen und als Realwertspalten nutzen. Wie sieht es mit dieser Eingabe aus? "transactionId" ist gleich 42. Das ist viel zu spezifisch und deshalb als Funktion unbrauchbar. Was ist mit der Mitarbeiternummer? "employeeId" ist gleich 72365. Ist das numerisch?
Es ist zwar eine Zahl, doch ist die Zahl aussagekräftig? Ist ein Mitarbeiter mit der Nummer 72365 doppelt so gut
wie ein Mitarbeiter mit der Nummer 36182? Nein. Ich kann die Nummer
also nicht einfach übernehmen. Sie muss zuerst bearbeitet werden. In meiner Eisdiele arbeiten 5 Angestellte. Mitarbeiternummer 8345, 72365 usw. Ich kann die Mitarbeiternummer 72365 mit dem hier gezeigten Vektor darstellen. Der Vektor lautet 01000, da ich dem Mitarbeiter 72635
die zweite Spalte zugeordnet habe. Das ist fast wie bei einer Bitmaske. Diese Mitarbeiterspalte
hat den Wert 1, alle anderen sind 0. Dies nennt sich 1-aus-n-Code. Eine Spalte entspricht "1" und alle anderen sind "0". Bei 5 Mitarbeitern in einer Eisdiele haben Sie demnach 5 Spalten. Eigentlich wären es aus Gründen der
linearen Unabhängigkeit nur 4 Spalten. Darauf verzichten wir jetzt aber
und nehmen 5 Spalten für 5 Mitarbeiter. In TensorFlow
wird dies als Sparse-Spalte bezeichnet. Sie erstellen einfach
eine Sparse-Spalte mit den Schlüsseln. "employeeId" ist der Spaltenname und die Mitarbeiternummern
sind die Schlüssel 8345, 72365 usw. Wir übergeben einfach
die Strings für jeden der Schlüssel. TensorFlow berechnet
daraus eine direkte Trainingszeit, unsere Vorhersagezeit,
und codiert diese Werte, damit Sie numerisch vorliegen. Wir verwenden
die Mitarbeiternummer als Sparse-Spalte. In diesem Fall
waren uns die Schlüssel bekannt. Wie gehen wir vor,
wenn wir die Schlüssel noch nicht kennen? Sie müssen die Eingabedaten einer Vorverarbeitung unterziehen und alle Schlüssel
in einem Trainings-Dataset suchen, um ein sogenanntes
Schlüsselverzeichnis zu erstellen. Das ist der
erste Schritt – die Vorverarbeitung. Diese Aufgabe muss
vor dem Trainieren erledigt werden. Dann erstellen Sie ein neues Dataset,
in dem die Werte genutzt werden können. Bevor Sie Ihr Modell trainieren können, müssen Sie
dieses Schlüsselverzeichnis erstellen. Es muss zum
Zeitpunkt der Vorhersage verfügbar sein, da Sie bei der Ausführung lediglich
eine Mitarbeiternummer anfordern, zum Beispiel 72365. Das Modell muss dann wissen, das "72365" die
zweite Spalte mit dem 1-aus-n-Code ist. Dafür müssen das Verzeichnis und die Zuordnung der Verzeichniseinträge zum Trainings- und
Vorhersagezeitpunkt identisch sein. Sonst funktioniert es nicht. Und was mache ich, wenn ein neuer
Mitarbeiter eingestellt wird. Bleibt das Modell dasselbe? Im aktuellen Modell kann kein
neuer Mitarbeiter aufgenommen werden. Sie können für diesen
also auch keine Vorhersagen machen. Für Szenarien
wie diese müssen Sie vorausplanen. Sie müssten sich überlegen, was mit Mitarbeitern passiert, die noch
nicht vorhanden oder unauffindbar sind. Sie würden dann vielleicht einen
Mittelwert aller Mitarbeiter errechnen und diese Zahl
verwenden – einen imputierten Wert. Sie erfassen Daten zu den
Arbeitszeiten dieses Mitarbeiters, der Zufriedenheit
der Kunden mit diesem Mitarbeiter, zu verschiedenen Wartezeiten, und den
Produkten, die er serviert. Diese Daten können dann
für die Vorhersage genutzt werden. Wenn Sie den Schlüssel schon kennen, erstellen Sie einfach
die Sparse-Spalte mit den Schlüsseln, übergeben die Schlüssel
und programmieren Sie ein. Das sind die Optionen
zum Erstellen einer Sparse-Spalte. In manchen Fällen
sind Ihre Daten schon indexiert. Welche Daten betrifft das? Werte wie die Mitarbeiternummer, die zufällig Zahlen von 1 bis 1.000 sind, sind bereits indexiert. Es sind willkürliche große Zahlen,
die nur hinzugefügt werden müssen. In dem Fall wird eine Sparse-Spalte mit der ganzzahligen
Funktion "employeeId" erstellt. Und es gibt 5 Mitarbeiter. In unserem Steuerbeispiel
lässt sich das für die Uhrzeit einsetzen, da diese automatisch
als Ganzzahlen von 0 bis 23 vorliegt. Die Uhrzeit ist
die perfekte ganzzahlige Funktion, da sie nicht numerisch ist. Sie ist nicht vollständig numerisch, da die 23 sehr nah an der 0 und der 1 ist. Es liegen nur 2 Stunden dazwischen. Wir kommen zur dritten Möglichkeit. Nehmen wir an, Sie haben kein Verzeichnis und keine ganzzahligen Daten. Sie können einen Trick anwenden. Wenn Sie kein Verzeichnis erstellen wollen, können Sie die Mitarbeiternummer hashen, den Hash der Nummer berechnen und das Ergebnis in 500 Buckets aufteilen. Warum sollten Sie das tun? Wenn ein Unternehmen 100 Mitarbeiter hat
und Sie die Daten in 500 Buckets hashen, sodass sich in jedem Bucket
entweder 0 oder 1 Mitarbeiter befindet, ist das fast wie 1-aus-n-Code, bzw. 500-aus-n-Code. Damit erreiche ich dasselbe Ziel,
muss aber kein Verzeichnis erstellen. Jetzt zur Kundenbewertung. Was stellen wir damit an? Die Vorhersage der Kundenbewertung sollte kein
Problem sein, da es ein Label ist. Wir könnten es aber als Eingabe verwenden, um etwas anderes vorherzusagen. Um einen rating-Wert
als Eingabefunktion zu verwenden, haben Sie zwei Möglichkeiten. Sie könnten ihn
als Nummer behandeln: 1 bis 5. Das ist numerisch
und hat eine aussagekräftige Größe. 3 ist mehr als 2,
4 Sterne ist schlechter als 5 Sterne, 2 Sterne ist noch schlechter. Das ist einfach 1-aus-n-Code. In einigen Fällen haben Sie Optionen und können die
Kundenbewertung entweder als 1-aus-n-Code oder als Nummer behandeln. Sie müssen entscheiden,
wie Sie mit der Bewertung umgehen wollen. Sie sollten jedoch berücksichtigen, dass nicht jeder Kunde
immer eine Bewertung abgibt. Zum Beispiel bei einer Umfrage,
die ein Kunde nicht ausgefüllt hat. Wie gehen Sie mit fehlenden Daten um? Sie könnten einfach 2 Spalten verwenden, eine für die Bewertung, die andere
für das Vorhandensein einer Bewertung. In diesem Fall
ist die Zahl 4 die Bewertung eines Kunden und 1 zeigt an, dass
der Kunde eine Bewertung abgegeben hat. Eine 0 bedeutet,
dass keine Bewertung vorhanden ist. Mit 1-aus-n-Code
könnten Sie es auch anders machen. Eine Bewertung mit 4 Punkten wäre 0001 und keine Bewertung wäre 0000. Vergessen Sie bloß nicht
die zweite Spalte mit 0 oder 1, da Sie sonst theoretische
Zahlen mit realen Werten vermischen. Sie müssen eine Extraspalte hinzufügen,
um anzugeben, ob der Wert ermittelt wurde. Wenn Sie also fehlende Daten haben, ob lange oder kurze Werte, benötigen Sie eine weitere Spalte.