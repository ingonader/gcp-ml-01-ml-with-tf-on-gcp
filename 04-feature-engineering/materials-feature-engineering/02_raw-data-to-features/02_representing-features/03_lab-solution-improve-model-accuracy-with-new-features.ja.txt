このラボでは さまざまな特徴を試します a_featuresにアクセスした後 上に移動して すべてのセルを消去すると 今必要なものだけを
実際に実行できます まずたくさんのものを
インポートをします TensorFlowをインポートし Pandasや
NumPyなどをインポートして インポートが終わったら
データセットを読み込みます カリフォルニアの住宅のデータセットです これからカリフォルニアの住宅の価格を このデータセットから予測します 読み込んだこのデータセットの 中身を知っておくと役立つでしょう そこでdf.headを実行すると 最初の数行が表示され 経度と緯度や 築年数の平均（median age）があります このデータセットは 個別の物件ではなく集計です 部屋の合計数は 5,612 明らかに
1つの物件ではありません この部屋数は
1つの郵便番号または1つの郡など なんらかの集計です こうして部屋の合計数が集約され ベッドルームの合計数もあり 人口つまり住民の数は
約1,000人です さらに世帯数は472世帯 収入の平均値は1.5で
単位は不明です 住宅価値の平均値は66,900で これも単位が不明です こういったことを
データセットから知ろうとしています データセットの最初の数行は
こうなっていて 数値にざっと目を通すと役立つでしょう さてdf.describe()はとても便利です これはPandasでは 数値列の統計を表示し カテゴリ列の場合は その列ついて何も表示しません ここではすべて数値列ですから すべての列が表示され たとえばデータセットに
17,000個の経度と 17,000個の緯度があり これがデータセットの行数です こうして確認していくことができます すべて17,000ですね もし17,000以外のものがあったら その行の値が
1つ以上欠落していることになります このケースではまず
サニティーチェックを行い 欠損値はなく すべての値の行数は17,000行です 経度の平均値は-119 緯度の平均値は35です カリフォルニアなので適切ですね 築年数の平均値は28.6です 単位は年でしょう
約30年です 部屋の総数は2,643です これは1つの家ではありませんね おそらくこの集計単位での
部屋の総数でしょう これを何とか工夫すべきです ベッドルームの総数も539で
おかしいですね 人口は1,429、世帯数は501 収入の平均値は3.9です 住宅価値の平均値は27,000ですね これはすべて平均的な値です さらに標準偏差と 最小値があり 部屋の最小数は2 部屋の最大数は37,937です データの概要はこのとおりです ではこのデータを2つに分割します これは実験ですから 保存はしません ランダムな分割で十分でしょう マスクを作成します このマスクは dfsの長さつまり
17,000個からなる配列を作ります またランダムが0.8未満か確認します つまり値の80%が1で 値の約20%がゼロです traindfではすべての値で
これが1になり evaldfではすべての値の
mskがゼロになります ここで 2つのデータフレーム
traindfとevaldfが得られ 新しいものを追加して traindfの長さを出力します
約13,000ですね evaldfの長さも出力します 約20%ですから
約3,400です これでトレーニング
データセットと 評価用データセットができたので モデルを作成しましょう モデルを作成するには まずデータを読み込む必要があるので make_input_fnを実行します 所定のデータフレームで エポックの数を読み取り pandas_input_fnを使って データフレームを受け入れますが それだけでなく特徴も追加します まず部屋数を見てください この部屋の総数は おかしいですよね？ 2,643部屋の家などありません 間違っています これは実際には この郵便番号での
部屋の総数ですね これを正規化して 1軒の家の値にする必要があります そのために部屋の総数を 世帯数で割ると 家の部屋数がわかります この郵便番号を持つ
標準的な家の数値です この郵便番号でそのほかに
正規化が必要なものは何ですか 調べてみましょう 緯度と経度はそのままでよさそうです 部屋の合計数は正規化が必要で ベッドルームの総数も
正規化する必要があるので 操作を進めて 部屋の数だけでなく ベッドルームの数も処理します total_bedroomsですね total_bedrooms これをベッドルーム数
（num_bedrooms）にしましょう これで2つの特徴が追加され 入力関数が作成されました さて特徴列ですが housing_median_ageは
数値列ですから そのまま使えます 築年数の平均値を確認すると 適切な数値が 年単位で示されているので そのまま使えます こうして築年数の平均値を使い 次に緯度を
32～42の間でバケット化します なぜ32～42ですか？ ここに戻って確認すると 緯度は32～42の間で変化しているので 32～42の間でバケット化します 緯度を使うなら
経度も使いましょう これを使って 経度も処理します こうして経度を処理し 経度の境界は
-124から-114の間にします 下に移動してこれを
-124と-114に変更し 1度の経度は妥当でしょう 1度はおよそ100キロメートルです これでいいでしょう このように 部屋の数と ベッドルームの数も追加したので それも処理します 部屋の数、ベッドルームの数 さらに平均収入 これらが特徴列です 次にトレーニングと評価を行います train_and_evaluateを使って train_specや
eval_specなどを渡し この時点で train_and_evaluateを呼び出して trained_modelを書き出します これを実行すると 評価の出力が得られます 実行中です 5,000ステップを実行するよう指示しました 現時点で ステップ1,650なので 少し待ちましょう 処理が終わったら 時折
辞書を保存していますね average_lossを指定していますが 平均損失はそれほど役立ちません バッチに対して計算された損失ですから あまり意味がありませんが この損失は 評価用データセットに関する
損失なので妥当です 実際の損失を見ると 評価用データセットで計算された
平均損失は妥当です 損失自体は単に
バッチに関するものですから 不要です 下に行って 終わるまで待ちます 4,000、5,000
できました データセット全体に対する
平均損失RMSCは0.59です 別のことを試しましょう もし部屋の数がなかったら
どうなるか見てみましょう これらを追加するのをやめて 入力列を作成するときに 部屋数を使わず ベッドルームの数も 緯度も経度も使わず 平均収入も使わず 築年数だけを使います これを実行すると
特徴列はこれだけです どうなりますか？ 下に行くと 先ほどは0.59でしたね このセルを消去して 再び実行します
今度は入力が1つだけです この時点で何が得られますか 損失が1.87ですから これらの入力特徴は
役に立っていました 使わないと損失が上昇したからです こうしてどういう特徴が
役立つかわかります これを手動で実行できます 収入の平均値だけを使うと
どうなるか確認できます 平均収入はとても良い指標です 収入の平均値を使ってもう1回試すと 損失が劇的に減少しました ほかの特徴も役立ちますが それほどでもありません 平均収入が特に役立つ理由は 人々がどんな物件を
購入できるかを反映し 市場も人々の経済力に合わせる
傾向があるからです 今は平均損失が0.69になっています 平均収入の特徴を追加するだけで
1.38から0.69に下がりました 平均収入はとても役立つ特徴です これは現実世界では
どんな意味がありますか？ 現実世界では どんなデータを集めるかが重要です たとえばこのデータセットで その地域に住む人の平均収入を
収集しないとしたら 悪いモデルになります つまりこういうことです 機械学習モデルで重要なのは
モデル自体ではなく モデルに入力するデータです このモデルで本当に重要なのは この地区に住む人の平均収入によって この地区の住宅価格を予想できることです これはとても重要な特徴です そしてこの特徴を使うには データエンジニアリングのパイプラインを
使ってデータを入力します