Certo. O segundo aspecto de um atributo bom: você precisa saber o valor no momento
em que você está prevendo. Lembre-se que a razão para criar um modelo de aprendizado
de máquina é para previsão. Se não puder prever com isso, não há razão para criar um modelo de
aprendizado de máquina. Então, aqui está um
dos meus pontos favoritos. Um erro comum que as pessoas cometem
é simplesmente olhar para o armazenamento de dados e pegar
todos os dados que estão lá, todos os campos relacionados, e jogá-los no modelo. A máquina vai descobrir, certo? Se você usar todos esses campos e usar
no aprendizado de máquina, o que acontece quando
você for prever? Acontece que, quando você prever com isso,
talvez descubra que os dados do armazenamento tinham,
digamos, dados de vendas. Então, isso será uma entrada
para o modelo. Quantas coisas foram
vendidas no dia anterior? Isso vai ser uma entrada
para o modelo. Mas aqui está o atrito. Acontece que os dados de vendas diárias,
na verdade, chegam um mês depois. Leva um tempo para as informações
saírem da sua loja. E há um atraso na coleta
e no processamento desses dados. E o armazenamento tem a informação
porque alguém já fez o trabalho de pegar os dados ou juntar as tabelas e colocar um pré-processamento lá. Mas na hora da previsão, em tempo real, você não as tem. Portanto, não pode usá-las. Assim, algumas informações neste
armazenamento são conhecidas imediatamente e algumas delas não são
conhecidas em tempo real. Então, se você usar dados não conhecidos
no momento da previsão, se você usar essa entrada para o modelo, infelizmente, todo o modelo será inútil, pois você não tem um valor numérico para
essa entrada para o que o modelo precisa. Lembre-se: os dados de vendas
chegam um mês depois e se o modelo estiver usando esse
campo que vem um mês depois, ele não saberá isso
no momento da previsão. Então, o importante aqui é, certifique-se de que para cada entrada
usada para o modelo, para cada atributo, você tenha os dados
no real momento de previsão. Tenha certeza de que essas variáveis
de entrada estão disponíveis. Você está coletando
em tempo hábil. Em muitos casos, você terá
que se preocupar se é legal ou ético coletar esses dados na hora
de fazer a previsão. Às vezes, essas são todas as informações
disponíveis para o armazenamento, mas você não pode coletá-las na hora
em que está tentando fazer a previsão. De novo: se você não puder coletá-las
quando estiver fazendo a previsão, não poderá usá-las no modelo ML. Vamos ver outro exemplo. Um exemplo fácil de lembrar, vamos voltar a esta casa, o modelo de previsão
do preço do imóvel. Se apenas tivéssemos o preço de venda
atual no modelo e no conjunto de dados, o modelo poderia produzir esse preço e ser perfeitamente exato durante
o conjunto de treino, pois há esse campo de dados mágico
do preço de venda da casa. Mas na hora da previsão, suas novas casas à venda
sequer terão sido vendidas ainda, então o modelo é inútil,
pois você não pode alimentá-lo com o que
não sabe na previsão. Então, quero fazer
uma pequena pergunta. Por que o segundo campo
é um atributo ruim? O que poderia dar errado? Como uma dica, o que
acontecerá se o código do cluster, for tirado de outro modelo? E se esse modelo
atualizar sem avisar você? Você ainda poderá treinar ou aprender algo
com o conjunto de dados de treino? Bem, a resposta final é que definições de atributos por si próprias
não devem mudar com o tempo, senão você precisará
atualizar seu modelo.