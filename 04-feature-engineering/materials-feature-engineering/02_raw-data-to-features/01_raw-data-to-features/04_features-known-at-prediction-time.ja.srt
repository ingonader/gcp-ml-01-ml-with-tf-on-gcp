1
00:00:00,000 --> 00:00:03,050
では良い特徴の2番目の側面は

2
00:00:03,050 --> 00:00:07,155
予測の時点で値が
わかっている必要があることです

3
00:00:07,155 --> 00:00:09,650
機械学習モデルを構築する目的は

4
00:00:09,650 --> 00:00:11,870
予測に使いたいからですよね

5
00:00:11,870 --> 00:00:13,480
予測に使えなければ

6
00:00:13,480 --> 00:00:16,320
機械学習モデルを構築する意味がありません

7
00:00:16,320 --> 00:00:19,130
さて私が気に入っている点です

8
00:00:19,130 --> 00:00:21,510
よくある間違いですが

9
00:00:21,510 --> 00:00:23,620
データウェアハウスの中から単に

10
00:00:23,620 --> 00:00:26,130
すべてのデータと
関連フィールドを取り出して

11
00:00:26,130 --> 00:00:27,755
モデルに投げ込むと

12
00:00:27,755 --> 00:00:29,445
マシンが処理します

13
00:00:29,445 --> 00:00:32,389
すべてのフィールドをMLモデルに入力すると

14
00:00:32,389 --> 00:00:34,540
予測で何が起きるでしょう？

15
00:00:34,540 --> 00:00:36,120
予測の際

16
00:00:36,120 --> 00:00:37,370
たとえば

17
00:00:37,370 --> 00:00:41,490
ウェアハウス内のデータが
売上データだとしましょう

18
00:00:41,490 --> 00:00:43,830
このデータがモデルに入力されます

19
00:00:43,830 --> 00:00:46,230
たとえば前日の販売数を

20
00:00:46,230 --> 00:00:48,000
モデルに入力します

21
00:00:48,000 --> 00:00:50,130
でもここで問題が生じます

22
00:00:50,130 --> 00:00:54,825
毎日の売上データが届くのは1か月後です

23
00:00:54,825 --> 00:00:58,205
店舗から情報が届くまでに時間がかかるのです

24
00:00:58,205 --> 00:01:01,290
しかもデータに収集や加工で遅れが生じます

25
00:01:01,290 --> 00:01:04,900
データウェアハウスに情報が入るには
その前に

26
00:01:04,900 --> 00:01:07,350
誰かがデータを収集し

27
00:01:07,350 --> 00:01:10,935
テーブルをまとめて事前処理する
必要があります

28
00:01:10,935 --> 00:01:13,320
しかし予測時には

29
00:01:13,320 --> 00:01:15,750
リアルタイムのデータがありません

30
00:01:15,750 --> 00:01:17,580
データを使えないのです

31
00:01:17,580 --> 00:01:21,089
データウェアハウスの情報には
今すぐわかるものと

32
00:01:21,089 --> 00:01:23,790
リアルタイムで
わからないものがあります

33
00:01:23,790 --> 00:01:28,020
予測時点でわからないデータを使う場合

34
00:01:28,020 --> 00:01:30,295
この入力をモデルで使っても

35
00:01:30,295 --> 00:01:33,270
モデルは役に立ちません

36
00:01:33,270 --> 00:01:36,570
必要な入力値が存在しないからです

37
00:01:36,570 --> 00:01:39,460
「売上データは1か月後に届く」と言いました

38
00:01:39,460 --> 00:01:42,610
1か月後に届くデータを使う
機械学習モデルは

39
00:01:42,610 --> 00:01:44,895
予測時に何も予測できません

40
00:01:44,895 --> 00:01:46,380
ここでの要点は

41
00:01:46,380 --> 00:01:49,530
モデルで使うすべての特徴の
すべての入力が

42
00:01:49,530 --> 00:01:53,550
実際の予測時点で
手元に揃っている必要があります

43
00:01:53,550 --> 00:01:56,570
入力変数を確実に
使えるようにするのです

44
00:01:56,570 --> 00:01:59,725
ですからデータを
タイミングよく収集してください

45
00:01:59,725 --> 00:02:01,330
多くの場合
予測時に

46
00:02:01,330 --> 00:02:03,980
このデータを集めるのが
合法的か、倫理的か

47
00:02:03,980 --> 00:02:05,790
配慮する必要があります

48
00:02:05,790 --> 00:02:09,430
場合によっては
利用できる情報が揃っているのに

49
00:02:09,430 --> 00:02:13,170
予測時にユーザーから
収集できないことがあります

50
00:02:13,170 --> 00:02:16,410
繰り返しますが
予測時に収集できない場合

51
00:02:16,410 --> 00:02:18,725
MLモデルではそれを使えません

52
00:02:18,725 --> 00:02:20,570
別の例を見てみましょう

53
00:02:20,570 --> 00:02:22,770
覚えやすい例ですが

54
00:02:22,770 --> 00:02:26,410
再び家の価格の予測モデルです

55
00:02:26,410 --> 00:02:28,560
物件の今日の販売価格と

56
00:02:28,560 --> 00:02:30,720
モデルとデータセットがあり

57
00:02:30,720 --> 00:02:32,810
モデルが価格を出力して

58
00:02:32,810 --> 00:02:36,360
トレーニングデータセットでは
完全に正確になります

59
00:02:36,360 --> 00:02:39,505
家の販売価格の
データフィールドがあるからです

60
00:02:39,505 --> 00:02:40,955
でも予測時に

61
00:02:40,955 --> 00:02:44,515
新しく販売される家は
過去の販売データがないので

62
00:02:44,515 --> 00:02:46,750
モデルは役に立ちません

63
00:02:46,750 --> 00:02:50,130
予測時に不明なことを
入力できないからです

64
00:02:50,130 --> 00:02:53,750
ここでディスカッション形式の問題です

65
00:02:53,750 --> 00:03:00,085
2つ目のフィールドが悪い特徴なのはなぜ？
何が間違っていますか？

66
00:03:00,085 --> 00:03:01,690
ヒントです

67
00:03:01,690 --> 00:03:05,260
クラスターIDが別のモデルから
得られる場合はどうですか？

68
00:03:05,260 --> 00:03:07,930
知らない間に
そのモデルが更新されたら？

69
00:03:07,930 --> 00:03:12,040
トレーニングデータセットから
引き続き学習できますか？

70
00:03:12,040 --> 00:03:13,600
答えは

71
00:03:13,600 --> 00:03:17,185
特徴の定義そのものが時間とともに
変化してはなりません

72
00:03:17,185 --> 00:03:20,530
それにモデルをアップデートする
必要が生じます