1
00:00:00,000 --> 00:00:01,541
それでは

2
00:00:01,541 --> 00:00:06,185
ブラウザでGCPダッシュボードを開いて

3
00:00:06,185 --> 00:00:11,755
[Google Cloud Shellを有効にする]
をクリックします

4
00:00:11,755 --> 00:00:15,040
Cloud Shell環境に

5
00:00:15,040 --> 00:00:21,065
必要なソースコードとパッケージが
そろっていることが重要です

6
00:00:21,065 --> 00:00:27,515
training-data-analyst
ディレクトリが見当たらない場合は

7
00:00:27,515 --> 00:00:30,630
一旦ここでストップし

8
00:00:30,630 --> 00:00:35,080
前回のラボを実施してから進めてください

9
00:00:35,090 --> 00:00:38,520
環境が整ったらコードエディタで

10
00:00:38,520 --> 00:00:44,650
これから使用するApache Beam
パイプラインのソースコードを開きます

11
00:00:44,650 --> 00:00:52,880
[training-data-analyst] > [コース] > 
[data_analysis] > [lab2] > [python]の

12
00:00:52,880 --> 00:00:56,890
「is_popular.py」ファイルです

13
00:00:56,890 --> 00:01:01,305
前回のラボよりコードが増えていますので

14
00:01:01,305 --> 00:01:03,860
詳しく見ていきます

15
00:01:03,860 --> 00:01:08,700
mainメソッドの本体の
inputの引数を見ると

16
00:01:08,700 --> 00:01:11,350
パイプラインへの入力は

17
00:01:11,350 --> 00:01:17,475
javahelpディレクトリの
Javaソースコードファイルです

18
00:01:17,475 --> 00:01:21,000
また パイプラインからの出力は

19
00:01:21,000 --> 00:01:25,200
デフォルトで/tempディレクトリの

20
00:01:25,200 --> 00:01:30,060
outputで始まるファイルに保存されます

21
00:01:30,060 --> 00:01:33,480
データを読み込んだら

22
00:01:33,480 --> 00:01:37,230
次はキーワードで始まる行を探します

23
00:01:37,230 --> 00:01:39,850
前回のラボと同様に

24
00:01:39,850 --> 00:01:43,745
キーワードは「import」です

25
00:01:43,745 --> 00:01:49,245
次にインポートされた
パッケージ名を処理します

26
00:01:49,245 --> 00:01:52,690
packageUseメソッドが

27
00:01:52,690 --> 00:01:56,720
import文のパッケージ名から

28
00:01:56,720 --> 00:02:01,360
キーワードと末尾のセミコロンを削除した

29
00:02:01,360 --> 00:02:04,320
パッケージ名を抽出し

30
00:02:04,335 --> 00:02:08,390
最後にsplitPackageName関数が

31
00:02:08,390 --> 00:02:13,280
各パッケージ名の
複数のプリフィックスを返します

32
00:02:13,280 --> 00:02:17,790
たとえば com.example.appnameなら

33
00:02:17,790 --> 00:02:24,740
com、com.example
com.example.appnameを返します

34
00:02:24,740 --> 00:02:28,730
メソッドは各パッケージの
各オカレンスについて

35
00:02:28,730 --> 00:02:32,290
プリフィックスと整数1のペアを返し

36
00:02:32,290 --> 00:02:35,480
オカレンスは sum関数を引数とする

37
00:02:35,480 --> 00:02:39,450
CombinePerKeyで合算されます

38
00:02:39,450 --> 00:02:45,290
Top_5コンバイナがインポート数が
多いパッケージを特定します

39
00:02:45,290 --> 00:02:50,730
次に「is_popular.py」ファイルを実行します

40
00:02:50,730 --> 00:02:53,750
パイプラインが実行されたら

41
00:02:53,750 --> 00:03:00,550
outputディレクトリの出力ファイルの
内容をリストしてorg、org.apache

42
00:03:00,550 --> 00:03:08,610
org.apache.beam、org.apache.beam.sdk
などTop 5のパッケージを確認できます

43
00:03:08,610 --> 00:03:11,340
このパイプラインでは

44
00:03:11,340 --> 00:03:14,105
出力先を変更できます

45
00:03:14,105 --> 00:03:21,590
たとえば /tmpディレクトリの
myoutputで始まるファイルに

46
00:03:21,590 --> 00:03:26,365
結果を書き込むよう
デフォルトを上書きして

47
00:03:26,365 --> 00:03:29,440
パイプラインを実行すると

48
00:03:29,440 --> 00:03:36,280
myoutputで始まる新しい
出力インスタンスが作成されます

49
00:03:36,280 --> 00:03:38,730
今回は以上です