1
00:00:00,000 --> 00:00:04,485
特徴エンジニアリングを行える場所は
3つありましたね

2
00:00:04,485 --> 00:00:06,990
特徴を事前処理する方法と

3
00:00:06,990 --> 00:00:11,490
TensorFlowでオンザフライで
特徴を作成する方法を見ました

4
00:00:11,490 --> 00:00:14,575
もう1つのオプションは
Cloud Dataflowで

5
00:00:14,575 --> 00:00:17,660
特徴の作成を事前処理することです

6
00:00:17,660 --> 00:00:24,730
Dataflowを使って 事前処理済み
または拡張されたデータセットを作り

7
00:00:24,730 --> 00:00:28,955
それを使ってモデルをトレーニングします

8
00:00:28,955 --> 00:00:34,995
予測中になんらかの方法で
同じ事前処理ステップを行う必要があります

9
00:00:34,995 --> 00:00:38,270
この方法はDataflowが予測ランタイムにも

10
00:00:38,270 --> 00:00:41,545
含まれる場合に最適に機能します

11
00:00:41,545 --> 00:00:46,425
すでに見たとおり
GCPの参照アーキテクチャがこれを行います

12
00:00:46,425 --> 00:00:52,500
Dataflowはストリーミングデータと
バッチデータを処理できるので

13
00:00:52,500 --> 00:00:56,640
トレーニングと予測の
両方のパイプラインに含まれます

14
00:00:56,640 --> 00:00:58,640
これを行う場合

15
00:00:58,640 --> 00:01:03,225
Dataflowは事前処理に適した場所です

16
00:01:03,225 --> 00:01:09,510
Dataflowは時間枠ごとの集約を
扱う特徴に最適です

17
00:01:09,510 --> 00:01:12,485
たとえば特徴として

18
00:01:12,485 --> 00:01:18,590
過去1時間にプロダクトを見た
平均人数を表すことができます

19
00:01:18,590 --> 00:01:25,630
トレーニングではDataflowを使って
ログファイルからそれを計算できます

20
00:01:25,630 --> 00:01:28,810
しかし このような特徴の性質上

21
00:01:28,810 --> 00:01:34,965
実際のトラフィックに基づきリアルタイムで
Dataflowで計算する必要があるでしょう

22
00:01:34,965 --> 00:01:39,905
Dataflowで任意のPTransformに
フィールドを追加できます

23
00:01:39,905 --> 00:01:42,394
この例のadd_fieldsでは

24
00:01:42,394 --> 00:01:45,780
pardueが
input_fieldsを受け入れ

25
00:01:45,780 --> 00:01:49,020
利用者数を導き出してそれを累積し

26
00:01:49,020 --> 00:01:53,715
訪問者数を
過去1時間の数値として追加します

27
00:01:53,715 --> 00:01:59,260
バッチとストリームの両方で
同じコードとDataflowが機能するので

28
00:01:59,260 --> 00:02:04,765
トレーニングと予測の両方のパイプラインで
add_fieldsメソッドを使えます

29
00:02:04,765 --> 00:02:08,675
3つ目のオプションは
混合的な手法です

30
00:02:08,675 --> 00:02:13,420
Googleの研究者がこの方法を
最近公開しました

31
00:02:13,420 --> 00:02:17,795
次のモジュールで
これを詳しく見ていきますが

32
00:02:17,795 --> 00:02:19,075
要約すると

33
00:02:19,075 --> 00:02:25,335
トレーニング中にDataflowで
事前処理データを作成しますが

34
00:02:25,335 --> 00:02:30,220
変換自体はTensorFlowで実装されます

35
00:02:30,220 --> 00:02:31,870
こうすると予測中に

36
00:02:31,870 --> 00:02:36,040
特徴エンジニアリングが
TensorFlowグラフに含まれます

37
00:02:36,040 --> 00:02:39,580
これはかなりメリットがあります
なぜなら

38
00:02:39,580 --> 00:02:42,915
Dataflowはデータ集計に優れていて

39
00:02:42,915 --> 00:02:45,230
他方TensorFlowは

40
00:02:45,230 --> 00:02:50,510
inputフィールドをオンザフライで
操作するのに優れているからです