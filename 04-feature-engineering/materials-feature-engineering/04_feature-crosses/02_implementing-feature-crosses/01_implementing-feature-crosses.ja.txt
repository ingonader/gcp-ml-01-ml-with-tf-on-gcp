特徴（feature）とは何か
なぜ特徴を使うのかを理解しました 次に 特徴クロスの実装方法を
見ていきましょう TensorFlowを使って
特徴クロスを作成するには crossed_columnメソッドを
tf.feature_columnモデルで使います これは 語彙リストの 数値列やカテゴリ列で
取得したモデルと同じです 同じモデルから来ています この例の最初の引数は
カテゴリ列のリストです リストを渡すことで 2つ、3つなど任意の数の列を
掛けることができます ただし これらの列は
カテゴリ列でなければなりません 数値データの場合は まずバケット化してから
特徴クロスを適用します 数値列をバケット化すると 前に説明した黒い線を引くことになります 列を離散化するのです 2番目の引数は何でしょう？ 24 x 7はハッシュバケットの総数です TensorFlowでは特徴クロスを適用し 特徴クロスのハッシュを計算して ハッシュをバケットの1つに入れます ここでは24 x 7を指定しましたが 衝突がないという保証はありません 水曜日の午後3時の
ハッシュのモデル168が 日曜日の午後4時のモデル168と
たまたま同じになる可能性もあり その場合は この2つ日時の組み合わせが
一緒に考慮されます もう少し詳しく見ましょう TensorFlowはこの手順をスキップして
特徴クロスのハッシュ表現に進みますが 何が起きているのか
考えるのは良いことです 簡略化のため24 x 7の代わりに 6を指定すると
どうなるでしょう？ 2つのカテゴリ列を渡して
特徴クロスを行います 曜日は7つの固有値を持ち 時刻は24個の固有値を持ちます 特徴クロスは24 x 7
つまり168個の一意の値を持ちます 水曜日の午後3時を考えましょう 午後3時は たとえば数値15です 水曜日は 数値3だとします 特徴クロスが適用された後の値は たとえば168個中の87です 次に87のハッシュと
6のモデルを計算します このハッシュされた特徴クロスに
3番目の箱が割り当てられるとします これで曜日/時刻の特徴クロスに
水曜日の午後3時が含まれます ワンホットエンコーディングした値は
数値3に相当します 繰り返しますが
TensorFlowはこれを実行しません ワンホットエンコーディングをしてから
特徴クロスを行う必要はありません もしそうすれば
メモリ効率が悪くなります でもこれで 何が起きているか
概念を示せます ハッシュバケット数は
疎性と衝突を制御します もし 前のスライドのように ハッシュバケットを 一意の特徴クロスの値よりも
ずっと小さく設定すれば 衝突が多くなります おそらく水曜日午後3時 水曜日午後7時
木曜日午前2時など すべて同じバケットに入り
同じものとして扱われます 平均してすべての特徴クロス値の
1/6が1つのバケットに入ります 平均して168個の固有値が存在するので 各バケットには28個の
曜日/時刻の組み合わせが含まれます このため特徴クロスがデータを
記憶できる量は制限されますが 使用されるメモリ量も
とても低くなります 6つのバケットしかありません 同じ方法でいくつかの曜日/時間の組み合わせを
バケットに集約します 一方 まったく逆のやり方で
ハッシュバケット数を多くして 衝突の可能性を低くしたら
どうなりますか ハッシュバケット数を
たとえば300に設定します 平均して1バケットには 1つの曜日/時刻の組み合わせか
ゼロ個の組み合わせが含まれます 2つのときもありますが その可能性はとても低いです ハッシュバケット数に高い値を使用すると 特徴クロスの疎表現が生成されます 私は実際にはnの平方根の半分から
nの2倍までの間の数を選びます 記憶と疎性のトレードオフを
どうしたいかで決定しますが これは単なる私の経験則です