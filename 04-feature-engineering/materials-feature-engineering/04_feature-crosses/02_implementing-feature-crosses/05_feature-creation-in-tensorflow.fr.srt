1
00:00:00,010 --> 00:00:02,520
Dans le cours précédent,

2
00:00:02,520 --> 00:00:07,291
nous avons vu le prétraitement
de caractéristiques dans TensorFlow.

3
00:00:07,291 --> 00:00:09,450
Comment avons-nous procédé ?

4
00:00:09,450 --> 00:00:12,060
Nous avons utilisé
des colonnes de caractéristiques.

5
00:00:12,060 --> 00:00:18,264
Voyons maintenant comment créer
des caractéristiques dans TensorFlow.

6
00:00:18,264 --> 00:00:20,345
Souvenez-vous :
la fonction d'entrée renvoie

7
00:00:20,345 --> 00:00:23,740
des caractéristiques et des libellés.

8
00:00:23,740 --> 00:00:28,656
Quel est le type de données
des caractéristiques ?

9
00:00:28,656 --> 00:00:31,334
Il s'agit d'un dictionnaire Python.

10
00:00:31,335 --> 00:00:34,205
Disons que la distance
aux transports publics est

11
00:00:34,205 --> 00:00:38,485
un prédicteur clé des prix immobiliers.

12
00:00:38,485 --> 00:00:41,935
Nous voulons donc ajouter
une caractéristique qui capture

13
00:00:41,935 --> 00:00:46,965
la distance de la maison
avec la station de métro la plus proche.

14
00:00:46,965 --> 00:00:49,265
Disons que l'emplacement
de la station de métro

15
00:00:49,265 --> 00:00:51,465
fait partie de l'ensemble de données

16
00:00:51,465 --> 00:00:54,030
et donc aussi des caractéristiques.

17
00:00:54,030 --> 00:00:58,750
Dans notre méthode, nous allons calculer
la distance euclidienne entre la maison

18
00:00:58,750 --> 00:01:03,920
et la station de métro,
puis l'ajouter au dictionnaire.

19
00:01:03,920 --> 00:01:08,802
Que fait cette méthode
"add_engineered" ?

20
00:01:08,802 --> 00:01:14,910
Appelez la méthode "add_engineered"
depuis toutes les fonctions d'entrée.

21
00:01:14,910 --> 00:01:17,800
Combien en avons-nous ?

22
00:01:17,800 --> 00:01:22,620
En général, trois :
celle d'entraînement, celle d'évaluation

23
00:01:22,620 --> 00:01:24,762
et celle de diffusion.

24
00:01:24,762 --> 00:01:31,070
La méthode "add_engineered"
doit être appelée avec les trois.

25
00:01:31,070 --> 00:01:36,890
Dans la fonction "train_input",
au lieu d'afficher "(features), label",

26
00:01:36,890 --> 00:01:41,960
j'encapsule les caractéristiques
avec un appel à "add_engineered".

27
00:01:41,960 --> 00:01:45,160
Ainsi, les caractéristiques
supplémentaires créées

28
00:01:45,160 --> 00:01:48,679
sont ajoutées au dictionnaire Python.

29
00:01:48,689 --> 00:01:52,750
La fonction d'entrée d'évaluation
est similaire à celle d'entraînement.

30
00:01:52,750 --> 00:01:57,020
Encapsulez les appels
avec "add_engineered".

31
00:01:57,020 --> 00:01:59,279
Dans la fonction "serving_input",

32
00:01:59,279 --> 00:02:04,320
vous affichez "ServingInputReceiver",
qui prend deux paramètres.

33
00:02:04,320 --> 00:02:07,239
Le premier paramètre est
les caractéristiques.

34
00:02:07,239 --> 00:02:12,220
Le second correspond aux espaces réservés
pour ce que vous recevez dans le JSON.

35
00:02:12,220 --> 00:02:16,060
Les espaces réservés restent identiques
et vous recevez les mêmes données brutes.

36
00:02:16,060 --> 00:02:18,470
Comme pour la fonction
d'entrée d'entraînement,

37
00:02:18,470 --> 00:02:22,550
encapsulez les caractéristiques
avec un appel à "add_engineered".

38
00:02:22,550 --> 00:02:25,830
Ainsi, les caractéristiques
supplémentaires créées

39
00:02:25,830 --> 00:02:28,030
pendant l'entraînement

40
00:02:28,030 --> 00:02:31,100
sont aussi ajoutées
au dictionnaire Python.