1
00:00:00,890 --> 00:00:02,520
En la lección anterior

2
00:00:02,520 --> 00:00:05,395
hablamos sobre
cómo realizar el procesamiento previo

3
00:00:05,395 --> 00:00:07,285
de atributos en TensorFlow.

4
00:00:07,290 --> 00:00:09,060
¿Cómo lo hicimos?

5
00:00:09,450 --> 00:00:11,530
Usamos columnas de atributos.

6
00:00:12,060 --> 00:00:16,494
Ahora, veamos
cómo crear atributos en TensorFlow.

7
00:00:18,250 --> 00:00:22,690
Recuerden que la función de entrada
muestra atributos y etiquetas.

8
00:00:23,730 --> 00:00:26,736
¿Cuál es el tipo de datos
de los atributos?

9
00:00:27,552 --> 00:00:30,454
Respuesta: es un diccionario de Python.

10
00:00:31,335 --> 00:00:34,615
Digamos que la distancia
al transporte público

11
00:00:34,615 --> 00:00:38,155
es un predictor clave
de los precios de las casas.

12
00:00:38,155 --> 00:00:43,975
Deseamos agregar un nuevo atributo
que capture la distancia de una casa

13
00:00:43,975 --> 00:00:46,475
de la estación de metro más cercana.

14
00:00:47,065 --> 00:00:49,685
Supongamos que la ubicación
de la estación del metro

15
00:00:49,685 --> 00:00:54,030
es parte de nuestro conjunto de datos
y también de nuestros atributos.

16
00:00:54,030 --> 00:00:57,720
En nuestro método,
calculamos la distancia euclidiana

17
00:00:57,720 --> 00:01:02,390
entre la casa y la estación de metro
y la agregamos al diccionario.

18
00:01:03,820 --> 00:01:07,042
¿Dónde entra este método add_engineered?

19
00:01:08,954 --> 00:01:13,440
Llamen al método add_engineered
desde todas las funciones de entrada.

20
00:01:14,910 --> 00:01:17,350
¿Cuántas funciones de entrada tenemos?

21
00:01:17,800 --> 00:01:21,230
En general, tenemos tres,
función de entrada de entrenamiento

22
00:01:21,230 --> 00:01:24,762
función de entrada de evaluación
y función de entrada de predicciones.

23
00:01:24,762 --> 00:01:29,380
El método add_engineered
se debe llamar desde las tres.

24
00:01:31,050 --> 00:01:36,330
En la función de entrada de entrenamiento,
en vez de mostrar (features), label

25
00:01:36,890 --> 00:01:41,960
envuelvo los atributos
con una llamada a add_engineered.

26
00:01:41,960 --> 00:01:43,880
De esta forma, los atributos adicionales

27
00:01:43,880 --> 00:01:47,429
que estoy creando
se agregan al diccionario de Python.

28
00:01:48,680 --> 00:01:52,750
La función de entrada de evaluación
es similar a la de entrenamiento.

29
00:01:52,750 --> 00:01:56,260
Envolvemos las llamadas
con add_engineered.

30
00:01:57,000 --> 00:01:59,369
En la función de entrada de predicción

31
00:01:59,369 --> 00:02:04,320
muestran un ServingInputReceiver
que toma dos parámetros.

32
00:02:04,320 --> 00:02:07,239
El primer parámetro son los atributos.

33
00:02:07,239 --> 00:02:12,220
El segundo son los marcadores de posición
para lo que reciban en el JSON

34
00:02:12,220 --> 00:02:14,090
Los marcadores de posición no cambian

35
00:02:14,090 --> 00:02:16,300
pues reciben los mismos datos
sin procesar.

36
00:02:16,300 --> 00:02:18,980
Pero igual que con la función
de entrada de entrenamiento

37
00:02:18,980 --> 00:02:22,550
envolvemos los atributos
en una llamada a add_engineered.

38
00:02:22,550 --> 00:02:26,250
De esta forma, los mismos atributos
adicionales que se crearon

39
00:02:26,250 --> 00:02:27,890
durante el entrenamiento

40
00:02:27,890 --> 00:02:30,870
también se agregarán
al diccionario de Python.