1
00:00:00,000 --> 00:00:04,860
特徴（feature）とは何か
なぜ特徴を使うのかを理解しました

2
00:00:04,860 --> 00:00:09,070
次に 特徴クロスの実装方法を
見ていきましょう

3
00:00:09,070 --> 00:00:12,415
TensorFlowを使って
特徴クロスを作成するには

4
00:00:12,415 --> 00:00:17,460
crossed_columnメソッドを
tf.feature_columnモデルで使います

5
00:00:17,460 --> 00:00:19,350
これは 語彙リストの

6
00:00:19,350 --> 00:00:23,580
数値列やカテゴリ列で
取得したモデルと同じです

7
00:00:23,580 --> 00:00:25,620
同じモデルから来ています

8
00:00:25,620 --> 00:00:30,440
この例の最初の引数は
カテゴリ列のリストです

9
00:00:30,440 --> 00:00:32,380
リストを渡すことで

10
00:00:32,380 --> 00:00:37,320
2つ、3つなど任意の数の列を
掛けることができます

11
00:00:37,320 --> 00:00:42,020
ただし これらの列は
カテゴリ列でなければなりません

12
00:00:42,020 --> 00:00:44,045
数値データの場合は

13
00:00:44,045 --> 00:00:47,950
まずバケット化してから
特徴クロスを適用します

14
00:00:47,950 --> 00:00:50,330
数値列をバケット化すると

15
00:00:50,330 --> 00:00:54,510
前に説明した黒い線を引くことになります

16
00:00:54,510 --> 00:00:56,685
列を離散化するのです

17
00:00:56,685 --> 00:00:59,700
2番目の引数は何でしょう？

18
00:00:59,700 --> 00:01:04,245
24 x 7はハッシュバケットの総数です

19
00:01:04,245 --> 00:01:08,670
TensorFlowでは特徴クロスを適用し

20
00:01:08,670 --> 00:01:11,460
特徴クロスのハッシュを計算して

21
00:01:11,460 --> 00:01:15,375
ハッシュをバケットの1つに入れます

22
00:01:15,375 --> 00:01:19,350
ここでは24 x 7を指定しましたが

23
00:01:19,350 --> 00:01:22,335
衝突がないという保証はありません

24
00:01:22,335 --> 00:01:27,070
水曜日の午後3時の
ハッシュのモデル168が

25
00:01:27,070 --> 00:01:34,230
日曜日の午後4時のモデル168と
たまたま同じになる可能性もあり

26
00:01:34,230 --> 00:01:40,380
その場合は この2つ日時の組み合わせが
一緒に考慮されます

27
00:01:40,380 --> 00:01:43,195
もう少し詳しく見ましょう

28
00:01:43,195 --> 00:01:49,530
TensorFlowはこの手順をスキップして
特徴クロスのハッシュ表現に進みますが

29
00:01:49,530 --> 00:01:53,550
何が起きているのか
考えるのは良いことです

30
00:01:53,550 --> 00:01:58,395
簡略化のため24 x 7の代わりに

31
00:01:58,395 --> 00:02:02,580
6を指定すると
どうなるでしょう？

32
00:02:02,580 --> 00:02:07,610
2つのカテゴリ列を渡して
特徴クロスを行います

33
00:02:07,610 --> 00:02:10,975
曜日は7つの固有値を持ち

34
00:02:10,975 --> 00:02:14,440
時刻は24個の固有値を持ちます

35
00:02:14,440 --> 00:02:21,495
特徴クロスは24 x 7
つまり168個の一意の値を持ちます

36
00:02:21,495 --> 00:02:24,615
水曜日の午後3時を考えましょう

37
00:02:24,615 --> 00:02:26,420
午後3時は

38
00:02:26,420 --> 00:02:29,070
たとえば数値15です

39
00:02:29,070 --> 00:02:30,330
水曜日は

40
00:02:30,330 --> 00:02:31,995
数値3だとします

41
00:02:31,995 --> 00:02:35,595
特徴クロスが適用された後の値は

42
00:02:35,595 --> 00:02:40,130
たとえば168個中の87です

43
00:02:40,130 --> 00:02:44,855
次に87のハッシュと
6のモデルを計算します

44
00:02:44,855 --> 00:02:51,960
このハッシュされた特徴クロスに
3番目の箱が割り当てられるとします

45
00:02:51,960 --> 00:02:57,855
これで曜日/時刻の特徴クロスに
水曜日の午後3時が含まれます

46
00:02:57,855 --> 00:03:02,645
ワンホットエンコーディングした値は
数値3に相当します

47
00:03:02,645 --> 00:03:05,670
繰り返しますが
TensorFlowはこれを実行しません

48
00:03:05,670 --> 00:03:10,175
ワンホットエンコーディングをしてから
特徴クロスを行う必要はありません

49
00:03:10,175 --> 00:03:13,550
もしそうすれば
メモリ効率が悪くなります

50
00:03:13,550 --> 00:03:16,620
でもこれで 何が起きているか
概念を示せます

51
00:03:16,620 --> 00:03:23,305
ハッシュバケット数は
疎性と衝突を制御します

52
00:03:23,305 --> 00:03:26,440
もし 前のスライドのように

53
00:03:26,440 --> 00:03:28,675
ハッシュバケットを

54
00:03:28,675 --> 00:03:33,180
一意の特徴クロスの値よりも
ずっと小さく設定すれば

55
00:03:33,180 --> 00:03:34,930
衝突が多くなります

56
00:03:34,930 --> 00:03:37,020
おそらく水曜日午後3時

57
00:03:37,020 --> 00:03:39,790
水曜日午後7時
木曜日午前2時など

58
00:03:39,790 --> 00:03:44,155
すべて同じバケットに入り
同じものとして扱われます

59
00:03:44,155 --> 00:03:50,995
平均してすべての特徴クロス値の
1/6が1つのバケットに入ります

60
00:03:50,995 --> 00:03:56,095
平均して168個の固有値が存在するので

61
00:03:56,095 --> 00:04:01,765
各バケットには28個の
曜日/時刻の組み合わせが含まれます

62
00:04:01,765 --> 00:04:08,710
このため特徴クロスがデータを
記憶できる量は制限されますが

63
00:04:08,710 --> 00:04:12,855
使用されるメモリ量も
とても低くなります

64
00:04:12,855 --> 00:04:15,245
6つのバケットしかありません

65
00:04:15,245 --> 00:04:21,779
同じ方法でいくつかの曜日/時間の組み合わせを
バケットに集約します

66
00:04:21,779 --> 00:04:28,240
一方 まったく逆のやり方で
ハッシュバケット数を多くして

67
00:04:28,240 --> 00:04:33,030
衝突の可能性を低くしたら
どうなりますか

68
00:04:33,030 --> 00:04:37,715
ハッシュバケット数を
たとえば300に設定します

69
00:04:37,715 --> 00:04:40,130
平均して1バケットには

70
00:04:40,130 --> 00:04:45,345
1つの曜日/時刻の組み合わせか
ゼロ個の組み合わせが含まれます

71
00:04:45,345 --> 00:04:47,535
2つのときもありますが

72
00:04:47,535 --> 00:04:50,110
その可能性はとても低いです

73
00:04:50,110 --> 00:04:54,315
ハッシュバケット数に高い値を使用すると

74
00:04:54,315 --> 00:04:58,650
特徴クロスの疎表現が生成されます

75
00:04:58,650 --> 00:05:05,385
私は実際にはnの平方根の半分から
nの2倍までの間の数を選びます

76
00:05:05,385 --> 00:05:11,385
記憶と疎性のトレードオフを
どうしたいかで決定しますが

77
00:05:11,385 --> 00:05:14,030
これは単なる私の経験則です