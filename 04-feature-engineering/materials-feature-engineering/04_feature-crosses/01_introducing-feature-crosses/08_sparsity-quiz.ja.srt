1
00:00:00,000 --> 00:00:04,785
特徴クロスは複数のカテゴリの
特徴を結合します

2
00:00:04,785 --> 00:00:06,955
連続的な特徴がある場合は

3
00:00:06,955 --> 00:00:10,915
それを離散化した後で
特徴クロスを適用できます

4
00:00:10,915 --> 00:00:15,640
入力空間のサイズに関して
これにどんな意味があるのか

5
00:00:15,640 --> 00:00:18,470
いくつかの例で見ていきましょう

6
00:00:18,470 --> 00:00:22,790
ある都市の交通量レベルを
予測したいとします

7
00:00:22,790 --> 00:00:27,520
生の2つの入力つまり
1日の時刻と曜日があります

8
00:00:27,535 --> 00:00:33,169
時刻と曜日を
ワンホットエンコーディングして

9
00:00:33,169 --> 00:00:38,320
モデルに入力すると
入力の数はいくつですか？

10
00:00:38,320 --> 00:00:41,890
24 + 7 = 31だと思いますか？

11
00:00:41,890 --> 00:00:47,500
時刻をワンホットエンコーディングすると
24個の入力ノードになります

12
00:00:47,500 --> 00:00:51,650
「すべてゼロ」を有効な入力として扱えば
23個を取り除けますが

13
00:00:51,650 --> 00:00:55,435
「すべてゼロ」は通常
欠落データ用に予約されるので

14
00:00:55,435 --> 00:00:57,495
24個の入力ノードにします

15
00:00:57,495 --> 00:01:01,555
同様に曜日を
ワンホットエンコーディングすると

16
00:01:01,555 --> 00:01:05,040
7つの入力ノードになり

17
00:01:05,040 --> 00:01:07,885
合計31個の入力ノードです

18
00:01:07,885 --> 00:01:13,345
でも午後5時の交通量は
毎日同じではありません

19
00:01:13,345 --> 00:01:19,285
水曜日の午後5時は
週末の午後5時とまったく異なります

20
00:01:19,285 --> 00:01:23,780
モデルにこれを学習させる
簡単な方法があります

21
00:01:23,780 --> 00:01:25,950
もうご存知のとおり

22
00:01:25,950 --> 00:01:29,260
特徴クロスと
2つの生の入力です

23
00:01:29,260 --> 00:01:33,780
1日の時刻と曜日を連結すると

24
00:01:33,780 --> 00:01:39,590
モデルは日時の組み合わせを
すばやく学習できます

25
00:01:39,590 --> 00:01:41,980
すごいですね
ただし

26
00:01:41,980 --> 00:01:45,285
入力の数はいくつになりますか？

27
00:01:45,285 --> 00:01:49,605
24 + 7ではなく

28
00:01:49,605 --> 00:01:56,432
24 x 7です これが
可能なすべての組み合わせです

29
00:01:56,432 --> 00:02:06,925
入力の数が 24 + 7 = 31個から
24 x 7 = 168個になりました

30
00:02:06,925 --> 00:02:10,755
特徴クロスを行うと
入力の数が増えます

31
00:02:10,755 --> 00:02:14,280
データサイエンティストが心配する点は

32
00:02:14,280 --> 00:02:18,015
ワンホットエンコーディングの
カテゴリ変数によって

33
00:02:18,015 --> 00:02:20,435
モデルサイズが大きくなることです

34
00:02:20,435 --> 00:02:22,925
1つのワンホットエンコーディングでさえ

35
00:02:22,925 --> 00:02:25,955
従来のMLでは
多くの障害が発生するのに

36
00:02:25,955 --> 00:02:28,280
特徴クロスを
どう処理するのか

37
00:02:28,280 --> 00:02:30,160
心臓発作を起こしそうです

38
00:02:30,160 --> 00:02:32,310
TensorFlow内部では

39
00:02:32,310 --> 00:02:37,990
ワンホットエンコーディングと
特徴クロスに疎表現を使うので

40
00:02:37,990 --> 00:02:39,365
問題ありません

41
00:02:39,365 --> 00:02:42,605
入力データセットの特定の1行について

42
00:02:42,605 --> 00:02:46,810
X3の中で該当するノードは
いくつですか？

43
00:02:46,810 --> 00:02:48,640
1つだけです

44
00:02:48,640 --> 00:02:50,680
理由がわかりますか？

45
00:02:50,680 --> 00:02:56,595
ラベルごとに特定の時間に
テーブルが毎回調べられます

46
00:02:56,595 --> 00:03:00,490
これは 特定の曜日の
特定の時刻に相当します

47
00:03:00,490 --> 00:03:05,350
たとえば時刻入力の中で
午後3時を調べ

48
00:03:05,350 --> 00:03:08,705
曜日入力の中で
水曜日を調べます

49
00:03:08,705 --> 00:03:11,485
これに特徴クロスを適用すると

50
00:03:11,485 --> 00:03:14,425
1つの入力ノードになります

51
00:03:14,425 --> 00:03:19,960
水曜日の午後3時に相当する入力ノードが
「1」になり

52
00:03:19,960 --> 00:03:24,475
X3の他のすべての入力ノードはゼロです

53
00:03:24,475 --> 00:03:29,990
つまり入力は167個のゼロと
ひとつの1で構成されます

54
00:03:29,990 --> 00:03:35,135
特徴クロスを適用すると
入力はとても疎になることを

55
00:03:35,135 --> 00:03:37,360
覚えておいてください

56
00:03:37,360 --> 00:03:42,735
TensorFlowにはこのための
簡単なツールがあります

57
00:03:42,735 --> 00:03:45,705
クイズの正解を確認しましょう

58
00:03:45,705 --> 00:03:47,950
まずaではありません

59
00:03:47,950 --> 00:03:51,810
データ範囲区分化（bin）によってモデルは

60
00:03:51,810 --> 00:03:55,395
1つの特徴の中の線形関係を
学習できます

61
00:03:55,395 --> 00:04:00,220
しかし都市は2次元以上の
空間に存在するので

62
00:04:00,220 --> 00:04:03,320
都市固有の関係を学習させるには

63
00:04:03,320 --> 00:04:07,590
緯度と経度の掛け合わせ（クロス）が必要です

64
00:04:07,590 --> 00:04:10,315
2番目のbはどうでしょう？

65
00:04:10,315 --> 00:04:12,285
これも違います

66
00:04:12,285 --> 00:04:16,665
データ範囲を区分するのは良いことですが

67
00:04:16,665 --> 00:04:20,175
都市は緯度と経度の論理積ですから

68
00:04:20,175 --> 00:04:27,780
別々の特徴クロスが原因で
都市固有の価格の学習が妨げられます

69
00:04:27,790 --> 00:04:30,140
cはどうでしょう？

70
00:04:30,140 --> 00:04:31,790
これが正解です

71
00:04:31,790 --> 00:04:35,580
区分化した緯度と
区分化した経度を掛けると

72
00:04:35,580 --> 00:04:41,030
モデルは1人あたり部屋数について
都市固有の傾向を学習できます

73
00:04:41,030 --> 00:04:47,780
区分化により 緯度の変化と経度の変化で
同じ結果が出なくなります

74
00:04:47,780 --> 00:04:52,740
区分化の粒度に応じて
この特徴クロスは

75
00:04:52,740 --> 00:04:59,125
都市固有、地区固有、
さらに住居区画固有の結果を学習できます

76
00:04:59,125 --> 00:05:01,825
4番目は違います

77
00:05:01,825 --> 00:05:08,635
この例では 特徴の実際の値を
掛け合わせるのは不適切です

78
00:05:08,635 --> 00:05:13,822
実際の値 たとえば
緯度とroomsPerPersonを掛けると

79
00:05:13,822 --> 00:05:18,660
1つの特徴 たとえば
緯度の10パーセントの変化と別の特徴

80
00:05:18,660 --> 00:05:23,890
たとえばroomsPerPersonの
10パーセントの変化が等しくなり

81
00:05:23,890 --> 00:05:28,325
問題が大きすぎて
TensorFlowでも不可能です

82
00:05:28,325 --> 00:05:34,530
カテゴリ列または離散化した列だけを
掛け合わせることができます