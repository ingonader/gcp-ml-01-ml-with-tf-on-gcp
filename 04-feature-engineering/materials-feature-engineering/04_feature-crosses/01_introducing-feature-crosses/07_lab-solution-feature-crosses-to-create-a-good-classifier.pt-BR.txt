Aqui estamos nós. Estamos de modo intensivo no Playground,
e o conjunto de dados que temos parece ter pontos azuis no canto inferior esquerdo
e no canto superior direito, parece ter pontos laranja no canto
superior esquerdo e no inferior direito. Digamos que temos duas
entradas brutas x1 e x2. O que você quer é, basicamente,
usar o x1 e o x2 para treinar o modelo. Então, vamos seguir em frente e
treinar o modelo, que toma x1 e x2 como entrada neste
conjunto de dados específico. E como você pode ver, ele pode continuar treinando, mas a imagem de fundo não
muda muito, certo? É tudo desbotado porque x1 e
x2 e modelo linear, isso não funciona realmente em termos de
uma boa capacidade de aprendizado. Então o modelo não aprende muito. Vamos parar isso e vamos
ver isso de novo. Acontece que é uma combinação de x1 e x2
que realmente importa. Se x1 é negativo e x2 é negativo, é azul. Se x1 é positivo e x2 é positivo, é azul. Se o x1 e o x2 tiverem
sinais diferentes, então parece ser laranja. E o que isso lembra? Isso é um cruzamento de
atributos entre x1 e x2. Vamos adicionar o cruzamento
de atributos x1 e x2 como outra entrada. Vamos em frente e treinar,
e podemos ver quase imediatamente que temos um modelo muito
bom que separa o azul do amarelo, e o fundo para os pontos azuis
tende a ser azul, e o fundo dos pontos amarelos
tende a ser amarelo. E há, claro, o ruído onde você
tem erro de classificação, mas isso é esperado,
porque é um conjunto de dados ruidosos. A ideia principal é, tomando essa percepção humana,
essa percepção de que é uma combinação de x1 e x2 que
realmente nos permitirá classificar melhor neste
conjunto de dados, podemos adicionar x1 e x2. Que não é realmente uma nova entrada. É basicamente uma engenharia de atributos que realizamos nas entradas
originais em x1 e x2, e isso nos permite separar bem
o azul e o amarelo. Vamos ver agora um caso diferente. Neste caso, você basicamente tem
os pontos azuis no centro e os pontos amarelos em direção às bordas. E novamente, se eu apenas usar
x1 e x2 e eu treiná-lo, a imagem de fundo é toda
desbotada porque não há muito que possa ser
aprendido para este modelo. Então podemos dizer, bem, nós deveríamos olhar qual
tipo de engenharia futura é possível, então deixe-me parar isso. Que tipo de engenharia futura é possível
para basicamente fazer a separação? E novamente a intuição aqui é que, se x1 e x2 são pequenos, é azul. Se x1 e x2 são grandes, tende a ser amarelo. Mas não é que x1 e x2 são grandes. Se você olhar para um ponto aqui, x1 é muito pequeno, mas x2 é grande. Outra maneira de pensar sobre isso é, se você tem que pensar nisso
como o centro da imagem, os pontos que estão próximos do
centro tendem a ser azuis. Os que estão distantes
do centro tendem a ser amarelos. E o que isso lembra? Pontos perto e longe.
Isso é uma distância. E qual é a equação de uma distância? Raiz quadrada de x ao quadrado
mais y ao quadrado. Você não precisa de uma raiz quadrada,
porque o que estamos fazendo aqui é usar atributos de entrada
em uma rede neural, então precisamos de x ao quadrado
e y ao quadrado. Vamos em frente e tomar x1 ao quadrado e
x2 ao quadrado como entradas. E agora vamos treinar, e vemos que, quase imediatamente, você tem uma boa separação entre os
pontos azuis e os pontos laranja. Vamos parar isso. Vamos olhar para os dois. Em ambos, o limite de separação
é um limite linear. Neste caso, é bem óbvio. Não é um limite linear. Mesmo usando um modelo linear aqui, não há camadas ocultas, não há rede neural. É essencialmente uma combinação
linear das entradas. Somos capazes de conseguir
um limite não linear. Isso é algo para se dar conta. Se você tiver cruzamentos de atributos, mesmo que você esteja usando
um modelo linear, porque o cruzamento de atributos
não é linear, você de fato tem um modelo não linear. Então cruzamentos de atributos, uma das
razões pelas quais eles funcionam é que eles trazem o poder da
não linearidade para esse problema. Eles os trazem para lidar com
esse problema, enquanto não temos que pagar o
preço da não linearidade. Não precisamos nos preocupar
com os modelos serem muito profundos e com muitos
problemas de treinamento etc. Há um modelo linear. E o ponto positivo de um
modelo linear é que a superfície da área é convexa. O que significa que você tem
um mínimo global único, é relativamente fácil de encontrar
e você pode fazer isso. Então você tem as vantagens de
um modelo linear, mas o poder da não linearidade. E isso é algo legal sobre o
cruzamento de atributo. Mesmo no outro caso, este também é um limite não linear
porque são duas linhas, certo? Não é uma única linha, mas não é tão óbvio para
ver como é neste caso, onde é uma elipse, o que
não é, obviamente, uma linha. Algo para lembrar é que, mesmo quando temos o poder das redes
neurais e queremos usá-las, você pode considerar a inclusão de cruzamentos
de atributos como parte do toolkit pois eles permitem ter um modelo simples,
mas ainda conseguir não linearidade.