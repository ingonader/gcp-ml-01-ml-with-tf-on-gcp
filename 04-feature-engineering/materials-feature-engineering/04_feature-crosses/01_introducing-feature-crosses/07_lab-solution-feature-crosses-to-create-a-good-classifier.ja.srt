1
00:00:00,000 --> 00:00:03,290
このようにTensorFlow Playgroundで

2
00:00:03,290 --> 00:00:05,750
データセットが揃っています

3
00:00:05,750 --> 00:00:08,980
基本的に 青い点が

4
00:00:08,980 --> 00:00:12,660
左下と右上にあるように見え

5
00:00:12,660 --> 00:00:15,395
オレンジの点が

6
00:00:15,395 --> 00:00:18,315
左上と右下にあります

7
00:00:18,315 --> 00:00:22,605
生の 2つの入力
x1とx2があるとします

8
00:00:22,605 --> 00:00:27,720
x1とx2を使ってモデルを
トレーニングしましょう

9
00:00:27,720 --> 00:00:29,920
モデルのトレーニングに

10
00:00:29,920 --> 00:00:34,095
このデータセットで
x1とx2を入力として使います

11
00:00:34,095 --> 00:00:37,550
ご覧のように
トレーニングが続きますが

12
00:00:37,550 --> 00:00:40,620
背景画像はあまり変わりませんね

13
00:00:40,620 --> 00:00:43,090
全体がぼやけています

14
00:00:43,090 --> 00:00:49,575
x1、x2、線形モデルが
この学習でうまく機能しないからです

15
00:00:49,575 --> 00:00:52,735
このモデルはあまり学習しません

16
00:00:52,735 --> 00:00:56,745
これを停止して見直しましょう

17
00:00:56,745 --> 00:00:58,220
ここでは

18
00:00:58,220 --> 00:01:03,495
x1とx2 の組み合わせに意味があります

19
00:01:03,495 --> 00:01:09,900
x1が負でx2が負なら青です

20
00:01:09,900 --> 00:01:14,790
x1が正で
x2が正なら青です

21
00:01:14,790 --> 00:01:18,795
x1とx2が異なる符号なら

22
00:01:18,795 --> 00:01:21,000
オレンジになります

23
00:01:21,000 --> 00:01:23,430
これで何を思い出しますか？

24
00:01:23,430 --> 00:01:26,790
x1とx2の間の特徴クロスです

25
00:01:26,790 --> 00:01:31,965
ではx1とx2の特徴クロスを
別の入力として追加しましょう

26
00:01:31,965 --> 00:01:35,965
これでトレーニングすると

27
00:01:35,965 --> 00:01:39,760
ほとんどすぐに良いモデルができて

28
00:01:39,760 --> 00:01:43,230
青と黄色を分割します

29
00:01:43,230 --> 00:01:45,870
青の背景はほぼ青になり

30
00:01:45,870 --> 00:01:48,975
黄色の背景はほぼ黄色になります

31
00:01:48,975 --> 00:01:53,790
もちろんノイズがあるので
誤分類がありますが

32
00:01:53,790 --> 00:01:58,005
ノイズの多いデータセットなので
想定どおりです

33
00:01:58,005 --> 00:02:00,345
ここで重要な点は

34
00:02:00,345 --> 00:02:04,260
人間の洞察力を取り入れ

35
00:02:04,260 --> 00:02:07,550
x1とx2の組み合わせによって

36
00:02:07,550 --> 00:02:11,715
このデータセットの分類能力が向上するので

37
00:02:11,715 --> 00:02:14,140
x1 x2を追加できます

38
00:02:14,140 --> 00:02:16,805
これは新しい入力ではなく

39
00:02:16,805 --> 00:02:22,590
x1とx2の元の入力に基づく
特徴エンジニアリングです

40
00:02:22,590 --> 00:02:27,510
こうして青と黄色をうまく分離できます

41
00:02:27,510 --> 00:02:31,800
次に別のケースを考えましょう

42
00:02:31,800 --> 00:02:37,005
今度は青い点が中央にあり

43
00:02:37,005 --> 00:02:41,055
黄色の点は端の方にあります

44
00:02:41,055 --> 00:02:45,660
再びx1とx2だけを使ってトレーニングすると

45
00:02:45,660 --> 00:02:47,590
背景画像はぼやけてしまいます

46
00:02:47,590 --> 00:02:51,560
このモデルでは充分に学習できないからです

47
00:02:51,560 --> 00:02:57,360
ですからどんな特徴エンジニアリングを行うか
考慮すべきでしょう

48
00:02:57,360 --> 00:02:58,870
これを停止します

49
00:02:58,870 --> 00:03:03,550
どんな特徴エンジニアリングを行えば
分割できるでしょうか？

50
00:03:03,550 --> 00:03:06,070
ここで直感的にわかることは

51
00:03:06,070 --> 00:03:10,845
x1とx2がどちらも小さければ青です

52
00:03:10,845 --> 00:03:13,200
x1とx2が大きければ

53
00:03:13,200 --> 00:03:14,740
黄色のようです

54
00:03:14,740 --> 00:03:18,800
x1とx2が両方とも
大きくない場合もあり

55
00:03:18,800 --> 00:03:20,080
ここを見ると

56
00:03:20,080 --> 00:03:23,940
x1はとても小さく
x2は大きいです

57
00:03:23,940 --> 00:03:26,610
次に別の考え方として

58
00:03:26,610 --> 00:03:30,660
これを画像の中心と考えると

59
00:03:30,660 --> 00:03:33,640
中心に近い点が青になり

60
00:03:33,640 --> 00:03:37,410
中心から離れた点が黄色になっています

61
00:03:37,410 --> 00:03:40,350
これで何を思い出しますか？

62
00:03:40,350 --> 00:03:43,080
点が近いか遠いかは距離です

63
00:03:43,080 --> 00:03:45,600
距離の公式は何でしたか？

64
00:03:45,600 --> 00:03:48,300
xの2乗とyの2乗の平方根です

65
00:03:48,300 --> 00:03:50,750
ここでは平方根は不要です

66
00:03:50,750 --> 00:03:55,140
ニューラルネットワークへの
入力特徴を使うので

67
00:03:55,140 --> 00:03:57,925
必要なのはxの2乗とyの2乗です

68
00:03:57,925 --> 00:04:02,345
そこでxの2乗とyの2乗の両方を
入力にして

69
00:04:02,345 --> 00:04:07,005
トレーニングするとほとんどすぐに

70
00:04:07,005 --> 00:04:14,940
青い点とオレンジの点が
うまく分離されます

71
00:04:14,940 --> 00:04:16,445
では停止して

72
00:04:16,445 --> 00:04:19,320
この両方を確認しましょう

73
00:04:19,320 --> 00:04:24,185
どちらの場合も
分割の境界は線形境界ですか？

74
00:04:24,185 --> 00:04:27,370
この場合は
はっきりしていますね

75
00:04:27,370 --> 00:04:29,895
線形の境界ではありません

76
00:04:29,895 --> 00:04:32,550
線形モデルを使っていますが

77
00:04:32,550 --> 00:04:36,510
隠れ層も
ニューラルネットワークもなく

78
00:04:36,525 --> 00:04:40,290
基本的に入力を線形に
組み合わせるだけで

79
00:04:40,290 --> 00:04:43,640
非線形の境界を得ることができます

80
00:04:43,640 --> 00:04:45,695
この点を覚えておいてください

81
00:04:45,695 --> 00:04:48,210
特徴クロスがあれば

82
00:04:48,210 --> 00:04:50,855
線形モデルを使っていても

83
00:04:50,855 --> 00:04:53,835
特徴クロスは非線形なので

84
00:04:53,835 --> 00:04:56,865
実際には非線形モデルになります

85
00:04:56,865 --> 00:05:00,000
特徴クロスが便利な1つの理由は

86
00:05:00,000 --> 00:05:05,625
非線形性のパワーを
この問題に活用できることです

87
00:05:05,625 --> 00:05:09,090
この問題にそれを活用しながらも

88
00:05:09,090 --> 00:05:12,850
非線形性の代償を払う必要はありません

89
00:05:12,850 --> 00:05:17,240
深すぎるモデルや
トレーニング上の多くの問題を

90
00:05:17,240 --> 00:05:19,275
心配しなくて済みます

91
00:05:19,275 --> 00:05:21,260
ここに線形モデルがあります

92
00:05:21,260 --> 00:05:23,310
線形モデルの良い点は

93
00:05:23,310 --> 00:05:26,565
領域面が凸状になっていることです

94
00:05:26,565 --> 00:05:29,225
つまり一意の最適解があり

95
00:05:29,225 --> 00:05:32,570
それを比較的簡単に見つけられます

96
00:05:32,570 --> 00:05:35,855
線形モデルのメリットだけでなく

97
00:05:35,855 --> 00:05:39,340
非線形性のパワーも兼ね備えていて

98
00:05:39,340 --> 00:05:43,005
これが特徴クロスの優れた点です

99
00:05:43,005 --> 00:05:46,680
もう1つのケースでも
非線形の境界で

100
00:05:46,680 --> 00:05:49,930
1本ではなく
2本の線がありますが

101
00:05:49,930 --> 00:05:52,650
見た目にややわかりにくいです

102
00:05:52,650 --> 00:05:54,385
こちらの場合は楕円で

103
00:05:54,385 --> 00:05:57,305
楕円は明らかに直線ではありません

104
00:05:57,305 --> 00:05:59,775
覚えていただきたい点は

105
00:05:59,775 --> 00:06:04,860
ニューラルネットワークの
パワーを使いたい場合でも

106
00:06:04,860 --> 00:06:10,455
特徴クロスをツールの1つとして
検討してください

107
00:06:10,455 --> 00:06:18,340
特徴クロスなら シンプルなモデルのままで
非線形性を利用できるからです