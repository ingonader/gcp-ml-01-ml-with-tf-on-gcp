特徴クロスは複数のカテゴリの
特徴を結合します 連続的な特徴がある場合は それを離散化した後で
特徴クロスを適用できます 入力空間のサイズに関して
これにどんな意味があるのか いくつかの例で見ていきましょう ある都市の交通量レベルを
予測したいとします 生の2つの入力つまり
1日の時刻と曜日があります 時刻と曜日を
ワンホットエンコーディングして モデルに入力すると
入力の数はいくつですか？ 24 + 7 = 31だと思いますか？ 時刻をワンホットエンコーディングすると
24個の入力ノードになります 「すべてゼロ」を有効な入力として扱えば
23個を取り除けますが 「すべてゼロ」は通常
欠落データ用に予約されるので 24個の入力ノードにします 同様に曜日を
ワンホットエンコーディングすると 7つの入力ノードになり 合計31個の入力ノードです でも午後5時の交通量は
毎日同じではありません 水曜日の午後5時は
週末の午後5時とまったく異なります モデルにこれを学習させる
簡単な方法があります もうご存知のとおり 特徴クロスと
2つの生の入力です 1日の時刻と曜日を連結すると モデルは日時の組み合わせを
すばやく学習できます すごいですね
ただし 入力の数はいくつになりますか？ 24 + 7ではなく 24 x 7です これが
可能なすべての組み合わせです 入力の数が 24 + 7 = 31個から
24 x 7 = 168個になりました 特徴クロスを行うと
入力の数が増えます データサイエンティストが心配する点は ワンホットエンコーディングの
カテゴリ変数によって モデルサイズが大きくなることです 1つのワンホットエンコーディングでさえ 従来のMLでは
多くの障害が発生するのに 特徴クロスを
どう処理するのか 心臓発作を起こしそうです TensorFlow内部では ワンホットエンコーディングと
特徴クロスに疎表現を使うので 問題ありません 入力データセットの特定の1行について X3の中で該当するノードは
いくつですか？ 1つだけです 理由がわかりますか？ ラベルごとに特定の時間に
テーブルが毎回調べられます これは 特定の曜日の
特定の時刻に相当します たとえば時刻入力の中で
午後3時を調べ 曜日入力の中で
水曜日を調べます これに特徴クロスを適用すると 1つの入力ノードになります 水曜日の午後3時に相当する入力ノードが
「1」になり X3の他のすべての入力ノードはゼロです つまり入力は167個のゼロと
ひとつの1で構成されます 特徴クロスを適用すると
入力はとても疎になることを 覚えておいてください TensorFlowにはこのための
簡単なツールがあります クイズの正解を確認しましょう まずaではありません データ範囲区分化（bin）によってモデルは 1つの特徴の中の線形関係を
学習できます しかし都市は2次元以上の
空間に存在するので 都市固有の関係を学習させるには 緯度と経度の掛け合わせ（クロス）が必要です 2番目のbはどうでしょう？ これも違います データ範囲を区分するのは良いことですが 都市は緯度と経度の論理積ですから 別々の特徴クロスが原因で
都市固有の価格の学習が妨げられます cはどうでしょう？ これが正解です 区分化した緯度と
区分化した経度を掛けると モデルは1人あたり部屋数について
都市固有の傾向を学習できます 区分化により 緯度の変化と経度の変化で
同じ結果が出なくなります 区分化の粒度に応じて
この特徴クロスは 都市固有、地区固有、
さらに住居区画固有の結果を学習できます 4番目は違います この例では 特徴の実際の値を
掛け合わせるのは不適切です 実際の値 たとえば
緯度とroomsPerPersonを掛けると 1つの特徴 たとえば
緯度の10パーセントの変化と別の特徴 たとえばroomsPerPersonの
10パーセントの変化が等しくなり 問題が大きすぎて
TensorFlowでも不可能です カテゴリ列または離散化した列だけを
掛け合わせることができます