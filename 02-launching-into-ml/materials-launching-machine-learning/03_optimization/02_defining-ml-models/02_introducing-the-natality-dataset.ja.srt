1
00:00:00,760 --> 00:00:03,120
赤ちゃんは尊い存在です

2
00:00:03,120 --> 00:00:06,640
生まれた後すぐに緊急処置が
必要になる赤ちゃんもいます

3
00:00:06,710 --> 00:00:11,150
しかし こうした処置ができる
専門の医師の数は多くありません

4
00:00:11,290 --> 00:00:14,650
処置を必要としている赤ちゃんのところに

5
00:00:14,650 --> 00:00:17,950
ピンポイントで医師を派遣できれば一番ですが

6
00:00:17,950 --> 00:00:20,531
現実はそうはいきません

7
00:00:21,368 --> 00:00:24,810
これはどのようなML課題になるでしょうか

8
00:00:24,820 --> 00:00:28,420
もし 生まれる前に処置が
必要なことがわかっていれば

9
00:00:28,420 --> 00:00:32,200
赤ちゃんの処置を行うため
医師を待機させることができます

10
00:00:32,290 --> 00:00:35,656
生まれる前に予測を立てる場合

11
00:00:35,656 --> 00:00:39,292
このモデルの特徴量となりうるのは
次のどれでしょうか

12
00:00:39,992 --> 00:00:44,995
母親の年齢、出生時間、赤ちゃんの体重

13
00:00:46,017 --> 00:00:49,348
同じく 生まれる前に予測を立てる場合

14
00:00:49,348 --> 00:00:53,110
このモデルのラベルとなりうるのは
次のどれでしょうか

15
00:00:53,750 --> 00:00:56,860
母親の年齢、出生時間、赤ちゃんの体重

16
00:00:57,807 --> 00:01:01,473
この質問への答えがわからなくても
かまいません

17
00:01:01,473 --> 00:01:04,240
このような質問の多くは
非常に専門的だからです

18
00:01:04,340 --> 00:01:06,800
しかし 直観的にわかる部分もあります

19
00:01:06,800 --> 00:01:12,020
予測の時点から見てどのタイミングで
情報が手に入るかという点です

20
00:01:12,020 --> 00:01:17,340
出生時刻は赤ちゃんが
生まれるまでわかりません

21
00:01:17,340 --> 00:01:19,640
ですから 予測には使用できません

22
00:01:19,980 --> 00:01:24,800
体重も赤ちゃんの健康状態を示す
重要な指標です

23
00:01:25,490 --> 00:01:31,090
母親の年齢は観測可能なので
そこから赤ちゃんの体重を予測できます

24
00:01:31,090 --> 00:01:34,030
これは ML課題に適したケースのようです

25
00:01:34,030 --> 00:01:39,764
理由は 赤ちゃんの健康を把握しておく
明らかな必要性があり

26
00:01:39,764 --> 00:01:43,347
それが事前に予測可能だと考えられるからです

27
00:01:43,347 --> 00:01:46,369
赤ちゃんの体重をラベルに選んだとすると

28
00:01:46,369 --> 00:01:49,090
どのようなML課題になるでしょうか

29
00:01:49,660 --> 00:01:53,310
ヒントは 赤ちゃんの体重は
連続数だということです

30
00:01:53,310 --> 00:01:56,250
ここでは 回帰問題として扱いましょう

31
00:01:56,250 --> 00:02:02,060
単純にするために 特徴量として母親の年齢を
ラベルとして赤ちゃんの体重のみを考慮します

32
00:02:02,240 --> 00:02:05,590
データにはアメリカ政府が収集した

33
00:02:05,590 --> 00:02:09,920
出生データセットと呼ばれる
データセットを使用します

34
00:02:09,920 --> 00:02:14,530
BigQueryで使用できる
一般公開データセットです

35
00:02:14,540 --> 00:02:18,060
多くの場合 データをモデル化する際の
最初のステップは

36
00:02:18,060 --> 00:02:22,309
ノイズではないシグナルが存在する
ことを検証するためのデータ確認です

37
00:02:22,310 --> 00:02:27,974
これは 赤ちゃんの体重を 母親の年齢の
関数として示した散布図です

38
00:02:27,974 --> 00:02:31,842
通常 散布図は大規模なデータセットの
全データではなく

39
00:02:31,842 --> 00:02:33,740
標本から作成します

40
00:02:33,740 --> 00:02:35,640
なぜでしょうか

41
00:02:35,650 --> 00:02:40,470
1つ目の理由は 膨大なデータを
プロットすることが計算上不可能だから

42
00:02:40,470 --> 00:02:45,990
2つ目は 膨大なデータを使用すると
散布図を読み取ることが難しいからです

43
00:02:45,990 --> 00:02:51,260
母親の年齢と赤ちゃんの体重の間には
わずかな正の関係があるようです

44
00:02:51,260 --> 00:02:54,660
先ほどと同じ2つの変数を使った
別のグラフをお見せします

45
00:02:54,660 --> 00:02:58,540
データを個々に表示する散布図とは違い

46
00:02:58,540 --> 00:03:02,770
このグラフは データの集まり
具体的には分位数を表しています

47
00:03:02,770 --> 00:03:06,145
このため グラフの作成前に
標本抽出を行う必要がなく

48
00:03:06,145 --> 00:03:09,804
代表的な標本でないものが
含まれるリスクはありません

49
00:03:09,804 --> 00:03:12,494
さらに 結果は再現可能で

50
00:03:12,494 --> 00:03:15,555
プロセスは並列処理できます

51
00:03:15,560 --> 00:03:21,310
このグラフは私が作ったもので
約22GBのデータをわずか数秒で処理します

52
00:03:21,310 --> 00:03:25,648
こうしたグラフの作成方法は 後ほど説明します

53
00:03:26,318 --> 00:03:30,368
データを見て何か関係性が読み取れますか

54
00:03:31,188 --> 00:03:34,533
散布図からはわからなかったことに
気付いたかもしれません

55
00:03:34,533 --> 00:03:38,398
赤ちゃんの体重は母親の年齢が
30歳前後のときに最大となります

56
00:03:38,398 --> 00:03:41,724
30歳より上および下になると
体重は徐々に減少していて

57
00:03:41,724 --> 00:03:43,990
非線形の関係を示唆しています

58
00:03:43,990 --> 00:03:47,320
これらは両方とも散布図では
わからなかったことであり

59
00:03:47,320 --> 00:03:50,980
この関係を線形モデルで
モデル化しようとしているので

60
00:03:50,980 --> 00:03:53,060
不穏な兆しでもあります

61
00:03:53,060 --> 00:03:57,710
実は 非線形関数を線形モデルで
モデル化しようすることは

62
00:03:57,710 --> 00:04:00,629
未学習と呼ばれる例です

63
00:04:00,629 --> 00:04:04,400
なぜもっと複雑なタイプのモデルではないのかと
思うかもしれませんが

64
00:04:04,400 --> 00:04:07,360
学習上の理由から使用しません

65
00:04:07,360 --> 00:04:11,870
後ほど モデルの選択と
過学習と呼ばれる概念について説明します

66
00:04:11,870 --> 00:04:16,461
簡単に言うと モデルの複雑性に比例して
高まるリスクがあるということです

67
00:04:16,461 --> 00:04:21,021
母親の年齢と赤ちゃんの体重の間には
わずかな正の関係があると思われます

68
00:04:21,024 --> 00:04:24,026
これを直線でモデル化します

69
00:04:24,026 --> 00:04:27,689
線形モデルを使用すると 先ほどの直観から

70
00:04:27,689 --> 00:04:31,920
正のy切片を持つ上向きの
直線になると考えられます

71
00:04:31,920 --> 00:04:35,300
データから見当をつけて
この直線を選択しましたが

72
00:04:35,300 --> 00:04:38,910
もっと上がよいのか 下がよいのか

73
00:04:38,910 --> 00:04:42,569
正しい位置に線が引けているのか

74
00:04:42,569 --> 00:04:46,961
他の直線より優れた線なのかは
どうすればわかるのでしょうか

75
00:04:49,041 --> 00:04:53,508
統計学を学んだことがある方は
覚えているかもしれませんが

76
00:04:53,508 --> 00:04:57,932
最小二乗回帰と呼ばれる直線の最適な
重みを求める方法があります

77
00:04:57,932 --> 00:05:03,786
また 線形モデルの最適な重みを
解析的に求める方法もあります

78
00:05:03,790 --> 00:05:08,110
問題なのは こうした解決策が 
一定の規模を超えると機能しない点です

79
00:05:08,110 --> 00:05:10,660
使用するデータセットが大規模になると

80
00:05:10,660 --> 00:05:15,780
問題を解析的に処理するのに必要な
演算が実行困難になります

81
00:05:15,790 --> 00:05:19,740
解析による解決ができない場合
どうすればよいのでしょうか

82
00:05:19,740 --> 00:05:22,725
勾配下降法を使います

83
00:05:23,792 --> 00:05:28,400
最適化をパラメータ領域の探索と
考えるところから始めましょう

84
00:05:28,400 --> 00:05:31,580
この単純な線形モデルには
2つのパラメータがあります

85
00:05:31,580 --> 00:05:34,360
重み項とバイアス項です

86
00:05:34,360 --> 00:05:39,770
これらは両方とも実数値なので
2つのパラメータの値のすべての組み合わせを

87
00:05:39,770 --> 00:05:43,299
2次元領域内の点と考えることができます

88
00:05:43,300 --> 00:05:46,080
ただし 求めるのは最適値です

89
00:05:46,080 --> 00:05:51,590
パラメータ領域のある点と別の点は
質的にどう違うのでしょうか

90
00:05:51,590 --> 00:05:54,890
まず 質問の仕方を少し変える必要があります

91
00:05:54,890 --> 00:05:59,710
多くの場合 データが存在する領域である
入力領域自体が無限であるため

92
00:05:59,710 --> 00:06:04,430
入力領域のすべてのポイントで
パラメータを評価することは不可能です

93
00:06:04,430 --> 00:06:08,880
このため 通常は手元にある
トレーニングデータを基に

94
00:06:08,880 --> 00:06:11,840
この計算結果を推測します

95
00:06:12,380 --> 00:06:16,380
そのためには あるデータポイントの予測の質

96
00:06:16,380 --> 00:06:19,900
つまりは その予測の誤差を

97
00:06:19,900 --> 00:06:24,110
一連の予測の質を示す数へと
汎化する必要があります

98
00:06:24,120 --> 00:06:27,080
そのための関数を損失関数と呼びます