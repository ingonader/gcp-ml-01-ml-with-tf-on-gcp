1
00:00:00,480 --> 00:00:02,530
前のセクションでは

2
00:00:02,530 --> 00:00:05,700
最適化をパラメータ領域の探索として位置付け

3
00:00:05,700 --> 00:00:10,170
ポイントを比較する方法である
損失関数について説明しました

4
00:00:10,180 --> 00:00:14,820
では 損失関数からどのように
探索ストラテジーを構築するのでしょうか

5
00:00:14,820 --> 00:00:17,610
勾配下降法を使います

6
00:00:17,620 --> 00:00:22,580
勾配降下法とは
パラメータ領域のすべての点について

7
00:00:22,580 --> 00:00:27,160
損失関数によって形成される損失曲面を
降下していくプロセスを指します

8
00:00:27,160 --> 00:00:30,930
実際の曲面はこのようなものです

9
00:00:30,930 --> 00:00:33,770
もちろんこれは情報が完全な場合

10
00:00:33,770 --> 00:00:37,120
つまり グラフを
すべて把握できている場合です

11
00:00:37,140 --> 00:00:39,795
実際には パラメータ領域内の

12
00:00:39,795 --> 00:00:43,835
損失関数で評価した点の
損失値しかわかりません

13
00:00:43,835 --> 00:00:48,320
この場合は 赤で囲った部分にある
2つの点のみです

14
00:00:48,700 --> 00:00:53,990
しかし どうにかして最小値を見つける方法を
決めなければなりません

15
00:00:54,880 --> 00:00:57,520
最小値を見つけるという問題は

16
00:00:57,520 --> 00:01:01,000
2つの異なる重要な問いに
分けることができます

17
00:01:01,000 --> 00:01:03,070
探索すべき方向は？

18
00:01:03,070 --> 00:01:05,130
ステップの大きさは？

19
00:01:05,269 --> 00:01:08,810
ここでは わかりやすくするため

20
00:01:08,810 --> 00:01:11,650
ステップサイズは固定とします

21
00:01:12,840 --> 00:01:16,070
すると 非常にシンプルな
アルゴリズムができます

22
00:01:16,080 --> 00:01:21,050
損失が微小な定数より大きいとき
探索方向を計算して

23
00:01:21,050 --> 00:01:23,734
モデルの各パラメータの値を

24
00:01:23,734 --> 00:01:29,091
古い値にステップサイズと
探索方向の積を足した値に設定し

25
00:01:29,091 --> 00:01:32,148
最後に 損失を再計算します

26
00:01:34,546 --> 00:01:39,160
損失曲面は 地形図や等高線と考えられます

27
00:01:39,160 --> 00:01:42,080
それぞれの線が特定の深さを表します

28
00:01:42,080 --> 00:01:47,070
線が密集している部分は
曲面の勾配がより急になっています

29
00:01:47,960 --> 00:01:52,170
アルゴリズムは ここに点で示した
ステップで進みます

30
00:01:52,170 --> 00:01:55,690
この場合 アルゴリズムは上端から始まり

31
00:01:55,690 --> 00:01:58,910
中央にある最小値まで降下しています

32
00:01:59,030 --> 00:02:04,199
アルゴリズムは一定のステップサイズで
最小値の方向に進んでいます

33
00:02:04,240 --> 00:02:06,190
探索方向はさておき

34
00:02:06,190 --> 00:02:10,050
ステップサイズが小さすぎると
学習に途方もない時間がかかります

35
00:02:10,050 --> 00:02:12,750
しかも 最小値が必ず見つかるとは限りません

36
00:02:12,750 --> 00:02:16,690
ここでは 最小値は1つであると
仮定して話を進めますが

37
00:02:16,700 --> 00:02:20,010
今後 最小値が複数存在する場合が出てきます

38
00:02:20,010 --> 00:02:23,430
その際の対処方法は 後ほど説明します

39
00:02:24,060 --> 00:02:26,330
ステップサイズが大きすぎると

40
00:02:26,330 --> 00:02:29,830
損失曲面の一方の端から
もう一方の端まで飛んでしまう

41
00:02:29,830 --> 00:02:34,580
または 現在の谷から損失曲面のまったく
別の部分に飛んでしまう可能性があります

42
00:02:34,580 --> 00:02:37,265
このため ステップサイズが大きすぎると

43
00:02:37,265 --> 00:02:40,520
プロセスは必ずしも収束しません

44
00:02:40,870 --> 00:02:45,060
ステップサイズが適切であれば
言うことはありません

45
00:02:45,060 --> 00:02:47,971
ただし 適切なステップサイズの値は

46
00:02:47,971 --> 00:02:50,650
問題ごとに異なります

47
00:02:50,650 --> 00:02:54,271
左側の曲線には適しているステップサイズも

48
00:02:54,271 --> 00:02:57,856
右側の曲線ではまったく機能していません

49
00:02:59,139 --> 00:03:02,610
あらゆるモデルに適した
ステップサイズはありません

50
00:03:02,610 --> 00:03:05,960
では ステップサイズは
どう決めるのでしょうか

51
00:03:06,610 --> 00:03:11,299
幸いにも 傾き つまり
曲線の変化の割合によって

52
00:03:11,299 --> 00:03:15,870
ステップの大きさと探索方向を
同時に十分把握できます

53
00:03:15,880 --> 00:03:18,300
下のサブプロットを見てください

54
00:03:18,300 --> 00:03:22,280
重み・損失曲線の各ポイントの
傾きの値を示しています

55
00:03:22,280 --> 00:03:26,045
通常 傾きが大きいほど 
傾きが小さいポイントよりも

56
00:03:26,045 --> 00:03:28,510
最小値からは遠くなります

57
00:03:28,510 --> 00:03:33,620
また 上のグラフで 傾きが負の場合
最小値は右側にあり

58
00:03:33,620 --> 00:03:37,420
傾きが正の場合は左側にあります

59
00:03:37,420 --> 00:03:39,260
別の例を挙げます

60
00:03:39,260 --> 00:03:43,330
ポイントBの傾きは正と負のどちらでしょうか

61
00:03:43,870 --> 00:03:48,779
傾きは正なので 最小値を見つけるには
左に進む必要があります

62
00:03:48,780 --> 00:03:53,710
また 傾きが急なので ステップサイズは
大きくする必要があります

63
00:03:54,130 --> 00:03:56,500
次に ポイントCです

64
00:03:56,500 --> 00:03:59,590
傾きは 正と負のどちらでしょうか

65
00:03:59,590 --> 00:04:02,140
傾き度合いはどうでしょうか

66
00:04:02,260 --> 00:04:06,840
ポイントCも傾きは正なので
左に進む必要があります

67
00:04:07,330 --> 00:04:09,610
傾きは はるかに緩やかなので

68
00:04:09,610 --> 00:04:12,160
最小値を越えてしまわないように

69
00:04:12,160 --> 00:04:14,450
ステップサイズを小さくします

70
00:04:14,450 --> 00:04:17,949
一定だったステップサイズと
探索方向の計算の呼び出しを

71
00:04:17,949 --> 00:04:21,649
computeDerivativeという
新たな関数の呼び出しに置き換え

72
00:04:21,649 --> 00:04:24,470
モデルのパラメータを更新するforループは

73
00:04:24,470 --> 00:04:26,380
各パラメータを設定する際

74
00:04:26,380 --> 00:04:30,045
古い値からそのパラメータの
損失についての偏微分係数を引いた値に

75
00:04:30,045 --> 00:04:32,500
設定するよう変更しました

76
00:04:32,500 --> 00:04:35,350
正しい方向に 適切なステップサイズで

77
00:04:35,350 --> 00:04:38,280
探索を進める方法がわかりましたが

78
00:04:38,280 --> 00:04:40,510
何か問題があるでしょうか

79
00:04:40,510 --> 00:04:43,939
実地パフォーマンスに問題があります

80
00:04:43,940 --> 00:04:48,030
ML研究者が取り組んできた問題

81
00:04:48,030 --> 00:04:52,900
つまり このプロシージャを
適用した損失曲面に関して

82
00:04:52,900 --> 00:04:55,760
多くの場合 基本のアルゴリズムは
時間がかかりすぎる

83
00:04:55,760 --> 00:04:59,510
準最適な最小値しか見つからない
終了しないのいずれかです

84
00:04:59,510 --> 00:05:02,880
しかし アルゴリズムが
機能しないということではなく

85
00:05:02,880 --> 00:05:07,270
単純に適した種類の問題が
少ないということです