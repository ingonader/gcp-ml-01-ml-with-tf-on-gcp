1
00:00:00,270 --> 00:00:02,820
Como você viu,
dividir conjuntos de dados permite

2
00:00:02,820 --> 00:00:06,245
testar a modelagem
no conjunto de dados simulados de uso real

3
00:00:06,245 --> 00:00:09,015
ao usar um subconjunto
de dados de treinamento.

4
00:00:09,325 --> 00:00:12,720
Mas como saber onde dividir
o conjunto de dados original?

5
00:00:12,720 --> 00:00:15,540
E se o conjunto de dados for enorme?

6
00:00:15,540 --> 00:00:18,605
É necessário treinar e
testar em cada ponto de dados?

7
00:00:19,075 --> 00:00:20,605
No exemplo desta lição,

8
00:00:20,605 --> 00:00:24,245
ensinarei você a
dividir os dados de maneira repetível

9
00:00:24,245 --> 00:00:28,405
usando o Google Big Query
e a evitar as dificuldades mais comuns.

10
00:00:28,405 --> 00:00:31,626
Você colocará isso em prática
no próximo laboratório.

11
00:00:32,680 --> 00:00:33,781
Vamos lá!

12
00:00:35,090 --> 00:00:37,455
Antes de dividirmos os conjuntos de dados,

13
00:00:37,455 --> 00:00:39,425
precisamos arrumar um.

14
00:00:39,545 --> 00:00:41,230
Neste exemplo, usaremos

15
00:00:41,230 --> 00:00:46,260
os dados da agência de estatísticas de 
transportes dos EUA sobre linhas aéreas.

16
00:00:46,505 --> 00:00:49,660
O Google disponibilizou
esses dados aos usuários

17
00:00:49,660 --> 00:00:53,435
no Big Query, no conjunto
airlineontimedata.flights.

18
00:00:53,435 --> 00:00:56,930
Esse conjunto de dados
rastreia atrasos em chegadas e partidas

19
00:00:56,930 --> 00:01:00,511
de até 70 milhões de voos.

20
00:01:01,025 --> 00:01:03,935
Vamos ver como separar
uma amostra para treinamento,

21
00:01:03,935 --> 00:01:07,010
validação e testagem dos dados do conjunto

22
00:01:07,010 --> 00:01:09,435
de maneira repetível e uniforme.

23
00:01:10,148 --> 00:01:12,465
O SQL, 
a linguagem de consulta estruturada,

24
00:01:12,465 --> 00:01:14,940
e o Big Query,
por ser onde se executa o SQL,

25
00:01:14,940 --> 00:01:16,760
têm a função RAND,

26
00:01:16,769 --> 00:01:19,534
que gera um valor entre zero e um.

27
00:01:19,750 --> 00:01:24,590
Você pode receber 80% dos dados
do conjunto aplicando a cláusula WHERE,

28
00:01:24,590 --> 00:01:25,865
como mostramos aqui.

29
00:01:26,085 --> 00:01:28,745
Repare que há alguns problemas.

30
00:01:28,775 --> 00:01:30,710
Pense se este processo será

31
00:01:30,710 --> 00:01:32,590
repetível se algum colega quiser

32
00:01:32,590 --> 00:01:36,750
refazer seu experimento com os mesmos 
80% de dados de treinamento que você usou.

33
00:01:36,750 --> 00:01:39,115
Pense que 
o conjunto abrange 70 milhões de voos.

34
00:01:39,115 --> 00:01:41,750
Seu colega receberia
os mesmos 56 milhões de voos

35
00:01:41,750 --> 00:01:45,070
ou seriam voos diferentes
do mesmo conjunto de dados?

36
00:01:45,450 --> 00:01:48,660
Bem, precisamos de uma forma
mais precisa de saber que dados

37
00:01:48,660 --> 00:01:52,635
pertencem a que intervalo:
treinamento, validação ou testagem.

38
00:01:52,635 --> 00:01:56,960
Isso permitirá repetir os experimentos

39
00:01:56,960 --> 00:01:59,570
usando os mesmos dados para cada intervalo.

40
00:01:59,570 --> 00:02:01,450
Como você talvez tenha percebido,

41
00:02:01,450 --> 00:02:03,670
uma função random simples escolhe

42
00:02:03,670 --> 00:02:06,935
um novo conjunto de cinco linhas aleatórias

43
00:02:06,935 --> 00:02:08,565
a cada consulta executada.

44
00:02:08,825 --> 00:02:10,580
Desse modo, é muito difícil,

45
00:02:10,580 --> 00:02:12,515
quase impossível, identificar e dividir

46
00:02:12,515 --> 00:02:16,030
os 20% de dados restantes para
os intervalos de validação e testagem.

47
00:02:16,180 --> 00:02:18,465
O conjunto de dados
também pode ser reordenado,

48
00:02:18,465 --> 00:02:20,260
o que cria
um viés na amostra.

49
00:02:20,260 --> 00:02:22,690
Incluir uma cláusula ORDER BY vai gerar

50
00:02:22,690 --> 00:02:26,115
novos problemas em ações como aplicar
gradiente descendente em minilote.

51
00:02:27,705 --> 00:02:29,230
Para aprendizado de máquina,

52
00:02:29,230 --> 00:02:33,285
você precisa poder
criar amostras de dados repetíveis.

53
00:02:33,625 --> 00:02:36,590
Para fazer isso, 
você pode usar os últimos dígitos

54
00:02:36,590 --> 00:02:40,905
da função hash no campo usado 
para dividir ou intervalar seus dados.

55
00:02:41,225 --> 00:02:43,380
A função fica
disponível publicamente

56
00:02:43,380 --> 00:02:45,890
como FARM_FINGERPRINT no BigQuery.

57
00:02:45,990 --> 00:02:49,735
Essa função pega um valor, 
como 10/12/2018,

58
00:02:49,735 --> 00:02:52,410
e transforma-o em 
uma longa string de dígitos.

59
00:02:52,470 --> 00:02:54,370
Este valor de hash será idêntico

60
00:02:54,370 --> 00:02:57,415
para todos os valores
10/12/2018 no conjunto.

61
00:02:57,795 --> 00:03:01,375
Se você está criando um algoritmo
de ML para prever atrasos na chegada,

62
00:03:01,675 --> 00:03:03,950
pode ser necessário
dividir os dados por data

63
00:03:03,950 --> 00:03:08,985
e criar um conjunto de dados de treinamento
com aproximadamente 80% dos dias.

64
00:03:09,325 --> 00:03:10,775
Eles serão repetíveis

65
00:03:10,775 --> 00:03:13,560
porque a função FARM_FINGERPRINT retornará

66
00:03:13,560 --> 00:03:17,380
o mesmo valor toda vez
que uma data for especificada.

67
00:03:17,380 --> 00:03:20,300
Você pode ter certeza
de que receberá exata

68
00:03:20,300 --> 00:03:23,315
ou aproximadamente
os mesmos 80% todas as vezes.

69
00:03:23,315 --> 00:03:25,810
Se você dividir os dados
por aeroporto de chegada

70
00:03:25,810 --> 00:03:28,400
e definir 80% de aeroportos
no conjunto de treinamento

71
00:03:28,400 --> 00:03:31,335
enquanto o resto é testado e validado,

72
00:03:31,335 --> 00:03:34,465
você precisaria usar
a função hash no aeroporto de chegada.

73
00:03:34,565 --> 00:03:36,410
Considerando-se esta consulta,

74
00:03:36,410 --> 00:03:39,665
como você separaria
uma nova amostra de 10% para avaliação?

75
00:03:40,105 --> 00:03:44,160
Você teria que mudar o
< 8 para = 8 para testagem de dados

76
00:03:44,160 --> 00:03:49,415
ou = 8 para = 9 e receber uma nova
amostra de 10% para avaliação ou testagem.

77
00:03:49,415 --> 00:03:51,290
Desta maneira, dividimos intervalos.

78
00:03:52,300 --> 00:03:55,680
Se quisermos prever atrasos
com base em companhias aéreas,

79
00:03:55,680 --> 00:03:58,430
horário, clima
e características do aeroporto,

80
00:03:58,430 --> 00:04:00,280
como o número de pistas que ele tem.

81
00:04:00,280 --> 00:04:02,395
Em que campos
vamos dividir o conjunto?

82
00:04:02,395 --> 00:04:05,055
Dia? Aeroporto? Nome da companhia?

83
00:04:05,055 --> 00:04:07,280
É possível dividir os seus dados

84
00:04:07,280 --> 00:04:10,565
nestes conjuntos válidos,
mas saiba que isso pode ser estressante.

85
00:04:10,745 --> 00:04:13,620
Por exemplo, se você quer
dividir por data para prever

86
00:04:13,620 --> 00:04:17,050
atrasos de chegada, mas seu conjunto
só tem informações sobre dois dias,

87
00:04:17,050 --> 00:04:19,505
você não terá
uma divisão mais granular que 50%.

88
00:04:19,505 --> 00:04:22,585
Lembre-se de que hash é 
uma função que retorna apenas um valor.

89
00:04:22,585 --> 00:04:25,155
Você não terá uma precisão
de 80% com apenas dois dias.

90
00:04:25,155 --> 00:04:28,010
Vamos analisar cada uma das opções.

91
00:04:28,350 --> 00:04:32,590
Podemos intervalar ou gerar
hash e dividir por data?

92
00:04:33,100 --> 00:04:35,650
OK, pode ser.
Mas, lembre-se de que você não poderá

93
00:04:35,650 --> 00:04:38,250
prever com base em fatores como feriados,

94
00:04:38,250 --> 00:04:39,870
como Natal e Ano Novo.

95
00:04:39,870 --> 00:04:43,630
Ou seja, sua previsão não pode ser
motivada por fatores que dependem da data,

96
00:04:43,630 --> 00:04:46,235
porque a forma como
você intervalou não permitirá.

97
00:04:46,855 --> 00:04:50,085
OK. E se gerarmos hash e
dividirmos pelo nome dos aeroportos?

98
00:04:50,085 --> 00:04:52,670
Tudo bem, desde que
seja bem distribuído e tenha ruído.

99
00:04:52,670 --> 00:04:56,530
Você não poderá mais fazer
previsões específicas para o aeroporto.

100
00:04:56,530 --> 00:04:59,590
Por exemplo, voos saindo
do JFK às 17h sempre se atrasam.

101
00:04:59,590 --> 00:05:03,060
Você não poderá usar JFK porque
a divisão foi feita com base no aeroporto.

102
00:05:03,060 --> 00:05:05,450
E se fizer o mesmo
processo com base na companhia?

103
00:05:06,040 --> 00:05:10,245
Se houver somente 11 companhias,
e você quiser dividir os dados,

104
00:05:10,245 --> 00:05:14,410
esse número não será suficiente
para fazer uma divisão mais refinada.

105
00:05:14,410 --> 00:05:16,240
Por isso, em vez de 80%,

106
00:05:16,240 --> 00:05:19,575
você terá uma precisão de 60%,
o que pode não ser suficiente para você.

107
00:05:20,995 --> 00:05:22,760
Para começar o desenvolvimento de ML,

108
00:05:22,760 --> 00:05:26,630
é recomendável desenvolver o código
do TensorFlow em um subconjunto pequeno.

109
00:05:26,630 --> 00:05:30,535
Depois, escalonar na nuvem
para a produtização.

110
00:05:30,605 --> 00:05:33,300
Se você estiver
desenvolvendo um aplicativo de ML,

111
00:05:33,300 --> 00:05:36,680
a cada mudança você precisará
executar novamente o aplicativo.

112
00:05:36,680 --> 00:05:38,460
Se você usar o conjunto inteiro,

113
00:05:38,460 --> 00:05:40,510
isso poderá demorar muito tempo.

114
00:05:40,510 --> 00:05:44,155
São petabytes de dados, seria
impossível desenvolver softwares assim.

115
00:05:44,575 --> 00:05:48,050
O ideal é ter um conjunto
de dados pequeno para executar o código,

116
00:05:48,050 --> 00:05:50,415
depurar e executar novamente com rapidez.

117
00:05:50,415 --> 00:05:52,625
Assim que o aplicativo estiver funcionando,

118
00:05:52,625 --> 00:05:55,970
você poderá executar o código
no conjunto inteiro quantas vezes quiser.

119
00:05:55,970 --> 00:05:57,590
É como desenvolver um protótipo.

120
00:05:57,890 --> 00:06:00,470
Agora, vamos aprender
a separar um subconjunto uniforme

121
00:06:00,470 --> 00:06:03,780
de dados sobre companhias aéreas.

122
00:06:03,780 --> 00:06:04,940
Criamos os intervalos,

123
00:06:04,940 --> 00:06:06,570
mas queremos menos dados.

124
00:06:07,410 --> 00:06:11,110
Os dados de voos têm 70 milhões de linhas.

125
00:06:11,110 --> 00:06:13,265
Você precisa de um conjunto menor,

126
00:06:13,265 --> 00:06:16,310
com um milhão de voos,
e precisa que sejam repetíveis.

127
00:06:16,310 --> 00:06:21,350
Como escolher uma das 70 linhas de dados
e depois 80% dos dados para o treinamento?

128
00:06:21,770 --> 00:06:26,515
Você não pode escolher um entre os
70, e depois um entre os 10 resultantes.

129
00:06:26,515 --> 00:06:27,940
Você sabe o porquê?

130
00:06:28,510 --> 00:06:31,720
Se você está
lidando com números divisíveis por 70,

131
00:06:31,720 --> 00:06:34,170
claro que eles serão divisíveis por 10.

132
00:06:34,400 --> 00:06:37,810
Esta segunda operação modular
é inútil.

133
00:06:38,540 --> 00:06:41,800
Agora, vamos fazer uma breve
demonstração e ver o que isso significa.