1
00:00:00,000 --> 00:00:03,255
では繰り返し可能な分割について
始めましょう

2
00:00:03,255 --> 00:00:05,980
このラボをまだご覧になっておらず

3
00:00:05,980 --> 00:00:08,770
自分で試していない場合は
ぜひ試してみてください

4
00:00:08,770 --> 00:00:11,685
その後でこのソリューションの
ウォークスルー動画をご覧ください

5
00:00:11,685 --> 00:00:13,170
では始めましょう

6
00:00:13,170 --> 00:00:14,975
最終的に行いたいのは

7
00:00:14,975 --> 00:00:20,245
出発が遅れた飛行機の
到着時刻の遅れを予想することです

8
00:00:20,245 --> 00:00:22,710
それから空港と遅れの関係です

9
00:00:22,710 --> 00:00:25,795
たとえば到着空港と出発空港などです

10
00:00:25,795 --> 00:00:27,940
ニューヨークを出発するフライトが

11
00:00:27,940 --> 00:00:30,490
30分遅れてロサンゼルスに向かっている場合

12
00:00:30,490 --> 00:00:32,595
到着も同じように遅れるでしょうか？

13
00:00:32,595 --> 00:00:35,320
またそのような関係を予測したいと思います

14
00:00:35,320 --> 00:00:38,510
この関係や関係のモデルにたどり着くために

15
00:00:38,510 --> 00:00:39,990
ご覧のような数式を使います

16
00:00:39,990 --> 00:00:42,005
Cloud Datalabのノートブックです

17
00:00:42,005 --> 00:00:43,420
到着の遅延は

18
00:00:43,420 --> 00:00:47,550
出発の遅延のα倍になります
αはパラメータです

19
00:00:47,550 --> 00:00:51,205
αを推定するために
この数式を使います

20
00:00:51,205 --> 00:00:53,060
ここでの目的は

21
00:00:53,060 --> 00:00:56,170
出発の遅延の情報を入力して

22
00:00:56,170 --> 00:01:00,170
到着が遅延するかどうかを予測することです

23
00:01:00,170 --> 00:01:01,990
ただし再モデル化の前に

24
00:01:01,990 --> 00:01:06,425
テスト用と評価用の環境を構築します

25
00:01:06,425 --> 00:01:08,555
そのために データセットが非常に大きいので

26
00:01:08,555 --> 00:01:10,080
Google BigQueryを使います

27
00:01:10,080 --> 00:01:12,820
Cloud Datalabから呼び出します

28
00:01:12,820 --> 00:01:18,045
次に到着空港と出発空港のペアを
作成します

29
00:01:18,045 --> 00:01:23,740
これで 特定の空港や
特定の便に強い相関関係があるかや

30
00:01:23,740 --> 00:01:31,390
予定時刻より遅れて出発した場合に
到着も遅れるかなどを確認できます

31
00:01:31,390 --> 00:01:33,620
このノートブックでは

32
00:01:33,620 --> 00:01:35,855
デンバーとロサンゼルスだけを見ていきます

33
00:01:35,855 --> 00:01:37,020
これらを念頭に

34
00:01:37,020 --> 00:01:41,570
このラボで何を行おうとしているかを
理解してください

35
00:01:41,570 --> 00:01:45,630
繰り返し可能なデータセットのサンプルを
BigQuery内で作成します

36
00:01:45,630 --> 00:01:49,085
では最初にやってはいけないことを
確認しましょう

37
00:01:49,085 --> 00:01:53,785
こうしたコードや単純なランダムのサンプルを
同僚のノートブックで見かけたら

38
00:01:53,785 --> 00:01:55,740
こんなふうに指摘できます

39
00:01:55,740 --> 00:02:00,270
「このコードを実行しても
講義と同じ結果にはならないかもしれないよ」

40
00:02:00,270 --> 00:02:03,505
では最初は単純なランダム分割です

41
00:02:03,505 --> 00:02:06,815
ではこのコードを実行しましょう

42
00:02:06,815 --> 00:02:09,210
私はすでに実行したのですが

43
00:02:09,210 --> 00:02:12,280
このαに強い相関があることに気付きました

44
00:02:12,280 --> 00:02:16,210
デンバーとロサンゼルスの間が0.97です

45
00:02:16,210 --> 00:02:19,975
このセルまでを実行します

46
00:02:19,975 --> 00:02:24,810
この係数を取得しましょう

47
00:02:24,810 --> 00:02:27,885
最後の3桁は784です

48
00:02:27,885 --> 00:02:30,210
そしてこれを繰り返せるように

49
00:02:30,210 --> 00:02:31,960
まったく同じことをしたら

50
00:02:31,960 --> 00:02:34,400
どうなると思いますか？

51
00:02:34,400 --> 00:02:39,285
784になっていますか？
いえ919ですね

52
00:02:39,285 --> 00:02:41,910
何も変えていないし

53
00:02:41,910 --> 00:02:45,730
トレーニングもまだ行っていません

54
00:02:45,730 --> 00:02:48,595
これは同じデータになるはずです

55
00:02:48,595 --> 00:02:51,000
コードの7行目を見てください

56
00:02:51,000 --> 00:02:54,605
このランダム関数を
分割フィールドとして選択しています

57
00:02:54,605 --> 00:02:57,780
講義でも説明しましたが
これを実行するたびに

58
00:02:57,780 --> 00:03:01,230
ランダム関数が0から1の間の
別の数字を適用します

59
00:03:01,230 --> 00:03:05,090
その数字で分割するので
繰り返し可能になりません

60
00:03:05,090 --> 00:03:07,235
ではちょっと改善しましょう

61
00:03:10,955 --> 00:03:15,400
BigQuery内で行が実行されるたびに
このランダム関数が実行されます

62
00:03:15,400 --> 00:03:20,470
これをもう少し明確にしましょう

63
00:03:20,470 --> 00:03:23,030
これを損失の指標に使う場合

64
00:03:23,030 --> 00:03:27,400
到着の遅延と出発の遅延の間の
平均二乗平方根誤差です

65
00:03:27,400 --> 00:03:31,940
これをトレーニング用と評価用の
別のデータセットに分割します

66
00:03:31,940 --> 00:03:36,220
これがすべてのレコードに対して
即座に実行されました

67
00:03:36,220 --> 00:03:39,795
この0.8未満のランダム関数を
このすべてに対して実行しました

68
00:03:39,795 --> 00:03:42,760
同じRMSEが得られるか確認しましょう

69
00:03:42,770 --> 00:03:44,730
このコードセルを実行します

70
00:03:49,850 --> 00:03:56,180
RMSEはトレーニングで13.098
評価で13.027です

71
00:03:56,180 --> 00:03:59,130
比較的一貫性がありますね

72
00:03:59,130 --> 00:04:02,390
では同じことをやって
再現できるか見てみましょう

73
00:04:02,390 --> 00:04:06,560
トレーニングでは13.098になる必要があります

74
00:04:08,530 --> 00:04:10,710
ご覧のように トレーニングでは

75
00:04:10,710 --> 00:04:17,589
13.089になりました　さっきは98でしたね
それと13.063です

76
00:04:17,589 --> 00:04:19,410
この裏で起こっていることは

77
00:04:19,410 --> 00:04:21,730
まったく同じコードを実行しても

78
00:04:21,730 --> 00:04:24,050
RMSEは違う結果になります

79
00:04:24,050 --> 00:04:27,725
多くの人がモニターに向かって
叫んでいるかもしれませんが

80
00:04:27,725 --> 00:04:29,760
犯人はこのランダム関数です

81
00:04:29,760 --> 00:04:33,585
トレーニングと評価を
ランダムに分割してもうまくいきません

82
00:04:33,585 --> 00:04:35,555
そこでこう考えるかもしれません

83
00:04:35,555 --> 00:04:38,085
「さて どうしたらいいんだろう？

84
00:04:38,085 --> 00:04:42,940
トレーニングと評価の全データを
ランダム関数を1回使って設定して

85
00:04:42,940 --> 00:04:45,820
80%と20%に分割した

86
00:04:45,820 --> 00:04:48,645
なのに変化し続けるのはなぜだろう？

87
00:04:48,645 --> 00:04:53,325
毎回ランダム関数が実行される以外の方法は
ないのだろうか？」

88
00:04:53,325 --> 00:04:56,710
ここで考え方を完全に変える必要があります

89
00:04:56,710 --> 00:04:58,860
別の例を見てみましょう

90
00:04:58,860 --> 00:05:01,240
ランダム関数によるトレーニングがあります

91
00:05:01,240 --> 00:05:02,910
これを最初に実行します

92
00:05:02,910 --> 00:05:04,835
小さなサブクエリです

93
00:05:04,835 --> 00:05:11,970
トレーニング用と評価用に分割して
サブデータセットとして作成します

94
00:05:11,970 --> 00:05:15,440
次にこれらのクエリを実行しますが
これを見てください

95
00:05:15,440 --> 00:05:21,150
また同じ問題が起こっています
RMSEが13.037です

96
00:05:21,150 --> 00:05:23,995
あなたの実行結果とは違うでしょう

97
00:05:23,995 --> 00:05:26,490
評価用のRMSEです

98
00:05:27,810 --> 00:05:31,700
ここをクリックして
このセルまでを実行します

99
00:05:31,700 --> 00:05:34,645
このセルまで全部が再実行されます

100
00:05:35,915 --> 00:05:37,490
これが実行されたら

101
00:05:37,490 --> 00:05:41,570
13.037になるのを期待しています

102
00:05:45,010 --> 00:05:46,385
実行中です

103
00:05:46,965 --> 00:05:49,410
13.087になりました

104
00:05:49,410 --> 00:05:52,085
αが違います さっきは確か0.977でした

105
00:05:52,085 --> 00:05:53,175
ご覧のように

106
00:05:53,175 --> 00:05:57,335
BigQueryのコード内のどこかで
ランダム関数を使って実行すると

107
00:05:57,335 --> 00:06:00,920
データが自動的に変わります

108
00:06:00,920 --> 00:06:03,785
ランダム関数を使用しない方法はないのでしょうか？

109
00:06:03,785 --> 00:06:05,080
ランダム関数の代わりに

110
00:06:05,080 --> 00:06:08,600
少し前にデモを行ったハッシュ関数を使います

111
00:06:08,600 --> 00:06:10,600
それをこれから紹介します

112
00:06:10,600 --> 00:06:11,335
ここでは

113
00:06:11,335 --> 00:06:16,555
ランダム関数の0.8未満を使う代わりに
WHERE節の内部で分割を実行します

114
00:06:16,555 --> 00:06:18,530
今から使うのは

115
00:06:18,530 --> 00:06:20,320
日付のハッシュです

116
00:06:20,320 --> 00:06:21,980
日付は変わりません

117
00:06:21,980 --> 00:06:25,610
日付はトレーニング用データセット内の日付です

118
00:06:25,610 --> 00:06:27,090
この余りを見て

119
00:06:27,090 --> 00:06:31,100
特定のカテゴリに入るか確認します

120
00:06:31,100 --> 00:06:33,700
今回は8未満をすべて取得して

121
00:06:33,700 --> 00:06:36,310
トレーニングバケットに入れます

122
00:06:36,310 --> 00:06:38,630
これは80%の分割です

123
00:06:38,630 --> 00:06:41,120
このデータをトレーニング用に使います

124
00:06:41,120 --> 00:06:43,400
最初が 0.975ですね

125
00:06:43,400 --> 00:06:46,705
最後を確認しましょう 403です

126
00:06:46,705 --> 00:06:48,815
このまま実行して

127
00:06:48,815 --> 00:06:51,255
どうなるか見てみましょう

128
00:06:51,255 --> 00:06:54,120
ここでようやく
もう一度403を取得しました

129
00:06:54,120 --> 00:06:56,115
これが繰り返し可能な方法です

130
00:06:56,115 --> 00:06:58,090
直感的につじつまがあいますね

131
00:06:58,090 --> 00:07:00,475
このコードを実行している間に

132
00:07:00,475 --> 00:07:02,885
内部で変わる関数はありません

133
00:07:03,165 --> 00:07:04,840
今度はこれを使用して

134
00:07:04,840 --> 00:07:08,335
もう少しSQLを追加し
平均二乗平方根誤差を使います

135
00:07:10,145 --> 00:07:12,890
平均二乗平方根誤差をSQLの代わりに使い

136
00:07:12,890 --> 00:07:16,770
先ほど見たこの関数の平均を取ります

137
00:07:16,770 --> 00:07:19,390
そして平方根を取ると

138
00:07:19,390 --> 00:07:25,525
トレーニング用データセットが
13.16072になりました

139
00:07:25,525 --> 00:07:34,745
13.16072はこれを実行するたびに得られる
毎回同じ結果です

140
00:07:34,745 --> 00:07:37,550
ここから何を学べるでしょうか

141
00:07:37,550 --> 00:07:41,750
繰り返し可能なデータサンプルを作成するときは

142
00:07:41,750 --> 00:07:46,725
単純なランダムサンプルではなく
必ずハッシュ関数を使うことです

143
00:07:46,725 --> 00:07:50,250
最初に見た方法は
多少洗練されてはいますが

144
00:07:50,250 --> 00:07:55,700
トレーニング用と評価用のデータを
事前分割するのと同じ危険を伴います

145
00:07:55,700 --> 00:08:00,110
データを分割してサブセットを作成するときに
こんな疑問を持つかもしれません

146
00:08:00,110 --> 00:08:04,110
「この方法で1回実行して その結果を
トレーニング用と評価用のテーブルに保存して

147
00:08:04,110 --> 00:08:08,080
すぐに使用すればいいんじゃないか？」

148
00:08:08,080 --> 00:08:13,300
確かに 1回だけの実行ならいいでしょう
80-20にも分割できています

149
00:08:13,300 --> 00:08:15,730
でも 将来データが増えたらどうしますか？

150
00:08:15,730 --> 00:08:19,350
他の人が元のデータセットで
分析を繰り返したいときは？

151
00:08:19,350 --> 00:08:23,350
1回ハードコードでデータを
80-20に分割できたからと言って

152
00:08:23,350 --> 00:08:26,160
同じことを繰り返せるわけではありません

153
00:08:26,160 --> 00:08:28,400
データセットが拡大縮小する場合や

154
00:08:28,400 --> 00:08:31,535
80-20とは別の比率で分割したい場合は
なおさらです

155
00:08:31,535 --> 00:08:33,850
ですから より柔軟に
繰り返せるように

156
00:08:33,850 --> 00:08:36,500
データをバケット化し
ハッシュするためのフィールドを使います

157
00:08:36,500 --> 00:08:37,830
ここで見ましたね

158
00:08:37,830 --> 00:08:43,510
これが 機械学習モデルを
実行するのに必要な基礎となります

159
00:08:43,510 --> 00:08:45,770
練習して慣れておいてください

160
00:08:45,770 --> 00:08:50,095
データバケットを作成することで
モデルのトレーニング、評価、

161
00:08:50,095 --> 00:08:55,840
最後に本番で使用できるかのテストを
テストデータセットを使って行えるようにします

162
00:08:55,840 --> 00:08:57,070
以上です

163
00:08:57,070 --> 00:09:02,675
最後に もう少し資料を説明してから
まとめのラボに取り組みましょう

164
00:09:02,675 --> 00:09:06,470
タクシー料金を予測します
またお会いしましょう