1
00:00:00,000 --> 00:00:02,120
Estamos agora no laboratório dois,

2
00:00:02,120 --> 00:00:07,345
em que mostraremos como usar o Datalab
para executar uma consulta do BigQuery.

3
00:00:07,345 --> 00:00:11,140
Aqui analisaremos um conjunto de dados
relativamente grande.

4
00:00:11,140 --> 00:00:14,230
70 mil linhas, 8 GB de dados,

5
00:00:14,230 --> 00:00:17,730
e vamos analisá-lo usando o BigQuery e
o Cloud Datalab.

6
00:00:17,730 --> 00:00:20,940
A primeira coisa a fazer é iniciar o
Cloud Datalab,

7
00:00:20,940 --> 00:00:23,350
e podemos fazer isso de dentro
do Cloud Shell.

8
00:00:23,350 --> 00:00:26,370
Então, a primeira coisa a fazer é
descobrir

9
00:00:26,370 --> 00:00:28,710
quais são as nossas zonas de computação.

10
00:00:28,710 --> 00:00:32,325
Assim podemos executar o Datalab em
uma delas.

11
00:00:32,325 --> 00:00:34,900
Sei que US Central é uma zona de
computação,

12
00:00:34,900 --> 00:00:36,370
então vou pular essa parte.

13
00:00:36,370 --> 00:00:39,205
Então sigo em frente e crio o Datalab.

14
00:00:39,205 --> 00:00:43,750
O Datalab cria o nome da VM
e alguma zona.

15
00:00:43,750 --> 00:00:45,510
Vamos fazer isso.

16
00:00:45,510 --> 00:00:48,455
Vamos voltar ao Cloud Shell.

17
00:00:48,455 --> 00:00:50,580
Estou no Cloud Shell,

18
00:00:50,580 --> 00:00:53,765
vou inserir "datalab create mydatalabvm".

19
00:00:53,765 --> 00:01:00,295
E a zona será "us-central1-b".

20
00:01:00,295 --> 00:01:06,795
Esse comando leva cerca de cinco minutos
para ser concluído.

21
00:01:06,795 --> 00:01:08,810
Vamos avançar o vídeo até

22
00:01:08,810 --> 00:01:12,300
o ponto em que você verá esta mensagem que

23
00:01:12,300 --> 00:01:16,450
diz que já podemos nos conectar ao
localhost 8081,

24
00:01:16,450 --> 00:01:19,485
ou fazer uma visualização da Web no 8081.

25
00:01:19,485 --> 00:01:23,580
Vamos esperar essa mensagem aparecer
e aí vamos continuar.

26
00:01:23,580 --> 00:01:26,405
Enquanto o Datalab está iniciando,

27
00:01:26,405 --> 00:01:28,965
vamos tentar o BigQuery.

28
00:01:28,965 --> 00:01:31,125
Esta é uma consulta que quero executar,

29
00:01:31,125 --> 00:01:34,755
o comentário aqui é muito importante
porque queremos executar SQL padrão,

30
00:01:34,755 --> 00:01:40,595
e por padrão, a interface de usuário do
BigQuery, ao menos agora, no momento

31
00:01:40,595 --> 00:01:41,965
em que estou gravando,

32
00:01:41,965 --> 00:01:44,480
tem como padrão o que chamamos
de SQL legado.

33
00:01:44,480 --> 00:01:46,950
Então, vamos ao console do BigQuery,

34
00:01:46,950 --> 00:01:51,400
que pode ser acessado do menu do GCP,

35
00:01:51,400 --> 00:01:58,590
selecionando isto, descendo e selecionando
"BigQuery".

36
00:01:58,590 --> 00:02:02,860
Nos será solicitada a senha,

37
00:02:02,860 --> 00:02:05,255
que é a mesma do Qwiklabs.

38
00:02:05,255 --> 00:02:09,475
Pegue a senha do Qwiklabs,

39
00:02:09,475 --> 00:02:19,390
insira aqui e entre no BigQuery.

40
00:02:19,390 --> 00:02:22,500
Verifique se é o seu projeto.

41
00:02:22,500 --> 00:02:27,455
Nesse caso, não este, nem recursos do
Qwiklabs ou algo do tipo.

42
00:02:27,455 --> 00:02:30,640
Aqui podemos clicar em "Compor consulta"
e novamente,

43
00:02:30,640 --> 00:02:33,025
sua interface pode ser um pouco diferente,

44
00:02:33,025 --> 00:02:35,175
já que ela muda o tempo todo.

45
00:02:35,175 --> 00:02:38,480
Mas em geral muitos destes botões

46
00:02:38,480 --> 00:02:42,835
e tudo mais são reconhecíveis.

47
00:02:42,835 --> 00:02:48,445
Entraremos aqui e executaremos
esta consulta em particular.

48
00:02:48,445 --> 00:02:51,025
Vamos executá-la.

49
00:02:51,025 --> 00:02:53,115
Outra maneira, se não quiser usar

50
00:02:53,115 --> 00:02:55,760
#standardSQL aqui é seguir adiante,

51
00:02:55,760 --> 00:02:57,900
clicar em "Mostrar opções",

52
00:02:57,900 --> 00:03:00,080
e desligar o SQL legado.

53
00:03:00,080 --> 00:03:01,725
É outra maneira de fazer isso.

54
00:03:01,725 --> 00:03:04,865
Mas de qualquer maneira queremos
executar o SQL padrão.

55
00:03:04,865 --> 00:03:08,430
Então vamos executá-lo e em seguida
executaremos a consulta.

56
00:03:08,430 --> 00:03:11,560
Isto está sendo feito em um conjunto
de dados chamado

57
00:03:11,560 --> 00:03:15,355
"bigquery-samples", nosso projeto
por consultas do BigQuery,

58
00:03:15,355 --> 00:03:18,090
e um conjunto de dados 
airline_ontime_data,

59
00:03:18,090 --> 00:03:20,320
e o nome da tabela é "flights".

60
00:03:20,320 --> 00:03:24,135
Podemos ver que aqui há 
"bigquery-samples".

61
00:03:24,135 --> 00:03:26,855
Na verdade não vemos aqui.

62
00:03:26,855 --> 00:03:31,470
Então como visualizar um projeto que não
está no menu do lado esquerdo?

63
00:03:31,470 --> 00:03:34,530
Clique neste menu suspenso,

64
00:03:34,530 --> 00:03:36,375
selecione "Alternar para projeto",

65
00:03:36,375 --> 00:03:40,250
"Mostrar projeto" e inclua este projeto.

66
00:03:40,250 --> 00:03:43,700
Então o "bigquery-samples" será exibido.

67
00:03:43,700 --> 00:03:47,290
E o "bigquery-samples" conterá
o "airline_ontime_data",

68
00:03:47,290 --> 00:03:50,410
e nele estará a tabela chamada "flights".

69
00:03:50,410 --> 00:03:53,070
Então posso consultar os voos,

70
00:03:53,070 --> 00:03:56,325
e verificamos na visualização

71
00:03:56,325 --> 00:03:59,130
que essas são as colunas,

72
00:03:59,130 --> 00:04:02,665
e alguns valores de dados de exemplo
na tabela.

73
00:04:02,665 --> 00:04:04,395
Veja os detalhes.

74
00:04:04,395 --> 00:04:07,880
Esta tabela tem aproximadamente
8 GB

75
00:04:07,880 --> 00:04:10,425
e mais de 70 milhões de linhas.

76
00:04:10,425 --> 00:04:12,165
E é isso.

77
00:04:12,165 --> 00:04:16,220
Então vamos executar a consulta.

78
00:04:21,630 --> 00:04:24,040
Então é isto

79
00:04:24,040 --> 00:04:27,300
que consultamos basicamente.

80
00:04:27,300 --> 00:04:30,915
O que fizemos aqui? Dissemos para
selecionar "departure_delay"

81
00:04:30,915 --> 00:04:33,000
e contar o número de voos.

82
00:04:33,000 --> 00:04:34,350
Este é o número de voos

83
00:04:34,350 --> 00:04:38,055
de um departure-delay específico, já que
você agrupa por departure_delay.

84
00:04:38,055 --> 00:04:41,990
Por exemplo, se departure-delay
for 37 negativo,

85
00:04:41,990 --> 00:04:47,040
em outras palavras, que o voo saiu
37 minutos mais cedo,

86
00:04:47,040 --> 00:04:48,505
quantos voos havia?

87
00:04:48,505 --> 00:04:52,145
Há 107 voos no conjunto de dados,

88
00:04:52,145 --> 00:04:55,720
e esses são os quantis.

89
00:04:55,720 --> 00:05:00,195
Isto é o 28º percentil cada, certo?

90
00:05:00,195 --> 00:05:02,555
Porque é dividido por cinco.

91
00:05:02,555 --> 00:05:06,025
Como 80% desses voos

92
00:05:06,025 --> 00:05:09,880
chegam adiantados 66 minutos ou mais,

93
00:05:09,880 --> 00:05:17,975
e 60 a 80% dos voos chegam entre 41
e 66 minutos, e assim por diante.

94
00:05:17,975 --> 00:05:20,635
Então tínhamos uma questão que fiz,

95
00:05:20,635 --> 00:05:23,915
se departure_delay estiver 35 minutos
adiantado,

96
00:05:23,915 --> 00:05:25,700
qual é o valor mediano?

97
00:05:25,700 --> 00:05:27,015
E o valor mediano

98
00:05:27,015 --> 00:05:28,570
seria o valor no meio,

99
00:05:28,570 --> 00:05:31,430
certo? Então, 28 minutos.

100
00:05:31,430 --> 00:05:37,980
Se você voltar ao nosso console,

101
00:05:37,980 --> 00:05:45,005
agora veremos que o Datalab pergunta se
queremos continuar. Clique em "Sim".

102
00:05:45,005 --> 00:05:49,910
Siga adiante e aceite tudo.

103
00:05:49,910 --> 00:05:53,110
Vamos avançar e executar esta
outra consulta.

104
00:05:53,110 --> 00:05:55,810
para encontrar o "airport-pair".

105
00:05:55,810 --> 00:05:58,720
"Airport-pair" é um aeroporto 
específico de partida

106
00:05:58,720 --> 00:06:03,215
e um aeroporto específico de chegada que
têm um número máximo de voos entre si.

107
00:06:03,215 --> 00:06:05,940
Novamente, se trata da mesma tabela,

108
00:06:05,940 --> 00:06:08,830
mas agora estou selecionando
o departure_airport,

109
00:06:08,830 --> 00:06:11,640
o arrival_airport e contando o número
de voos,

110
00:06:11,640 --> 00:06:15,085
mas agrupando por arrival_airport
e departure_airport,

111
00:06:15,085 --> 00:06:18,500
e ordenando por número decrescente
de voos, ou seja,

112
00:06:18,500 --> 00:06:23,055
o airport-pair com o número máximo de voos
será o primeiro,

113
00:06:23,055 --> 00:06:24,420
e estou limitando por 10.

114
00:06:24,420 --> 00:06:25,950
Pegarei os 10 primeiros.

115
00:06:25,950 --> 00:06:29,675
Os 10 mais comuns dentre estes.

116
00:06:29,675 --> 00:06:35,985
Note que processamos 17 milhões
de registros.

117
00:06:35,985 --> 00:06:37,360
E quando fiz isso,

118
00:06:37,360 --> 00:06:40,000
levou 2,3 segundos.

119
00:06:40,000 --> 00:06:43,415
Como é possível? Bem, é porque

120
00:06:43,415 --> 00:06:48,475
os 70 milhões de registros não foram
feitos nesta máquina que estou executando.

121
00:06:48,475 --> 00:06:51,270
Isso está sendo executado em milhares
de máquinas.

122
00:06:51,270 --> 00:06:52,575
É uma execução em escala.

123
00:06:52,575 --> 00:06:55,885
É isso que significa quando dizemos que 
executamos serviços no Cloud,

124
00:06:55,885 --> 00:06:58,070
fazemos essas coisas sem servidor.

125
00:06:58,070 --> 00:07:00,440
Mas de qualquer forma, voltando aqui,

126
00:07:00,440 --> 00:07:04,070
se o departure-airport for LAX

127
00:07:04,070 --> 00:07:06,380
e o arrival_airport for SAN,

128
00:07:06,380 --> 00:07:11,875
teremos 133 mil voos.

129
00:07:11,875 --> 00:07:16,075
Este é o airpot-pair com o número máximo
de voos entre si.

130
00:07:16,075 --> 00:07:19,405
Ao retornar ao Cloud Shell

131
00:07:19,405 --> 00:07:22,360
veremos que dá para clicar
na visualização da Web

132
00:07:22,360 --> 00:07:25,440
e alterar a porta para 8081 usando
o Datalab,

133
00:07:25,440 --> 00:07:28,240
que é este item aqui. Visualização da Web.

134
00:07:28,240 --> 00:07:32,010
Selecione-o, mude a porta para 8081

135
00:07:32,010 --> 00:07:33,415
e agora

136
00:07:33,415 --> 00:07:35,755
estamos dentro do Datalab.

137
00:07:35,755 --> 00:07:39,370
Tudo o que você fez no BigQuery até agora
foi ótimo.

138
00:07:39,370 --> 00:07:43,740
Agora podemos avançar e executar consultas
SQL em milhões de linhas de dados

139
00:07:43,740 --> 00:07:45,840
e receber respostas em segundos.

140
00:07:45,840 --> 00:07:49,170
Isso é ótimo, mas o que queremos
de verdade,

141
00:07:49,170 --> 00:07:53,740
além dessas respostas, é fazer coisas como
desenhar gráficos etc.

142
00:07:53,740 --> 00:07:55,545
Queremos poder ver os dados.

143
00:07:55,545 --> 00:07:59,465
E visualização é uma das coisas que não
podem ser feitas no console do BigQuery.

144
00:07:59,465 --> 00:08:02,640
Queremos usar uma ferramenta de
visualização personalizada.

145
00:08:02,640 --> 00:08:04,600
Nesse caso, usaremos o Datalab,

146
00:08:04,600 --> 00:08:06,810
que tem acesso total a todos os

147
00:08:06,810 --> 00:08:10,920
benefícios do Python para seguir adiante
e fazer nosso gráfico.

148
00:08:10,920 --> 00:08:15,065
O que faremos aqui é executar uma
de nossas consultas,

149
00:08:15,065 --> 00:08:19,745
mas não faremos isso do console do
BigQuery,

150
00:08:19,745 --> 00:08:21,295
e sim de dentro do Datalab.

151
00:08:21,295 --> 00:08:23,125
Aqui estamos no Datalab.

152
00:08:23,125 --> 00:08:25,605
Iniciarei o seu bloco de notas,

153
00:08:28,705 --> 00:08:30,145
e nesse bloco de notas,

154
00:08:30,145 --> 00:08:32,390
o que temos é uma célula de código,

155
00:08:32,390 --> 00:08:34,880
então posso colar o código nessa célula

156
00:08:34,880 --> 00:08:38,174
e clicar em "Executar" para executar
o código.

157
00:08:39,304 --> 00:08:42,710
Tudo isso está sendo executado 
pelo BigQuery.

158
00:08:42,710 --> 00:08:44,765
Na mesma ordem de segundos

159
00:08:44,765 --> 00:08:47,700
analisaremos estes milhões de voos,

160
00:08:47,700 --> 00:08:53,005
e o que estamos fazendo agora é recolher
isso como dataframes do Pandas.

161
00:08:53,005 --> 00:08:56,290
Então o "two_dataframe" aqui, é um
dataframe do Pandas.

162
00:08:56,290 --> 00:09:03,485
Ele mostra basicamente as primeiras linhas
desse dataframe e, como antes,

163
00:09:03,485 --> 00:09:04,740
temos um departure_delay,

164
00:09:04,740 --> 00:09:06,115
o número de voos,

165
00:09:06,115 --> 00:09:10,400
e os decis, porque nesse caso

166
00:09:10,400 --> 00:09:12,570
estou fazendo os quantis como 10.

167
00:09:12,570 --> 00:09:13,720
Ali estão 10 deles,

168
00:09:13,720 --> 00:09:16,505
e eles retornam como uma
lista do Python.

169
00:09:16,505 --> 00:09:21,110
Agora se você pegar o mesmo dataframe,

170
00:09:23,090 --> 00:09:26,640
e vamos renomear rapidamente,

171
00:09:28,960 --> 00:09:34,180
o que temos agora são os dados de decis,

172
00:09:34,180 --> 00:09:35,795
e os dispersamos,

173
00:09:35,795 --> 00:09:37,340
e tiramos 0%,

174
00:09:37,340 --> 00:09:39,710
10%, 20%, 30% etc.

175
00:09:39,710 --> 00:09:41,590
como colunas separadas.

176
00:09:41,590 --> 00:09:44,500
Por que estou fazendo isso? 
Ao separar colunas

177
00:09:44,500 --> 00:09:47,670
posso fazer a próxima coisa
que quero fazer.

178
00:09:51,770 --> 00:09:53,870
Vamos avançar e

179
00:10:06,020 --> 00:10:08,770
neste ponto vou descartar o 0%,

180
00:10:08,770 --> 00:10:10,675
vou descartar o 100%

181
00:10:10,675 --> 00:10:14,840
e vou pegar de 10 a 90% de
todos os dados.

182
00:10:14,840 --> 00:10:18,475
E vou plotá-los como gráficos.

183
00:10:18,475 --> 00:10:20,700
Agora,

184
00:10:20,700 --> 00:10:22,975
como você lê este gráfico?

185
00:10:22,975 --> 00:10:25,240
O que temos aqui é, por exemplo,

186
00:10:25,240 --> 00:10:27,065
o departure_delay é 10,

187
00:10:27,065 --> 00:10:29,385
ou seja, 10 minutos de atraso.

188
00:10:29,385 --> 00:10:33,870
10% dos voos, ainda assim,
chegam adiantados.

189
00:10:33,870 --> 00:10:39,605
Mas 90% dos voos chegam acima de
21 minutos.

190
00:10:39,605 --> 00:10:40,975
Esses são os decis.

191
00:10:40,975 --> 00:10:44,640
A mediana, por outro lado, é um
departure-delay,

192
00:10:44,640 --> 00:10:47,545
e arrival_delay de, talvez,

193
00:10:47,545 --> 00:10:48,910
três ou quatro minutos.

194
00:10:48,910 --> 00:10:51,260
Isso é o que essas linhas mostram,
essencialmente.

195
00:10:51,260 --> 00:10:55,500
Essas linhas nos dão uma distribuição em
um departure-delay específico.

196
00:10:55,500 --> 00:11:00,990
Olhando para isto, você percebe que a
relação é essencialmente linear

197
00:11:00,990 --> 00:11:07,915
para todos os departure-delays até chegar
a, talvez, abaixo de 20 negativo.

198
00:11:07,915 --> 00:11:14,195
Até aqui, os voos que partem com mais de
20 minutos de adiantamento,

199
00:11:14,195 --> 00:11:15,960
que partem bem antes,

200
00:11:15,960 --> 00:11:18,640
a relação é bastante dispersa.

201
00:11:18,640 --> 00:11:19,800
Não é muito linear.

202
00:11:19,800 --> 00:11:21,885
Se formos criar um modelo linear,

203
00:11:21,885 --> 00:11:24,920
não teremos problemas em fazê-lo

204
00:11:24,920 --> 00:11:28,170
em algum lugar no meio da distribuição,
mas não nas bordas.

205
00:11:28,170 --> 00:11:31,330
E você não consegue esse tipo

206
00:11:31,330 --> 00:11:34,685
de insight facilmente de outro modo.

207
00:11:34,685 --> 00:11:37,125
Você precisa plotar distribuições,

208
00:11:37,125 --> 00:11:40,015
e fazer isso é muito mais fácil

209
00:11:40,015 --> 00:11:43,120
quando se tem a potência total do Python
à sua disposição.