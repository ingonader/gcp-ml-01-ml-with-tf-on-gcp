ではComputer Engineと
Cloud Storageについてです Datalabインスタンスの実行場所である
Computerインスタンスとクラウドの 動作を知っておくと役立ちます クラウドにある永続的なデータには Cloud Storageを使用しますから それも理解する必要があります Compute Engineは
いわば世界中に分散したCPUです Cloud Storageは
いわば世界中に分散したディスクです Datalabは単一ノードのプログラムなので 1つのCompute Engineインスタンスで
実行されます しかし Dataflowジョブまたは Cloud ML Engineジョブを始める時 多くのCompute Engineインスタンスに
処理を委ねます Compute Engineを使えば ワークロードの実行に クラウド上の仮想マシンを
借りることができます どんな事をカスタマイズできますか コース番号 メモリの量 ディスクのサイズ OSなどです しかし ロードバランシングや
ネットワーキング等は組み込みです 初期設定にこだわる必要はありません いつでも変更できます マシンをどの程度使うかに応じて
自動的に料金が割引になります Computer Engineインスタンスに
付随するディスクは 高速ですが一時的です VMがなくなればディスクもなくなります Googleは永続的なディスクも提供していますが 今はこの点を忘れましょう Cloud Storageには耐久性があります つまりCloud Storageにあるblobが複製され
複数の場所に保存されます さらにCloud Storageは
どのマシンからでもアクセス可能です Google Centerの分割帯域幅により
ネットワークは高速です こうして10万台のマシンがお互いに 秒速10ギガバイトで対話できるのです Cloud Storageから直接読み取ることができます 実際TensorFlowプログラムを
書く時にはそうします Cloud Storageの目的は 耐久性のあるグローバル
ファイルシステムを提供することですが その構造はどうなっていますか 典型的なCloud Storage URLは gs:acme- sales/data/sales003.csv
のようになります acme-salesはバケットと呼ばれ バケットの名前は全世界で一意です ドメイン名やインターネットURL
のようなものです 全世界で一意のバケットを得る方法は
逆ドメイン名を使うことです この場合 単にプロジェクトIDを使用するか
または そのドメイン名の所有を証明するよう Google Cloud Platformから
要求されます プロジェクトIDも全世界で一意ですから
よほど運が悪くない限り それがバケット名にすでに使われている
ことはないでしょう gs URLの他の部分は
フォルダのような構造です Cloud Storage上のオブジェクトを指す
完全なgs URLを含みます これをどのように使いますか gsutilを使用できます これはGoogle Cloud SDKに付属する
コマンドラインツールです Compute Engineインスタンスを
スピンアップした場合はgsutilを使用できます またはラップトップで
Google Cloud SDKをダウンロードして gsutilを入手できます gsutilは よく知られたUnixコマンドライン
構文を使用します たとえばMBやRBはバケットの作成/削除です コピーするにはCPを使用します コマンドラインの代わりに GCP Consoleも使用できます あるいはprogramming APIや REST APIも使用できます ここで多数のファイルsales*.csvを Cloud Storageの特定の場所に
コピーする方法を見ましょう 先程のとおりCloud Storageバケットには
耐久性があります つまり重複して保存されます ここにオブジェクトを格納するだけで エッジキャッシングと
フェイルオーバーも得られます しかしCloud Storageがグローバルな
ファイルシステムだからと言って 待ち時間を考慮しなくてよい
わけではありません データをcomputeノードの近くに
保存するのが良いでしょう しかしサービスが中断したらどうなりますか アプリやデータを複数のゾーンに
分散させる必要があります そうすれば1つのゾーンで
障害が発生しても保護されます たとえば1つのゾーンで停電があった場合です それで 必要に応じて冗長度を高めるために
さまざまな地域のゾーンを活用できます ゾーンとは1つの地域内の
他から離れた場所です 「地域名+ハイフン+ゾーン文字」
という名前です 最後に世界中で利用可能にするには つまり 世界中にお客様が存在する
グローバルなアプリを作る場合には 複数の地域にアプリやデータを
分散させるべきでしょう