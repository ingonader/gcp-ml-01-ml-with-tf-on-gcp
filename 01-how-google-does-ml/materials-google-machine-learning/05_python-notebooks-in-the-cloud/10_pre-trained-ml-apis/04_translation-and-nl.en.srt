1
00:00:00,500 --> 00:00:03,420
Cloud Natural Language is an API
that lets you understand text

2
00:00:03,420 --> 00:00:05,590
with a single REST API request.

3
00:00:05,590 --> 00:00:08,115
Let's see what you can do with
the natural language API.

4
00:00:08,115 --> 00:00:11,835
First, the API lets you extract
entities from your text.

5
00:00:11,835 --> 00:00:15,519
It can also give you the overall sentiment
of a sentence or a text document, so

6
00:00:15,519 --> 00:00:18,540
it will tell you whether the sentence
is positive or negative.

7
00:00:19,740 --> 00:00:23,490
With analyzing syntax you can get into
the linguistic details of your text

8
00:00:23,490 --> 00:00:25,790
to extract things like parts of speech.

9
00:00:25,790 --> 00:00:29,750
And finally, the API lets you classify
content into different categories.

10
00:00:29,750 --> 00:00:33,230
Let's take a look at the syntax
analysis method in more detail.

11
00:00:33,230 --> 00:00:35,350
To do this,
we'll use the example sentence,

12
00:00:35,350 --> 00:00:38,560
the natural language API
helps us understand text.

13
00:00:38,560 --> 00:00:41,330
I've created a visualization to show
you what the JSON response from

14
00:00:41,330 --> 00:00:42,890
the API looks like.

15
00:00:42,890 --> 00:00:45,690
First, it gives you back what's
called a dependency parse tree,

16
00:00:45,690 --> 00:00:49,080
and this tells you how the different
words in a sentence relate to each other,

17
00:00:49,080 --> 00:00:50,750
which words depend on other words.

18
00:00:52,200 --> 00:00:53,810
Then we get back the parse label,

19
00:00:53,810 --> 00:00:56,230
which tells us the role of
each word in a sentence.

20
00:00:56,230 --> 00:00:59,940
So for example, helps is the root verb and
API is the nominal subject.

21
00:01:01,300 --> 00:01:02,710
We also get back the part of speech,

22
00:01:02,710 --> 00:01:06,860
so this will tell us whether a word
is an adjective, a noun, a verb, etc.

23
00:01:08,450 --> 00:01:11,960
And we get the lemma, the lemma is
the canonical form of the word, so

24
00:01:11,960 --> 00:01:16,240
in this example, the lemma we get back
is help, which is the lemma for helps.

25
00:01:16,240 --> 00:01:19,250
And this is useful if you're counting
the number of times a particular

26
00:01:19,250 --> 00:01:21,930
word is used to describe
something in your application.

27
00:01:21,930 --> 00:01:25,010
You probably don't want to count helps and
help as two different things,

28
00:01:25,010 --> 00:01:28,050
you want to use the canonical form
of the word or the lemma to do that.

29
00:01:28,050 --> 00:01:32,720
And then finally, we get additional
morphology details on our text, this will

30
00:01:32,720 --> 00:01:37,870
vary based on the language that you send
your text for the natural language API in.

31
00:01:37,870 --> 00:01:40,380
The next method I want to look
at is content classification.

32
00:01:40,380 --> 00:01:44,380
And to show you how this works, I have
a news article and I've sent the title and

33
00:01:44,380 --> 00:01:48,870
the first sentence of that article to the
natural language API for categorization.

34
00:01:48,870 --> 00:01:51,750
And we can see here that it's able
to return the category baseball.

35
00:01:51,750 --> 00:01:55,720
Now this is pretty cool considering the
word baseball isn't mentioned anywhere in

36
00:01:55,720 --> 00:01:59,370
this text, and it's able to
classify this with 99% competence.

37
00:02:00,410 --> 00:02:04,100
This method of the API provides
over 700 possible categories

38
00:02:04,100 --> 00:02:06,540
that you can use to
classify your text into.

39
00:02:06,540 --> 00:02:09,651
Next, I want to talk about a company
that's using a few different natural

40
00:02:09,651 --> 00:02:11,292
language API methods in production.

41
00:02:11,292 --> 00:02:15,240
This company is called Wootric, and
they are a customer feedback platform.

42
00:02:15,240 --> 00:02:17,840
The way Wootric helps their
customers collect feedback

43
00:02:17,840 --> 00:02:19,680
is through this box on top right.

44
00:02:19,680 --> 00:02:22,820
So they place this in various places
throughout their application, and

45
00:02:22,820 --> 00:02:26,660
they ask users to provide a numbered score
of how their experience was with this

46
00:02:26,660 --> 00:02:28,210
particular part of the app.

47
00:02:28,210 --> 00:02:31,943
So they give a score from zero to ten, and
this numbered score is pretty easy for

48
00:02:31,943 --> 00:02:33,820
Wootric to make sense of.

49
00:02:33,820 --> 00:02:37,430
But what's much more difficult for them to
make sense of is this open ended feedback,

50
00:02:37,430 --> 00:02:39,030
and that's where they're using
the natural language API.

51
00:02:39,030 --> 00:02:43,460
So you're using the sentiment analysis
feature to gauge whether the person's

52
00:02:43,460 --> 00:02:47,380
open ended feedback align with
the numbered score that they provided.

53
00:02:47,380 --> 00:02:50,580
Then they're using entity and
syntax analysis to extract

54
00:02:50,580 --> 00:02:54,940
key entities from the text and use that
to route this feedback appropriately.

55
00:02:54,940 --> 00:02:59,326
So for example, if they encounter
a customer who is angry about usability,

56
00:02:59,326 --> 00:03:03,368
they can route that to the correct
person to respond in near real time,

57
00:03:03,368 --> 00:03:07,436
rather than having somebody manually
review each piece of feedback.

58
00:03:07,436 --> 00:03:10,302
You can try out the Cloud Natural
Language API directly in the browser,

59
00:03:10,302 --> 00:03:13,090
I'm going to show you how this works
with a demo, let's take a look.

60
00:03:15,020 --> 00:03:19,090
If we go to the product page for the Cloud
Natural Language API, we can see that

61
00:03:19,090 --> 00:03:23,640
we're able to enter text here and see
what the natural language API responds.

62
00:03:23,640 --> 00:03:25,707
I'm going to enter my own text,

63
00:03:25,707 --> 00:03:29,544
this is something that I might
find in a restaurant review.

64
00:03:29,544 --> 00:03:33,065
I'm going to say I liked the sushi but
the service was bad.

65
00:03:39,369 --> 00:03:42,519
Now if I worked at this restaurant,
I'd likely want to flag this review and

66
00:03:42,519 --> 00:03:44,465
maybe follow up with this person.

67
00:03:44,465 --> 00:03:46,235
But I wouldn't want to
read all of the reviews,

68
00:03:46,235 --> 00:03:50,105
I probably would just want to find the
most positive and most negative reviews.

69
00:03:50,105 --> 00:03:51,955
Let's see what we get back
from the natural language API.

70
00:03:55,205 --> 00:03:59,345
Here we can see it extracted two
entities from our sentence, service and

71
00:03:59,345 --> 00:04:03,670
sushi, and it's able to break
down the sentiment by entity.

72
00:04:03,670 --> 00:04:05,240
So rather than giving us the sentiment for

73
00:04:05,240 --> 00:04:10,290
the sentence as a whole, we can look at it
for the specific entities in our sentence.

74
00:04:10,290 --> 00:04:14,670
The score that the natural language
API returns is a value ranging from -1

75
00:04:14,670 --> 00:04:19,470
to 1 indicating how negative or
positive this particular entity is.

76
00:04:19,470 --> 00:04:24,600
So we can see here that service received
a score of -0.9, almost fully negative,

77
00:04:24,600 --> 00:04:28,670
whereas sushi received a score of 0.9,
almost fully positive.

78
00:04:28,670 --> 00:04:31,518
This sentiment review is
really valuable to us, so

79
00:04:31,518 --> 00:04:34,708
if you look at the sentiment tab,
we can see this as well.

80
00:04:34,708 --> 00:04:38,386
Here we can see the sentiment for the
overall sentence, which isn't as useful to

81
00:04:38,386 --> 00:04:42,640
us in this case because in this case
we'd want to break it down by entity.

82
00:04:42,640 --> 00:04:46,170
And we can also examine the syntax
details in our sentence.

83
00:04:47,720 --> 00:04:52,620
You can try this out with your own text
at cloud.google.com/natural-language.