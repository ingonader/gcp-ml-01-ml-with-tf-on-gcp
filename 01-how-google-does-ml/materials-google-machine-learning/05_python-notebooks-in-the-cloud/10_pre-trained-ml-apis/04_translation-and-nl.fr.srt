1
00:00:00,500 --> 00:00:03,580
L'API Cloud Natural Language 
vous permet de comprendre du texte

2
00:00:03,580 --> 00:00:05,670
à l'aide d'une seule requête de l'API REST.

3
00:00:05,670 --> 00:00:08,115
Voyons toutes les possibilités qu'elle offre.

4
00:00:08,115 --> 00:00:11,835
Tout d'abord, l'API vous permet d'extraire
des entités d'un texte.

5
00:00:11,835 --> 00:00:15,839
Elle peut aussi reconnaître le sentiment
général d'une phrase ou d'un document texte,

6
00:00:15,839 --> 00:00:18,540
afin de déterminer s'il est positif
ou négatif.

7
00:00:19,740 --> 00:00:23,490
Avec l'analyse syntaxique, vous pouvez plonger
dans les détails linguistiques du texte,

8
00:00:23,490 --> 00:00:25,890
par exemple pour extraire
des éléments de discours.

9
00:00:25,890 --> 00:00:29,750
Enfin, l'API peut classifier le contenu
selon différentes catégories.

10
00:00:29,750 --> 00:00:33,230
Observons plus en détails
la méthode d’analyse syntaxique.

11
00:00:33,230 --> 00:00:36,350
Pour ce faire, nous allons utiliser
la phrase d'exemple suivante :

12
00:00:36,350 --> 00:00:38,760
"the natural language API
helps us understand text"

13
00:00:38,760 --> 00:00:41,360
J'ai créé une représentation visuelle
pour vous montrer

14
00:00:41,360 --> 00:00:42,890
la réponse JSON de l'API.

15
00:00:42,890 --> 00:00:45,690
Vous obtenez tout d'abord
un arbre de dépendances

16
00:00:45,690 --> 00:00:49,070
qui analyse les relations entre
les mots d'une phrase,

17
00:00:49,070 --> 00:00:51,120
ainsi que les dépendances entre les mots.

18
00:00:52,200 --> 00:00:54,170
Le libellé d'analyse nous indique ensuite

19
00:00:54,170 --> 00:00:56,230
la fonction de chaque mot dans la phrase.

20
00:00:56,230 --> 00:00:59,940
Ici, "helps" est le verbe principal,
et "API" est le sujet nominal.

21
00:01:01,300 --> 00:01:03,790
Les natures grammaticales
sont également indiquées,

22
00:01:03,790 --> 00:01:06,860
pour savoir si un mot est un adjectif,
un nom, un verbe, etc.

23
00:01:08,450 --> 00:01:11,960
Nous obtenons ensuite le lemme,
qui est la forme canonique du mot.

24
00:01:11,960 --> 00:01:16,240
Ici, le lemme de "helps" est "help".

25
00:01:16,240 --> 00:01:20,000
Cela s'avère utile si vous comptez combien
de fois un mot spécifique est utilisé

26
00:01:20,000 --> 00:01:22,340
pour décrire quelque chose
dans votre application.

27
00:01:22,340 --> 00:01:25,960
Mieux vaut alors ne pas compter "helps"
et "help" comme deux mots différents,

28
00:01:25,960 --> 00:01:28,270
et utiliser la forme canonique,
ou lemme, du mot.

29
00:01:28,270 --> 00:01:32,720
Pour finir, l'API donne les détails
morphologiques du texte,

30
00:01:32,720 --> 00:01:37,870
qui varient en fonction de la langue
dans laquelle vous l'envoyez à l'API.

31
00:01:37,870 --> 00:01:41,210
Nous allons maintenant aborder
la méthode de classification de contenu.

32
00:01:41,210 --> 00:01:44,270
Pour illustrer son fonctionnement,
j'utilise un article de presse

33
00:01:44,270 --> 00:01:47,870
dont j'ai envoyé le titre et la première
phrase à l'API Natural Language

34
00:01:47,870 --> 00:01:49,440
pour effectuer sa catégorisation.

35
00:01:49,440 --> 00:01:51,750
Le résultat renvoyé est "baseball".

36
00:01:51,750 --> 00:01:55,330
C'est assez impressionnant, car le mot
"baseball" n'est mentionné nulle part

37
00:01:55,330 --> 00:01:56,040
dans le texte.

38
00:01:56,040 --> 00:01:59,700
L'API a su classifier le texte
avec un niveau de confiance de 99 %.

39
00:02:00,410 --> 00:02:04,100
Cette méthode comprend plus de
700 catégories à utiliser

40
00:02:04,100 --> 00:02:06,540
pour classifier vos textes.

41
00:02:06,540 --> 00:02:09,691
Je vais maintenant vous présenter
l'entreprise Wootric, qui utilise

42
00:02:09,691 --> 00:02:12,572
différentes méthodes de l'API
Natural Language en production.

43
00:02:12,572 --> 00:02:15,530
Wootric est une plate-forme dédiée
aux commentaires de clients.

44
00:02:15,530 --> 00:02:18,220
Ses clients recueillent les commentaires
des utilisateurs

45
00:02:18,220 --> 00:02:20,030
dans la boîte située en haut à droite.

46
00:02:20,030 --> 00:02:22,930
Cette boîte se retrouve dans divers
endroits de l'application,

47
00:02:22,930 --> 00:02:26,660
et les utilisateurs y notent
la qualité de leur expérience

48
00:02:26,660 --> 00:02:28,840
pour cette partie spécifique
de l'application.

49
00:02:28,840 --> 00:02:31,943
Ils attribuent une note entre zéro et dix,

50
00:02:31,943 --> 00:02:34,370
qui est donc très facile à interpréter
pour Wootric.

51
00:02:34,370 --> 00:02:36,990
Cela est loin d'être le cas des
commentaires ouverts,

52
00:02:36,990 --> 00:02:40,010
et c'est pourquoi Wootric fait appel
à l'API Natural Language.

53
00:02:40,010 --> 00:02:43,680
La fonction d'analyse des sentiments
permet d'évaluer si le commentaire ouvert

54
00:02:43,680 --> 00:02:47,380
de l'utilisateur est en adéquation
avec la note qu'il a attribuée.

55
00:02:47,380 --> 00:02:50,870
Avec l'analyse des entités et de la syntaxe,
Wootric peut ensuite extraire

56
00:02:50,870 --> 00:02:54,940
les entités clés du texte, pour transmettre
ces commentaires aux bons destinataires.

57
00:02:54,940 --> 00:02:59,396
Par exemple, si un client se plaint du
manque de facilité d'utilisation,

58
00:02:59,396 --> 00:03:02,628
sa plainte est transmise à la personne
adéquate, capable de répondre

59
00:03:02,628 --> 00:03:03,938
pratiquement en temps réel,

60
00:03:03,938 --> 00:03:07,436
évitant ainsi une révision manuelle
de chaque commentaire individuel.

61
00:03:07,436 --> 00:03:09,622
Vous pouvez tester l'API
Cloud Natural Language

62
00:03:09,622 --> 00:03:11,102
directement dans votre navigateur.

63
00:03:11,102 --> 00:03:14,190
Nous allons voir comment elle fonctionne
dans cette démonstration.

64
00:03:15,020 --> 00:03:19,090
Sur la page du produit
Cloud Natural Language,

65
00:03:19,090 --> 00:03:23,640
vous pouvez saisir du texte à analyser
par l'API et observer les résultats.

66
00:03:23,640 --> 00:03:25,707
Je vais saisir un texte qui pourrait

67
00:03:25,707 --> 00:03:29,544
correspondre à une critique de restaurant.

68
00:03:29,544 --> 00:03:33,065
Je vais dire que j'ai aimé les sushis
mais que le service était mauvais.

69
00:03:39,369 --> 00:03:42,609
Si je travaillais dans ce restaurant,
j'aimerais que ce commentaire

70
00:03:42,609 --> 00:03:44,775
me soit signalé, et pouvoir assurer un suivi.

71
00:03:44,775 --> 00:03:47,915
Mais je voudrais ne pas avoir à lire
tous les commentaires.

72
00:03:47,915 --> 00:03:50,265
Uniquement les plus positifs
et les plus négatifs.

73
00:03:50,265 --> 00:03:52,915
Voyons les résultats que donne
l'API Natural Language.

74
00:03:55,205 --> 00:03:59,345
Deux entités ont été extraites de la phrase :
service et sushi.

75
00:03:59,345 --> 00:04:03,670
Et l'API peut indiquer le sentiment
par entité.

76
00:04:03,670 --> 00:04:06,840
Plutôt que d'obtenir les sentiments pour
la globalité de la phrase,

77
00:04:06,840 --> 00:04:10,290
nous pouvons isoler le sentiment
d'entités spécifiques.

78
00:04:10,290 --> 00:04:14,670
Le score renvoyé par l'API Natural Language
est une valeur entre -1 et 1,

79
00:04:14,670 --> 00:04:19,470
qui indique à quel point l'entité
en question est positive ou négative.

80
00:04:19,470 --> 00:04:24,600
Ici, le service obtient un score de -0,9,
pratiquement le pire score,

81
00:04:24,600 --> 00:04:28,670
alors que les sushis obtiennent un score
de 0,9, pratiquement le meilleur score.

82
00:04:28,670 --> 00:04:31,518
L'évaluation du sentiment
est riche en informations.

83
00:04:31,518 --> 00:04:35,098
Si vous cliquez sur l'onglet "Sentiment",
d'autres informations s'affichent.

84
00:04:35,098 --> 00:04:37,766
Ici vous pouvez voir le sentiment
de la phrase complète,

85
00:04:37,766 --> 00:04:39,896
ce qui n'est pas très utile dans notre cas,

86
00:04:39,896 --> 00:04:42,640
car nous voulons connaître les sentiments
par entité.

87
00:04:42,640 --> 00:04:46,170
Nous pouvons aussi afficher les détails
de la syntaxe de notre phrase.

88
00:04:47,720 --> 00:04:52,620
Faites l’essai avec votre propre texte sur
cloud.google.com/natural-language.