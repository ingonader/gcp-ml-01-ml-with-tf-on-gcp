Vorhin habe ich das mathematische Modell
in einer bestimmten Form gezeichnet. Das Modell besteht aus vielen Ebenen,
die hintereinander angeordnet sind. Die Eingabe durchläuft die erste Ebene, dann die zweite, dann die dritte usw. Jede einzelne Ebene ist
eine einfache mathematische Funktion. Das gesamte Modell besteht aus
einer Funktion, dann noch einer, dann noch einer usw. Das mathematische Modell in diesem
Diagramm ist ein neuronales Netzwerk. Es gibt noch mehr geläufige
mathematische ML-Modelle: lineare Methoden,
Entscheidungsbäume, Radialbasisfunktionen, eine Kombination von Bäumen, Radialbasisfunktionen
gefolgt von linearen Methoden usw. Hier geht es aber um neuronale Netzwerke. Ursprünglich hatten neuronale
Netzwerkmodelle weniger Ebenen. Neuronale Netzwerke
stammen aus den 1970ern und haben traditionell
nur eine verborgene Ebene. Ein Grund dafür war die zu
geringe Rechenleistung, denn das Training neuronaler Deep-Learning-Netzwerke mit vielen Ebenen
erfordert eine hohe Rechenleistung. Der zweite Grund
war die Datenverfügbarkeit. Wenn weitere Ebenen hinzugefügt werden, müssen immer mehr
Gewichtungen angepasst werden. Und dafür benötigen wir mehr Daten. Der dritte Grund waren Rechentricks. Wenn einfach weitere
Ebenen hinzugefügt werden, entstehen Probleme. Das Training solcher
Netzwerke dauert sehr lange. Dabei werden einige
Ebenen auf null gesetzt oder verschwinden einfach. Wissenschaftler mussten zahlreiche
Tricks und Techniken entwickeln, damit diese Netzwerke funktionierten. In den letzten Jahren hat
sich gezeigt, dass neuronale Netzwerke für eine Reihe von
Aufgaben optimal geeignet sind, sogar für solche, die mit
maschinellem Lernen als unlösbar galten. Sie ermöglichen erhebliche
Verbesserungen bei schwierigen Aufgaben wie
Sprachübersetzungen, Bildklassifizierung, Sprachverständnis usw. Bei Problemen mit unstrukturierten Daten
funktionieren Sie genauso gut oder besser als traditionelle ML-Methoden wie supportgestützte Geräte
oder gepackte Entscheidungsbäume. Das sehen Sie bei Google. Die Nutzung von Deep Learning
ist bei Google rasant angestiegen. Vor vier Jahren gab es diese Modelle kaum. Heute gibt es innerhalb
von Google mehr als 4.000 davon. In diesem Kurs verwenden wir fast
nur neuronale Netzwerke. Wir beginnen mit
Problemen unstrukturierter Daten und sobald wir wissen, wie wir
eine End-to-End-Pipeline entwickeln, nutzen wir dieses Wissen, um Probleme mit Bildern, Sequenzen
und Empfehlungssystemen zu lösen. Dieses Diagramm zeigt
mehr als 4.000 Modelle. Wie kann es so viele ML-Modelle geben? ML ist Teil von
fast jedem Google-Produkt: YouTube, Play, Chrome, Gmail und Hangouts verwenden alle maschinelles Lernen. Es gibt nicht nur ein
ML-Modell bei YouTube. Für jedes Produkt gibt es Dutzende. Meiner Erfahrung nach ist
das etwas gewöhnungsbedürftig. Sie möchten vielleicht vorhersagen, ob ein Artikel bald noch auf Lager ist. Sie nehmen an, dass Sie ein
einzelnes ML-Modell entwickeln müssen. In der Praxis sieht das anders aus.
Um zu wissen, ob ein Artikel auf Lager ist, müssen Sie mehrere ML-Modelle
entwickeln, um das Problem zu lösen. Sie müssen das Problem
in kleinere Probleme unterteilen und dafür Ihren Geschäftssinn einsetzen. Zum Beispiel sagt Ihr erstes Modell voraus, wie groß die Nachfrage im Laden ist. Ihr zweites Modell ist
eine Vorhersage des Artikelbestands beim Lieferanten
oder in Läden in der Nähe. Eventuell brauchen Sie ein drittes Modell, um vorherzusagen,
wie lang die Lieferzeit ist. Damit entscheiden Sie, wann und
und bei welchem Lieferanten Sie bestellen. Diese Modelle können sehr komplex sein. Das Modell für eine
Vorhersage der Nachfrage nach Milch ist anders als das Modell
für eine Nachfrage nach Nudeln. Das Modell für die
Wiederauffüllung von Elektronik unterscheidet sich vom Modell
für die Wiederauffüllung von Möbeln. Es gibt nicht nur ein ML-Modell, sondern Dutzende pro Produkt. In diesem Kurs zeige ich Ihnen
Training, Bereitstellung und Vorhersage mit einem einzelnen Modell. In der Praxis müssen Sie jedoch
mehrere ML-Modelle entwickeln, um ein Problem zu lösen. Mit einem einzelnen Modell können Sie kein komplexes Problem lösen.