では機械学習を
どのように始めればよいでしょう 私たちの経験上 
最も成功する確率が高いのは 現在 手作業でデータ分析を行っている ユースケースを選ぶことです Global Fishing Watchの例を見てみましょう これは密漁を摘発するNPOです 以前は手作業で漁船の航路を
分析していましたが 機械学習でその処理を行うようにして 毎日2,200万のデータポイントを
分析できるようになりました 手作業のデータ分析を経てから機械学習を 行ったほうがよい理由はいくつかあります 第一に手作業でデータ分析をしているなら すでにデータがあるからです データ収集は機械学習プロジェクトで
最も時間がかかる難しい部分とされ 多くがここで失敗します ですから データがすでにあるのなら 成功する確率がすでに上がっているのです それが手作業のデータ分析を
経る理由の1つです ２つ目の理由は 現時点で
データがないとしても MLプロジェクトでは
まずデータの収集と評価を行い 評価はデータのラベルを付ける
という意味なので 手作業での分析が必要なのです データを分析したところで 意思決定に必要な入力を得られないのなら 機械学習をしても意味がないからです 手作業の分析では失敗して
新しいアイデアを試すこともできます ですから この分析ステップを
省略しないでください データから情報を入手できるかどうかは
多くの場合 分析ステップでわかります 手作業のデータ分析を省略しない
3つ目の理由は 良い機会学習モデルの構築に データを熟知することが不可欠だからです それが第1段階であるため 手作業のデータ分析が必要です いきなりMLから始めないでください この点については
次のモジュールでお話しします ４つ目の理由は
MLが自動化とスケーリングへの道だからです スケーリングのために
手作業の分析を自動化するのです Global Fishing Watchのように 手作業で行っていた漁船航路の分析を自動化し より多くの航路を
分析できるようスケーリングします 分析ができないのであれば MLは不可能です エンジニアにとって機械学習という言葉は 訓練を連想させるものです しかし機械学習の真髄と価値は
予測にあります そこで鍵となるのが
モデルによるストリーミングデータの処理です ストリーミングデータの洗練化が必要です 一括処理を毎週行うだけで 何とかなると思っていますか？ ビジネスの速度が増すだけです 機械学習製品が失敗する主な理由の1つは 訓練と実働との間に
偏りがあることです 特定のシステムを使い訓練のために 過去のデータを処理しているとします データサイエンスチームによる
一括処理システムかもしれません 一方 予測に機械学習モデルを必要とする 別のシステムがあるとします 予測のためのシステムは
エンジニアリングチームが 作成して保守しているものでしょう ウェブフレームワークを使い
Javaで作成されたかもしれません 問題は モデルが実働時と訓練時に
まったく同じデータを認識しない限り モデルの予測は
正確でなくなるということです これが訓練と実働との偏りの問題です つまり ストリーミング処理の結果と 一括処理の結果が同じである必要が
あるということです この訓練と実働との間の隔たりの
発生確率を下げるには 訓練時に過去データを処理するために
使用したコードと 同じコードを予測でも使用することです そのためには データのパイプラインがバッチも
ストリームも処理しなければなりません これがデータフローの背後にある重要な点です データパイプラインをPythonやJava またCloud Dataブランドで
視覚的に設計する方法です オープンソースはApache Beamです 「Beam」の「B」はバッチを 「eam」はストリームを表します バッチとストリームを
処理する1つのシステムです 訓練と予測の両方で
同じシステムを使うため 機械学習で役立ちます 気になるパフォーマンス指標ですが これは訓練と予測で異なります 訓練中に注目する主なパフォーマンスは
膨大なデータへのスケーリングです 分配の訓練のようなものです 予測の際に注目する主なパフォーマンスは
応答速度つまり 高いQPSです これがTensorFlowの背後にある
重要な知見です 機械学習の訓練用フレームワークは
多数あります しかし操作化にも対応できるものは
それほど多くありません