1
00:00:00,000 --> 00:00:03,640
この講義では
「秘伝のソース」についてお話しします

2
00:00:03,640 --> 00:00:07,150
Googleは皆さんに秘伝のソースを
共有しますが

3
00:00:07,150 --> 00:00:08,800
これはコードでも

4
00:00:08,800 --> 00:00:10,140
単なるアルゴリズムでもありません

5
00:00:10,140 --> 00:00:12,130
Googleが蓄積してきたノウハウです

6
00:00:12,130 --> 00:00:16,540
これは おそらく世界のどの企業よりも
大きな価値を生み出すMLシステムを

7
00:00:16,540 --> 00:00:20,810
何年にもわたり管理するなかで
蓄積したものです

8
00:00:21,520 --> 00:00:23,900
では この組織的ノウハウの共有で

9
00:00:23,900 --> 00:00:26,975
まずMLスキルの話をするのはなぜでしょうか

10
00:00:26,975 --> 00:00:30,610
皆さんが優れたMLストラテジストになるには

11
00:00:30,610 --> 00:00:33,700
「泥まみれ」になっていただく必要があります

12
00:00:33,700 --> 00:00:36,555
つまり実際に幾つかのシステムを構築しながら

13
00:00:36,555 --> 00:00:38,310
学習していく必要があります

14
00:00:38,310 --> 00:00:40,000
良い面もあります

15
00:00:40,000 --> 00:00:43,395
ここで見ていく技術的MLスキルのほとんどは

16
00:00:43,395 --> 00:00:46,195
ソフトウェアやデータ処理のスキルです

17
00:00:46,195 --> 00:00:49,245
すでによくご存知かもしれません

18
00:00:49,245 --> 00:00:52,020
技術的スキルを見ていくと同時に

19
00:00:52,020 --> 00:00:55,115
Googleの持つ経験を活用して

20
00:00:55,115 --> 00:00:58,905
よくある落とし穴を避けることもできます

21
00:00:58,905 --> 00:01:02,275
「よくある落とし穴」とは何でしょう

22
00:01:02,275 --> 00:01:04,915
クリックベイトのようなものです

23
00:01:04,915 --> 00:01:09,615
MLを始める企業がよく陥る
落とし穴トップ10リストをご覧ください

24
00:01:09,615 --> 00:01:13,380
これは 私が何年もの間
新任のML担当者たちと対話して

25
00:01:13,380 --> 00:01:15,390
大まかにまとめたリストです

26
00:01:15,390 --> 00:01:17,345
新任者たちはよくこう言います

27
00:01:17,345 --> 00:01:21,480
「新しくて素晴らしいMLで
すごい結果を出したいです」

28
00:01:21,480 --> 00:01:24,520
その後 よくある落とし穴に陥るかもしれません

29
00:01:24,520 --> 00:01:27,920
これはGoogleでも
パートナー企業でも見られます

30
00:01:27,920 --> 00:01:31,730
はじめに 最もよくある落とし穴は
ソフトウェアを書くよりも

31
00:01:31,740 --> 00:01:35,780
独自のMLアルゴリズムをトレーニングする方が
早いと考えることです

32
00:01:35,780 --> 00:01:38,080
通常 これは間違いです

33
00:01:38,080 --> 00:01:42,405
なぜなら 単なるアルゴリズムを超える
優れたMLシステムを作るには

34
00:01:42,405 --> 00:01:46,200
アルゴリズムに加え
たとえばソフトウェア スタックなど

35
00:01:46,200 --> 00:01:47,990
多くのものが必要です

36
00:01:47,990 --> 00:01:53,063
堅牢性、スケーラビリティ、十分な可用時間を
確保する必要があるからです

37
00:01:53,063 --> 00:01:56,075
ソフトウェアでもこれが必要ですが

38
00:01:56,075 --> 00:01:58,350
アルゴリズムを使おうとすると

39
00:01:58,350 --> 00:02:02,050
データ収集とトレーニングに関して
複雑さが加わり

40
00:02:02,050 --> 00:02:04,880
全体が少し複雑になります

41
00:02:04,880 --> 00:02:11,540
それで通常は ソフトウェアだけを使って
簡単なことから始めるのをおすすめします

42
00:02:11,540 --> 00:02:13,550
次の落とし穴は 私のお気に入りです

43
00:02:13,550 --> 00:02:16,620
「MLを始めたいがデータをまだ集めていない」

44
00:02:16,620 --> 00:02:19,450
すぐに停止してください
データが必要です

45
00:02:19,450 --> 00:02:24,080
十分なデータが集まってない
またはアクセスできない時点で

46
00:02:24,080 --> 00:02:27,330
MLについて話しても無意味です

47
00:02:27,330 --> 00:02:29,585
実はデータがあるかもしれませんね

48
00:02:29,585 --> 00:02:31,140
何年も記録し

49
00:02:31,140 --> 00:02:34,410
別の部署が管理しているシステムに
あるかもしれません

50
00:02:34,410 --> 00:02:36,470
でも実際に見たことはありません

51
00:02:36,470 --> 00:02:38,160
私は自信を持って言います

52
00:02:38,160 --> 00:02:41,305
自分で見たことがないデータは準備不足です

53
00:02:41,305 --> 00:02:42,565
それだけでなく

54
00:02:42,565 --> 00:02:44,810
定期的にそのデータを確認して

55
00:02:44,810 --> 00:02:48,710
レポート作成や新たな発見をする人が
組織にいないなら

56
00:02:48,710 --> 00:02:51,790
つまり そのデータがすでに
価値を生み出していないなら

57
00:02:51,790 --> 00:02:55,885
データの保守に努力が
払われていない可能性が高く

58
00:02:55,885 --> 00:02:59,010
データが次第に廃れていきます

59
00:02:59,010 --> 00:03:01,565
これまで対話したクライアントの中で

60
00:03:01,565 --> 00:03:05,425
クリーンデータを集める労力を
過小評価しない人には

61
00:03:05,425 --> 00:03:07,445
会ったことがありません

62
00:03:07,445 --> 00:03:10,570
「思ったより簡単だった」と言う人はいません

63
00:03:10,570 --> 00:03:13,630
多くの苦労や障害に直面するでしょう

64
00:03:13,630 --> 00:03:15,150
次の落とし穴は

65
00:03:15,150 --> 00:03:19,040
ループの中に人間を配置し忘れることです

66
00:03:19,040 --> 00:03:21,530
MLシステムが機能し始めて

67
00:03:21,530 --> 00:03:25,080
組織のコアタスクまたは
コアビジネスを実行するようになると

68
00:03:25,080 --> 00:03:27,700
そのシステムはとても重要になります

69
00:03:27,700 --> 00:03:32,270
そして組織はシステムを扱うときに
リスクを回避しようとします

70
00:03:32,270 --> 00:03:35,570
なぜなら そのシステムは「大黒柱」だからです

71
00:03:35,570 --> 00:03:38,340
それで リスクの軽減が特に重要となります

72
00:03:38,340 --> 00:03:42,550
多くの方法がありますが そのひとつは
人間をループの中に置き

73
00:03:42,550 --> 00:03:44,700
データを確認させることです

74
00:03:44,700 --> 00:03:50,170
MLがうまく機能しない場合や
トレーニングの入力管理を人が行います

75
00:03:50,170 --> 00:03:52,739
これについては後で詳しくお話ししますが

76
00:03:52,739 --> 00:03:56,595
私の知る限りGoogleでは
どの本稼働MLシステムにも

77
00:03:56,595 --> 00:03:58,360
必ずループの中に人がいます

78
00:03:58,360 --> 00:03:59,950
これはどうでしょうか

79
00:03:59,950 --> 00:04:01,990
ある製品を立ち上げました

80
00:04:01,990 --> 00:04:06,390
他の機能ではなく
MLアルゴリズムが最初の価値提案です

81
00:04:06,390 --> 00:04:08,028
これは問題です

82
00:04:08,028 --> 00:04:11,800
第一に MLを提供しても
ユーザーたちは気に留めないでしょう

83
00:04:11,800 --> 00:04:13,870
単に新しくてかっこいい機能や

84
00:04:13,870 --> 00:04:16,070
推奨機能の性能などに注目します

85
00:04:16,070 --> 00:04:20,385
さらに 最初の価値提案がMLだけの
製品を立ち上げると

86
00:04:20,385 --> 00:04:22,675
処理すべき新しいデータを生成して

87
00:04:22,675 --> 00:04:27,210
適切な学習を行うために
大量のユーザーが必要です

88
00:04:27,210 --> 00:04:30,160
次に 優れたMLエンドシステムを作っても

89
00:04:30,160 --> 00:04:32,665
間違ったものを最適化するかもしれません

90
00:04:32,665 --> 00:04:37,585
たとえばGoogle検索で
ユーザーのクリック頻度を尺度として

91
00:04:37,585 --> 00:04:40,040
ユーザー エンゲージメントを計測し

92
00:04:40,040 --> 00:04:41,980
最適化するとします

93
00:04:41,980 --> 00:04:45,610
「当社の製品に注目してほしい」
「ユーザーを引き付けたい」という思いからです

94
00:04:45,610 --> 00:04:48,480
でも クリック頻度で最適化すると
どうなるでしょう

95
00:04:48,480 --> 00:04:52,795
MLアルゴリズムは「悪い」コンテンツを
提示するかもしれません

96
00:04:52,795 --> 00:04:55,850
ユーザーが ついつい何度も
クリックするようなコンテンツです

97
00:04:55,850 --> 00:04:57,850
それで 完璧でなくとも

98
00:04:57,850 --> 00:05:01,415
十分に適切なもので
最適化することは重要です

99
00:05:01,415 --> 00:05:04,065
そして 悪い刺激に常に注意すべきです

100
00:05:04,065 --> 00:05:07,025
MLアルゴリズムが実際にうまく機能しているか

101
00:05:07,025 --> 00:05:09,345
測定し忘れるとどうなるでしょうか

102
00:05:09,345 --> 00:05:12,875
アルゴリズムを実装し 稼働させて
ユーザーに提供します

103
00:05:12,875 --> 00:05:15,910
でも 機能がどれほど改善したか分かりません

104
00:05:15,910 --> 00:05:20,145
顧客のエンゲージメントや
生涯価値が上がったか 分かりません

105
00:05:20,145 --> 00:05:22,080
これは かなり深刻です

106
00:05:22,080 --> 00:05:24,820
もし成功の度合いを示せないならば

107
00:05:24,820 --> 00:05:29,430
「次の製品でこれを使ってみたい」と
上司に提案できないでしょう

108
00:05:29,430 --> 00:05:32,234
さらに この落とし穴に陥る
クライアントもいます

109
00:05:32,234 --> 00:05:34,750
他の人の訓練済みMLアルゴリズムが

110
00:05:34,750 --> 00:05:37,090
使いやすく付加価値も高いのを見て

111
00:05:37,090 --> 00:05:39,870
自分でも同じように構築できると
勘違いするのです

112
00:05:39,870 --> 00:05:43,850
Google Cloud にはいわゆる
ML APIがあります

113
00:05:43,850 --> 00:05:47,000
たとえば Visionに画像を送ると

114
00:05:47,000 --> 00:05:50,750
定義済みラベルで画像が分類されます

115
00:05:50,750 --> 00:05:53,230
素晴らしい機能で
とても使いやすいです

116
00:05:53,230 --> 00:05:54,730
インフラストラクチャや

117
00:05:54,730 --> 00:05:59,000
データのトレーニング、収集を
心配しなくてもすみます

118
00:05:59,000 --> 00:06:00,865
本当に使いやすいですが

119
00:06:00,865 --> 00:06:04,375
自分で構築するとなると
話は違います

120
00:06:04,375 --> 00:06:09,550
特に 事前準備されていない
MLアルゴリズムを自分で作る場合は

121
00:06:09,550 --> 00:06:11,510
かなりの労力が必要です

122
00:06:11,510 --> 00:06:15,500
たとえば 本稼働MLアルゴリズムを
一度だけトレーニングして

123
00:06:15,500 --> 00:06:19,985
「僕のラップトップで このデータセットで
うまく機能したから ほぼ完成だ」

124
00:06:19,985 --> 00:06:22,450
そう考えるとしたら間違いです

125
00:06:22,450 --> 00:06:25,480
おそらく完成率は10%でしょう

126
00:06:25,480 --> 00:06:29,890
コア ビジネスプロセスとなる
MLアルゴリズムを作るには

127
00:06:29,890 --> 00:06:32,740
何回も繰り返し
再トレーニングすべきですし

128
00:06:32,740 --> 00:06:39,010
そのプロセスを簡単かつスムーズにすることに
労力を注ぐべきです

129
00:06:39,050 --> 00:06:40,915
さて 最後の落とし穴です

130
00:06:40,915 --> 00:06:45,905
これにより
MLアルゴリズムの最適化をめぐる

131
00:06:45,905 --> 00:06:49,265
戸惑いが解消するかもしれません

132
00:06:49,265 --> 00:06:54,265
それは「自社製の認識機能を
設計したい」という考えです

133
00:06:54,265 --> 00:07:00,025
たとえば画像、音声、
NLP分類による自然言語処理などです

134
00:07:00,065 --> 00:07:03,070
これは奇妙な落とし穴です

135
00:07:03,070 --> 00:07:06,745
現実よりずっと簡単に見える
という点で奇妙なのです

136
00:07:06,745 --> 00:07:12,865
また 認識機能は
何十年もの学術的研究により

137
00:07:12,865 --> 00:07:18,620
高度に調整されたアルゴリズムを
そのまま使える場合がほとんどです

138
00:07:18,620 --> 00:07:22,200
これらは既成 あるいは定義済みですから

139
00:07:22,200 --> 00:07:24,840
わざわざ高いコストをかけて

140
00:07:24,840 --> 00:07:27,495
自分で設計を試みる必要はありません

141
00:07:27,835 --> 00:07:30,840
落とし穴は以上のとおりですが

142
00:07:30,840 --> 00:07:32,640
良い面もあります

143
00:07:32,640 --> 00:07:35,735
ほとんどの価値が道の途中で生まれることです

144
00:07:35,735 --> 00:07:39,600
MLに向かって進んでも
到達しないかもしれません

145
00:07:39,600 --> 00:07:42,615
それでも 取り組んだものはすべて
大きく向上します

146
00:07:42,615 --> 00:07:44,320
もし到達できたなら

147
00:07:44,320 --> 00:07:48,440
完成したMLは
ほとんど すべてのものを改善します

148
00:07:48,440 --> 00:07:50,325
こう考えてみてください

149
00:07:50,325 --> 00:07:54,475
あなたの企業にとって
MLの構築や使用が難しいなら

150
00:07:54,475 --> 00:07:57,755
業界の他社にとっても困難でしょう

151
00:07:57,755 --> 00:08:02,765
でも ひとたびML対応の製品や
社内プロセスができれば

152
00:08:02,765 --> 00:08:07,290
ユーザーや消費者は優れた
エクスペリエンスを享受します

153
00:08:07,290 --> 00:08:11,370
それを複製したり 競合するものを作るのは
極めて困難です

154
00:08:11,370 --> 00:08:14,920
なぜなら MLには美しい
フィードバックループがあるからです

155
00:08:14,920 --> 00:08:18,105
MLは稼働しながら
より多くのデータを集めて学習を続けます

156
00:08:18,735 --> 00:08:24,305
ここで「価値は道の途中で得られる」
という点を掘り下げてみましょう

157
00:08:24,305 --> 00:08:27,740
完成したMLでエンドツーエンドに自動化された

158
00:08:27,740 --> 00:08:32,910
万能ソリューションを直ちに実現したい
気持ちはわかります

159
00:08:32,910 --> 00:08:35,225
誰でも そうした飛躍を望みますが

160
00:08:35,225 --> 00:08:38,880
多くの場合 優れた製品や
組織の成果にはつながりません

161
00:08:38,880 --> 00:08:42,340
Googleでも パートナー企業でも
それを見てきました

162
00:08:42,340 --> 00:08:43,920
それで 今すべきことは

163
00:08:43,920 --> 00:08:45,910
もっと現実的な道を見つけ

164
00:08:45,910 --> 00:08:49,510
道の途中で見つかる素晴らしいものを
見直すことなのです