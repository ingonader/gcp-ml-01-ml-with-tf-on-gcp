Durant cette présentation,
nous allons parler de l'ingrédient secret. Google va vous révéler
son ingrédient secret. Il ne s'agit pas du code ni simplement d'un algorithme. C'est un savoir-faire
accumulé au fil des ans, en gérant probablement plus de systèmes de ML
que toute autre entreprise au monde. Si nous partageons ce savoir-faire, pourquoi parler
de compétences techniques ? Parce que nous voulons
que vous deveniez des stratèges du ML. Et pour cela, il vous faut mettre
la main à la pâte. Vous devez vous investir, créer un système
et en connaître le fonctionnement. La bonne nouvelle, c'est que ces compétences techniques,
que vous souhaitez acquérir sur Coursera, sont principalement liées
aux logiciels et données. Vous êtes probablement
déjà familiarisé avec tout cela. En abordant ces compétences techniques, nous en profitons pour vous transmettre notre expérience, afin de vous aider
à éviter les pièges courants. Quels sont les pièges courants ?
Bonne question. Voici notre liste de type "attrape-clics" des 10 principales difficultés rencontrées
par les sociétés qui adoptent le ML. Il s'agit d'une liste
que j'ai compilée après avoir passé des années à discuter
avec de nouveaux utilisateurs qui déclarent être enthousiasmés par cette technologie et avoir hâte de commencer, mais qui finissent par tomber
dans un piège ou un autre. C'est arrivé chez Google
et chez nos partenaires également. Premier piège, l'un des plus courants. Vous pensiez qu'entraîner votre algorithme
serait plus rapide que coder le logiciel. Généralement, ce n'est pas le cas. En effet, pour créer un bon système de ML,
il faut certes un algorithme, mais également
toutes sortes d'autres choses autour de l'algorithme, comme
une pile logicielle dédiée au traitement, pour s'assurer que le système est robuste,
évolutif et disponible. Vous allez devoir faire tout cela
pour le logiciel de toute façon. Mais si vous utilisez un algorithme, vous ajoutez un niveau de complexité
à la collecte des données et à l'entraînement.
Tout est plus compliqué. En général, nous recommandons de commencer
avec un système logiciel uniquement. Deuxième piège, l'un de mes préférés. Vous voulez utiliser le ML, mais vous n'avez
pas encore collecté de données. Sans données, vous êtes coincé. Il est inutile de parler de ML
si vous n'avez pas collecté des données adéquates
ou si vous n'y avez pas accès. Quand bien même vous auriez des données accumulées depuis des années, si elles sont conservées
dans un système géré par un autre service, et si vous ne les avez pas consultées, je suis prêt à parier que ces données sont inutilisables. Et ce n'est pas tout. Si personne dans votre organisation n'examine régulièrement ces données,
ne génère de rapports ou des insights, si ces données ne produisent aucune valeur, elles ne sont probablement pas gérées et elles deviennent obsolètes
sans prévenir. À ma connaissance, je n'ai jamais rencontré un client ayant surestimé le niveau d'effort requis
pour collecter des données propres. Personne ne m'a jamais dit
que c'était plus facile que prévu. Attendez-vous
à toutes sortes de problèmes. Quel est le piège suivant ? Vous n'avez pas tenu compte
du facteur humain. Lorsque ces systèmes de ML
commencent à effectuer des tâches et processus métier clés
dans nos organisations, ils deviennent incontournables. C'est pourquoi on observe à leur égard
une certaine réticence des entreprises, car ces systèmes leur sont indispensables, et il est alors crucial
de limiter ce risque. L'une des nombreuses options disponibles consiste à confier aux humains
l'examen des données, le traitement des cas mal gérés par le ML
et la sélection de données d'entraînement. Nous allons en parler plus tard, mais dans tout système
de ML de production Google, les humains ont un rôle. Parlons du piège suivant. Vous avez basé
la proposition de valeur d'un produit sur son algorithme de ML
plutôt que sur une autre fonctionnalité. Cela pose problème, car vos utilisateurs se soucient peu
de savoir qu'ils utilisent le ML. Ils veulent juste profiter
de la dernière fonctionnalité ou savoir si le produit
a de bonnes recommandations. Lors du lancement
d'un produit axé uniquement sur le ML, le système a besoin de données à traiter, et donc de nombreux utilisateurs,
afin d'apprendre à mieux interagir. Qu'en est-il
si vous concevez un système de ML, mais qu'il optimise la mauvaise solution ? Supposons que la recherche Google optimise l'engagement de l'utilisateur en fonction de la fréquence à laquelle
un utilisateur clique sur les résultats. Le but est que le client aime notre produit et qu'il reste engagé. Mais si l'optimisation est liée
à la fréquence des clics, il se peut que l'algorithme
apprenne à diffuser des contenus inappropriés, pour
inciter l'utilisateur à cliquer sans arrêt. Il faut considérer avec soin
toute optimisation, même imparfaite, et il est impératif d'identifier
tout effet pervers. Que se passe-t-il
si vous oubliez de mesurer si l'algorithme de ML
a un effet positif dans la pratique ? Vous le mettez
à la disposition de vos clients, mais vous ne savez pas 
s'il leur apporte un plus ou si vous boostez l'engagement,
ou la valeur vie client. C'est problématique,
car comment allez-vous faire pour convaincre votre manager,
ou son supérieur que vous voulez l'appliquer
à un autre produit en l'absence de preuves tangibles ? Quelques clients tombent
dans le piège suivant. Ils croient qu'en créant leur propre système,
ils pourront profiter de la même facilité d'utilisation
et de la même valeur ajoutée que celles d'un algorithme de ML tiers
pré-entraîné. Google Cloud propose quelques API de ML. Par exemple, l'API Cloud Vision vous permet d'envoyer une image en vue de la classifier
selon des libellés prédéfinis. C'est un véritable jeu d'enfant. Pas de problème d'infrastructure, de données d'entraînement et de collecte de données.
Il n'y a rien de plus facile. C'est une tout autre histoire
si vous voulez créer votre propre système, tout particulièrement si vous développez
votre algorithme de ML de A à Z. C'est bien plus complexe. Vous pensez qu'après la recherche,
les algorithmes sont entraînés une fois. Vous avez tout sur votre ordinateur portable, tout fonctionne
sur cet ensemble de données. Votre travail est fini. Eh bien non, car vous n'avez
probablement fait que 10 % du chemin. En effet, si vous voulez disposer d'un algorithme de ML
intégré à vos processus métier clés, vous allez devoir l'entraîner à de multiples reprises,
et vous allez tout faire pour simplifier le déroulement
de cet entraînement. Piège final : c'est en fait le seul qui traite de la difficulté
à optimiser l'algorithme de ML lorsque vous voulez créer
votre propre système en interne de reconnaissance visuelle,
vocale ou de TLN, c'est-à-dire
de traitement du langage naturel. C'est un piège un peu spécial, car ces systèmes sont loin
d'être aussi simples qu'ils paraissent. En fait, il s'agit des algorithmes
les plus sophistiqués, issus de dizaines d'années de recherches.
Mieux vaut donc opter pour un modèle prêt à l'emploi et prédéfini, plutôt que se lancer
dans des recherches très onéreuses. Voilà donc tous les pièges à éviter.
Ils sont nombreux. La bonne nouvelle, c'est que la valeur est générée au fur et à mesure. La transition vers le ML n'aboutit pas toujours, mais vous en tirerez
toutes sortes d'avantages. Et en cas de succès, le ML a un effet positif
sur presque tout ce qu'il touche. Sachez aussi que si le processus
est difficile pour votre société, il y a de fortes chances qu'il en soit
de même pour tous les acteurs du secteur. Une fois que le ML est appliqué
à un produit ou un processus interne, il permet aux utilisateurs ou aux clients de profiter d'expériences
de qualité difficiles à reproduire ou à égaler en raison du cercle vertueux généré par le système.
Plus il collecte de données, plus il apprend. Je voudrais mettre l'accent sur cette notion
de valeur qui augmente au fil du temps. Il est tentant de vouloir disposer
immédiatement d'une solution de ML automatisée de bout en bout, aux pouvoirs presque magiques. Nous en avons tous rêvé, mais les résultats ne sont généralement
pas convaincants. Je l'ai vu chez Google comme chez nos partenaires. Je voudrais maintenant proposer une approche plus réaliste
et les avantages qui en découlent.